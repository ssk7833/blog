<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北風筆記</title>
  
  <subtitle>紀錄一些學習心得、過程及日常</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://ssk7833.github.io/blog/"/>
  <updated>2018-12-10T06:54:10.787Z</updated>
  <id>http://ssk7833.github.io/blog/</id>
  
  <author>
    <name>North</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Raspberry pi 開機自動開啟 terminal 並執行 python 程式</title>
    <link href="http://ssk7833.github.io/blog/2018/12/10/raspberry-pi-autostart-lxterminal-and-run-python/"/>
    <id>http://ssk7833.github.io/blog/2018/12/10/raspberry-pi-autostart-lxterminal-and-run-python/</id>
    <published>2018-12-10T06:41:36.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近我有個需求是當我的樹莓派重開機後，要在自動登入 LXDE GUI session 後自動執行終端機 terminal 並執行特定程式，但發現其實並不簡單。<br>由於受限於動作在登入 GUI session 後，<code>crontab</code> 及 <code>/etc/rc.local</code> 都不適用我的情境，必須用 <code>lxsession</code> 才行，經過了多次的登入登出總算成功達到想要的目的，在此作為紀錄。</p><p>在底下假設自動登入使用者為 pi，且 Python 程式放於 <code>/home/pi/Desktop/myScript/main.py</code>，可以編輯 <code>/home/pi/.config/lxsession/LXDE/autostart</code> 文件，於最底下加上 <code>lxterminal --command=&quot;/bin/bash -c &#39;cd /home/pi/Desktop/myScript ; python main.py&#39;&quot;</code>，會發現這行直接於 terminal 執行是沒問題的，但是<strong>在 autostart 會錯</strong>，網路上也有人在問<a href="https://raspberrypi.stackexchange.com/q/89203" target="_blank" rel="external">一樣的問題</a>。</p><p>後來輾轉發現有人將 command 包在 script 中執行後好像可以，我自己試了也發現這樣就行了，<code>/home/pi/autostart.sh</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">cd</span> /home/pi/Desktop/myScript</span><br><span class="line">python main.py</span><br></pre></td></tr></table></figure></p><p>記得給 autostart.sh 執行權限：<code>chmod +x /home/pi/autostart.sh</code><br>並於 <code>/home/pi/.config/lxsession/LXDE/autostart</code> 中新增 <code>lxterminal --command=&quot;/home/pi/autostart.sh&quot;</code>，接著即可重開機／登入登出測試運作情況。</p><p>參考資料：</p><ol><li><a href="https://raspberrypi.stackexchange.com/q/89203" target="_blank" rel="external">bash - open a terminal on boot and auto-run a looping python script - Raspberry Pi Stack Exchange</a></li><li><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=169200" target="_blank" rel="external">How to open a new terminal and run commands in it - Raspberry Pi Forums</a></li><li><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=65607" target="_blank" rel="external">HowTo auto-run LXTerminal from LXDE desktop  at startup - Raspberry Pi Forums</a></li><li><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=132637" target="_blank" rel="external">How to autostart a program on Raspbian? - Raspberry Pi Forums</a></li><li><a href="https://superuser.com/q/1281509/617008" target="_blank" rel="external">terminal - How can I open a lxterminal with a script running in it? - Super User</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近我有個需求是當我的樹莓派重開機後，要在自動登入 LXDE GUI session 後自動執行終端機 terminal 並執行特定程式，但發現其實並不簡單。&lt;br&gt;由於受限於動作在登入 GUI session 後，&lt;code&gt;crontab&lt;/code&gt; 及 &lt;code&gt;
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="Raspberry pi" scheme="http://ssk7833.github.io/blog/tags/Raspberry-pi/"/>
    
      <category term="python" scheme="http://ssk7833.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>於 iOS 裝置上開發 Web App 筆記</title>
    <link href="http://ssk7833.github.io/blog/2018/08/27/develop-a-web-app-for-ios/"/>
    <id>http://ssk7833.github.io/blog/2018/08/27/develop-a-web-app-for-ios/</id>
    <published>2018-08-27T10:52:10.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>修改案例為一個已營運多年的 Discuz 論壇，聽到使用者的聲音，希望能於手機上用 App 瀏覽論壇，基於考量，開發一個 Native App 及上架是不太可能的，而論壇本身已有一版手機版網站，因此決定以 Web App 的方式來實驗看看，不過坑比想像中的大。</p><p>Apple 有一篇基本上講的蠻清楚的文章：<a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" target="_blank" rel="external">Configuring Web Applications</a><br>不過實際測試會發現問題蠻多的，以下一一列出自己碰到的狀況：</p><ol><li><p>App 圖示<br> 文件中明確的說出有幾個放法：</p><ul><li>要讓整個網站都有 icon，可以將 PNG 格式的圖片放置於根目錄，命名為：<code>apple-touch-icon.png</code></li><li><p>要在特定頁面加上自訂的 icon 可以於 &lt;head&gt; 中加入如：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"/custom_icon.png"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>要在不同解析度的裝置上能讀取不同尺寸的圖示，可以於 &lt;head&gt; 中加入如：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"touch-icon-iphone.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">sizes</span>=<span class="value">"152x152"</span> <span class="attribute">href</span>=<span class="value">"touch-icon-ipad.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">sizes</span>=<span class="value">"180x180"</span> <span class="attribute">href</span>=<span class="value">"touch-icon-iphone-retina.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">sizes</span>=<span class="value">"167x167"</span> <span class="attribute">href</span>=<span class="value">"touch-icon-ipad-retina.png"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  圖示大小可參考於 iOS Human Interface Guidelines 的 Graphics 一章，實際上這章已經變成 Icons and Images 內的<a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/app-icon/" target="_blank" rel="external">一部分</a>了。</p></li></ul><p>在這個區塊文件還特別註明了 iOS 7 以前 Safari 的特殊狀況，因此要特別注意，雖然這點對於 App icon 沒什麼影響，卻讓我對文件下一區塊 <code>Specifying a Launch Screen Image</code> 沒有任何特別註明任何狀況而浪費了很多時間，這區塊理應給個提醒，不過稍後再提。</p><p>App icon 會於首次要加入主畫面時去伺服器要相關檔案，之後基本上便會使用這個 icon 當作 app 的圖示；而問題是若 icon 需要更新時該如何更新？於 iOS 10.3.2 在同一天內測試發現除非移除 Web App 再重新加入主畫面，否則不會更新 App icon，而隨後試了 <a href="https://stackoverflow.com/a/4587917/4968420" target="_blank" rel="external">stackoverflow 這篇</a>的方法發現可行，雖然需要重開機才會更新，但起碼是個應急的方法：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"apple-touch-icon"</span> sizes=<span class="string">"152x152"</span> href=<span class="string">"/static/webapp/icons/icon-152x152.png?m=&lt;?php echo filemtime('apple-touch-icon.png'); ?&gt;"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"apple-touch-icon"</span> sizes=<span class="string">"180x180"</span> href=<span class="string">"/static/webapp/icons/icon-180x180.png?m=&lt;?php echo filemtime('apple-touch-icon.png'); ?&gt;"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"apple-touch-icon"</span> sizes=<span class="string">"167x167"</span> href=<span class="string">"/static/webapp/icons/icon-167x167.pngm=&lt;?php echo filemtime('apple-touch-icon.png'); ?&gt;"</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>App 標題<br> 這個沒遇到什麼狀況，文件提到預設抓 &lt;title&gt;，若需預設於 &lt;head&gt; 加入並修改 content 內容：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"apple-mobile-web-app-title"</span> <span class="attribute">content</span>=<span class="value">"AppTitle"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>隱藏 Safari UI<br> 將 Web App 視為獨立模式 App (standalone mode)，於 &lt;head&gt; 中加入：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"apple-mobile-web-app-capable"</span> <span class="attribute">content</span>=<span class="value">"yes"</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 為獨立 App 時預設所有超連結將會導回至 Safari App 中，因此須注意在 standalone mode 時將站內相關超連結改為用 AJAX 處理或更改 window.location 位置。<br> 可以參考作法：<a href="https://gist.github.com/irae/1042167" target="_blank" rel="external">Stay Standalone: Prevent links in standalone web apps opening Mobile Safari</a></p></li><li><p>改變 Status Bar 外觀<br> 只有為獨立 App 時有效，不過只有三種選擇：預設（淺灰色）、黑色、透明。<br> 以下為黑色範例：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"apple-mobile-web-app-status-bar-style"</span> <span class="attribute">content</span>=<span class="value">"black"</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 可參考 <a href="https://stackoverflow.com/a/40786240/4968420" target="_blank" rel="external">stackoverflow 這篇</a> 及 <a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html" target="_blank" rel="external">Supported Meta Tags</a></p></li><li><p>加上 Launch Screen Image / Splash Screens<br> 於 App 開啟時秀出的畫面，如一般 native App 開啟時的效果一樣，如<a href="https://medium.com/appscope/adding-custom-ios-splash-screens-to-your-progressive-web-app-41a9b18bdca3" target="_blank" rel="external">這篇</a>開頭圖片效果，不過在此需特別提一下 <code>iOS 8 9 10 實測不支援此效果</code>，由於官方文件沒有特別提到，讓我一直以為自己哪邊寫錯了；另外要使用此功能也<code>必須</code>為獨立 App 才行。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-startup-image"</span> <span class="attribute">href</span>=<span class="value">"/launch.png"</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 這個也支援不同解析度的圖片：可參考<a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/launch-screen/" target="_blank" rel="external">這篇</a>，不過網路上已經有實用的轉換工具 <a href="https://appsco.pe/developer/splash-screens" target="_blank" rel="external">About splash-screens - Appscope</a> 可供轉換成各種尺寸的圖片及對應的程式碼。<br> 想要先測試手機上支不支援，也可以先上<a href="https://medium.com/@applification/progressive-web-app-splash-screens-80340b45d210" target="_blank" rel="external">這篇</a>最底下的範例 <a href="https://pwa-splash.now.sh/" target="_blank" rel="external">PWA Splash Screens Demo</a> 來檢查手機支援的狀況如何。</p></li></ol><p>除這些基本設定外，遇到 web App 切到背景後再切回前景，其行為跟 native App 不一樣，web App 只要到了背景 native App 被 terminated 一樣，什麼狀態都要重來，因此預設情況下開啟 web App → 到了頁面 A → 切換至背景（例如收到推播去看個訊息等等） → 回到 web App，此時會回到預設的首頁，而非最後瀏覽的頁面 A；為了解決這個問題，可以利用 sessionStorage 紀錄是否為本次首次開啟 web App，以及 localStorage 紀錄最後去的連結頁面。<a href="http://www.andymercer.net/blog/2016/02/full-screen-web-apps-on-ios/" target="_blank" rel="external">這篇</a>結合了上面所提的超連結問題及 web App 前景背景切換問題，並有一步一步的解說及範例，相當詳細。</p><p>最後，<a href="https://appetize.io/demo" target="_blank" rel="external">Appetize.io</a> 提供了各種不同機型及 OS 版本的線上模擬功能對於測試 Web App 來說算是蠻方便的工具。<br>相較之下 Android 在這塊的設定上相當方便，也沒遇到什麼大問題，甚至幫 iOS 寫了部分教學範例呢……</p><p>參考資料：</p><ol><li><a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" target="_blank" rel="external">Configuring Web Applications</a></li><li><a href="https://stackoverflow.com/a/4587917/4968420" target="_blank" rel="external">html - Is it possible to force iphone/ipod to update apple-touch-icon once webapp is added to home screen? - Stack Overflow</a></li><li><a href="https://gist.github.com/irae/1042167" target="_blank" rel="external">Stay Standalone: Prevent links in standalone web apps opening Mobile Safari</a></li><li><a href="https://stackoverflow.com/a/40786240/4968420" target="_blank" rel="external">html - apple-mobile-web-app-status-bar-style in ios 10 - Stack Overflow</a></li><li><a href="https://medium.com/appscope/adding-custom-ios-splash-screens-to-your-progressive-web-app-41a9b18bdca3" target="_blank" rel="external">Adding Custom iOS Splash Screens To Your Progressive Web App</a></li><li><a href="https://medium.com/@applification/progressive-web-app-splash-screens-80340b45d210" target="_blank" rel="external">Progressive Web App Splash Screens – Dave Hudson – Medium</a></li><li><a href="http://www.andymercer.net/blog/2016/02/full-screen-web-apps-on-ios/" target="_blank" rel="external">Full Screen Web Apps on iOS - Andy Mercer</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;修改案例為一個已營運多年的 Discuz 論壇，聽到使用者的聲音，希望能於手機上用 App 瀏覽論壇，基於考量，開發一個 Native App 及上架是不太可能的，而論壇本身已有一版手機版網站，因此決定以 Web App 的方式來實驗看看，不過坑比想像中的大。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="PHP" scheme="http://ssk7833.github.io/blog/tags/PHP/"/>
    
      <category term="Web Application" scheme="http://ssk7833.github.io/blog/tags/Web-Application/"/>
    
      <category term="iOS" scheme="http://ssk7833.github.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>利用批次檔複製 git 兩筆 commit 的差異檔案</title>
    <link href="http://ssk7833.github.io/blog/2018/08/20/copy-all-files-changed-between-commits-using-batch-script/"/>
    <id>http://ssk7833.github.io/blog/2018/08/20/copy-all-files-changed-between-commits-using-batch-script/</id>
    <published>2018-08-20T07:33:00.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>上週不曉得為什麼躺著就掉進坑中，開始自願協助改善某個論壇功能，一加入才發現長期以來沒有使用版本控制，且更新聽說是直接將檔案拉到正式網站上的 FTP 測試。聽起來有點毛骨悚然，因此先幫忙建了一個 git，先別想 CI/CD 了，需要的成本有點太高了，考量到種種狀況，於是決定先寫個 script 來協助上傳到 FTP 的功能。</p><p><code>diffcopy.bat</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">SETLOCAL ENABLEDELAYEDEXPANSION</span><br><span class="line"><span class="keyword">for</span> /f %%a <span class="keyword">in</span> (<span class="string">'git diff --name-only %1 %2'</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> <span class="string">"filepath=%%a"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"filepath=!filepath:/=\!"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"destFilepath=diffExport\!filepath!"</span></span><br><span class="line">    <span class="built_in">echo</span> !destFilepath!</span><br><span class="line">    xcopy !filepath! !destFilepath!* /Y /I /Q</span><br><span class="line">)</span><br><span class="line">ENDLOCAL</span><br></pre></td></tr></table></figure></p><p>使用方法：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diffcopy ae40e29 05b7a26</span><br></pre></td></tr></table></figure></p><p><img src="/blog/images/2018-08-20-copy-all-files-changed-between-commits-using-batch-script/01.png" alt="執行結果" title="執行結果"></p><p>如此一來即可取得 commit ae40e29 到 05b7a26 之間的差異檔案，並複製到 <code>diffExport</code> 資料夾，原本想將資料夾如 <a href="https://stackoverflow.com/a/31341016/4968420" target="_blank" rel="external">Stack Overflow 這篇</a>一樣設為第三個參數，後來想想簡單就好，不過記得於每次下指令前須先手動將 diffExport 清空才行。</p><p>雖然有找到 <a href="https://github.com/gitpython-developers/GitPython" target="_blank" rel="external">GitPython</a> 看似蠻方便的 library，但想想還是寫個 batch 好了。</p><p>參考資料：</p><ol><li><a href="https://stackoverflow.com/a/31341016/4968420" target="_blank" rel="external">git - Copy all files changed in last commit - Stack Overflow</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上週不曉得為什麼躺著就掉進坑中，開始自願協助改善某個論壇功能，一加入才發現長期以來沒有使用版本控制，且更新聽說是直接將檔案拉到正式網站上的 FTP 測試。聽起來有點毛骨悚然，因此先幫忙建了一個 git，先別想 CI/CD 了，需要的成本有點太高了，考量到種種狀況，於是決定先
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="batch" scheme="http://ssk7833.github.io/blog/tags/batch/"/>
    
      <category term="git" scheme="http://ssk7833.github.io/blog/tags/git/"/>
    
      <category term="windows" scheme="http://ssk7833.github.io/blog/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 2 使用 MySQL 作為資料庫</title>
    <link href="http://ssk7833.github.io/blog/2018/04/03/aspnet-core-2-use-mysql-as-database/"/>
    <id>http://ssk7833.github.io/blog/2018/04/03/aspnet-core-2-use-mysql-as-database/</id>
    <published>2018-04-03T08:05:30.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>本篇建立在完成<a href="https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/razor-pages-vsc/model" target="_blank" rel="external">使用 Visual Studio Code 將模型新增至 ASP.NET Core 中的 Razor 頁面應用程式</a>教學之後，已建立 Sqlite 作為資料庫，並完成本篇教學，預計將資料庫轉為 MySQL。</p><p>先將 MySQL NuGet 套件安裝到目前專案中，可參考 <a href="https://docs.microsoft.com/en-us/ef/core/providers/" target="_blank" rel="external">Database Providers</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package MySql.Data.EntityFrameworkCore</span><br></pre></td></tr></table></figure></p><p>於 <code>appsettings.json</code> 中，將 <code>MovieContext</code> 資料取代為連線設定：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"Logging"</span>: &#123;</span><br><span class="line">    <span class="string">"IncludeScopes"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="string">"Default"</span>: <span class="string">"Warning"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"ConnectionStrings"</span>: &#123;</span><br><span class="line">    <span class="comment">// "MovieContext": "Data Source=MvcMovie.db",</span></span><br><span class="line">    <span class="string">"MovieContext"</span>: <span class="string">"server=192.168.99.100;database=mydatabase;user=myuser;password=mypassword"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>於 <code>Startup.cs</code> 中，將 <code>options.UseSqlite(Configuration.GetConnectionString(&quot;MovieContext&quot;))</code> 取代為 <code>UseMySQL</code>：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddDbContext&lt;MovieContext&gt;(options =&gt; </span><br><span class="line">  options.UseMySQL(Configuration.GetConnectionString(<span class="string">"MovieContext"</span>)));</span><br></pre></td></tr></table></figure></p><p>接著於 CLI 中執行指令（若還沒 migrate 過，請先執行 <code>dotnet ef migrations add InitialCreate</code>）：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure></p><p>應會遇到 <code>Table &#39;mydatabase.__EFMigrationsHistory&#39; doesn&#39;t exist</code> 的錯誤訊息，此為已知問題，可藉由新增這張資料表來解決此問題：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`__EFMigrationsHistory`</span> </span><br><span class="line">( </span><br><span class="line">  <span class="string">`MigrationId`</span> <span class="keyword">nvarchar</span>(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">  <span class="string">`ProductVersion`</span> <span class="keyword">nvarchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`MigrationId`</span>) </span><br><span class="line">);</span></span><br></pre></td></tr></table></figure></p><p>新增後再重新執行 <code>dotnet ef database update</code>，成功後此時於資料庫中應可看到 <code>Movie</code> 資料表，此時即大功告成。</p><p>後記：若選擇 <code>Pomelo.EntityFrameworkCore.MySql</code> 應該就不會有資料表不存在的問題，而 ConnectionStrings 應改為以下格式：<code>Server=localhost;database=mydatabase;uid=myuser;pwd=mypassword;</code>。</p><p>參考資料：</p><ol><li><a href="https://docs.microsoft.com/en-us/ef/core/providers/" target="_blank" rel="external">Database Providers - EF Core | Microsoft Docs</a></li><li><a href="https://dev.mysql.com/doc/connector-net/en/connector-net-entityframework-core.html" target="_blank" rel="external">MySQL :: MySQL Connector/Net Developer Guide :: 8.3 Entity Framework Core Support</a></li><li><a href="https://stackoverflow.com/a/46090571/4968420" target="_blank" rel="external">EF Core `update-database` on MySql fails with `__EFMigrationsHistory’ doesn’t exist` - Stack Overflow</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇建立在完成&lt;a href=&quot;https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/razor-pages-vsc/model&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Visual St
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="ASP.NET Core 2" scheme="http://ssk7833.github.io/blog/tags/ASP-NET-Core-2/"/>
    
      <category term="MySQL" scheme="http://ssk7833.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 2 發行時封裝整個靜態檔案資料夾</title>
    <link href="http://ssk7833.github.io/blog/2018/03/28/aspnet-core-2-embed-entire-static-files-folder/"/>
    <id>http://ssk7833.github.io/blog/2018/03/28/aspnet-core-2-embed-entire-static-files-folder/</id>
    <published>2018-03-28T07:49:02.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>在某些狀況，可能會想把 <code>wwwroot</code> 包起來，以防止遇到不預期的修改，雖然以下方式也只是簡易的防君子不防小人的方式。<br>首先以 <a href="https://docs.microsoft.com/zh-tw/aspnet/core/getting-started" target="_blank" rel="external">ASP.NET Core 使用者入門</a>的範例為例，建立一個新專案並直接發行它：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new razor -o aspnetcoreapp</span><br></pre></td></tr></table></figure></p><p>將此專案發行到 out 資料夾中：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet publish -c release -o out</span><br></pre></td></tr></table></figure></p><p>完成後進到 out 資料夾中，可以看到以下檔案：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="operator">-l</span></span><br><span class="line">total <span class="number">408</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>    <span class="number">178</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">14</span> appsettings.Development.json</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>    <span class="number">113</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">14</span> appsettings.json</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> North <span class="number">1049089</span>  <span class="number">68096</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">37</span> aspnetcoreapp.PrecompiledViews.dll*</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>  <span class="number">42496</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">37</span> aspnetcoreapp.PrecompiledViews.pdb</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span> <span class="number">280120</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">37</span> aspnetcoreapp.deps.json</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> North <span class="number">1049089</span>   <span class="number">7168</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">36</span> aspnetcoreapp.dll*</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>   <span class="number">1668</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">36</span> aspnetcoreapp.pdb</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>    <span class="number">221</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">37</span> aspnetcoreapp.runtimeconfig.json</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>    <span class="number">628</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">14</span> bundleconfig.json</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>    <span class="number">387</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">37</span> web.config</span><br><span class="line">drwxr-xr-x <span class="number">1</span> North <span class="number">1049089</span>      <span class="number">0</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">37</span> wwwroot/</span><br></pre></td></tr></table></figure></p><p>可以執行，驗證結果是否正確：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet aspnetcoreapp.dll</span><br></pre></td></tr></table></figure></p><p>接著就開始改 code 了，首先於 <code>aspnetcoreapp.csproj</code> 的 &lt;Project&gt; 內加上這些內容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Content</span> <span class="attribute">Remove</span>=<span class="value">".\wwwroot\**\*"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">EmbeddedResource</span> <span class="attribute">Include</span>=<span class="value">".\wwwroot\**\*"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Link</span>&gt;</span>%(RecursiveDir)%(Filename)%(Extension)<span class="tag">&lt;/<span class="title">Link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">EmbeddedResource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>把 out 資料夾清空後再重新發行後，可以看到 wwwroot 資料夾不見了，且aspnetcoreapp.dll 的檔案大小大了不少：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="operator">-l</span></span><br><span class="line">total <span class="number">2420</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>     <span class="number">178</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">14</span> appsettings.Development.json</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>     <span class="number">113</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">14</span> appsettings.json</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> North <span class="number">1049089</span>   <span class="number">68096</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">59</span> aspnetcoreapp.PrecompiledViews.dll*</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>   <span class="number">42496</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">59</span> aspnetcoreapp.PrecompiledViews.pdb</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>  <span class="number">280120</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">59</span> aspnetcoreapp.deps.json</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> North <span class="number">1049089</span> <span class="number">2068480</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">59</span> aspnetcoreapp.dll*</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>    <span class="number">1672</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">59</span> aspnetcoreapp.pdb</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>     <span class="number">221</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">59</span> aspnetcoreapp.runtimeconfig.json</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>     <span class="number">628</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">14</span> bundleconfig.json</span><br><span class="line">-rw-r--r-- <span class="number">1</span> North <span class="number">1049089</span>     <span class="number">387</span> Mar <span class="number">28</span> <span class="number">14</span>:<span class="number">59</span> web.config</span><br></pre></td></tr></table></figure></p><p>此時若執行 dotnet aspnetcoreapp.dll 會發現所有靜態檔案都沒被載入，因為 <code>UseStaticFiles()</code> 預設只載入 <code>wwwroot</code> 資料夾內的內容，因此要再做些修改。<br>開啟 <code>Startup.cs</code>，於開頭加上：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.FileProviders;</span><br></pre></td></tr></table></figure></p><p>並於 <code>public void Configure(IApplicationBuilder app, IHostingEnvironment env)</code> 內加上，加的位置端看於對 <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?tabs=aspnetcore2x" target="_blank" rel="external">Middleware</a> 想做什麼操作，在這裡不多加描述：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> embeddedProvider = <span class="keyword">new</span> EmbeddedFileProvider(Assembly.GetEntryAssembly());</span><br><span class="line">app.UseStaticFiles(<span class="keyword">new</span> StaticFileOptions &#123;</span><br><span class="line">  FileProvider = embeddedProvider</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接著再執行 dotnet aspnetcoreapp.dll，理應可得到正確的結果。以上範例存放於此 <a href="https://github.com/ssk7833/aspnetcoreappEmbedStaticFiles" target="_blank" rel="external">aspnetcoreappEmbedStaticFiles</a>。</p><p>不過若用 Hex Editor 或直接用文字編輯器打開 aspnetcoreapp.dll 後可以看到內部還是可以看到 css, js 等內容，且可以被修改（若字元長度沒變的話），因此只是一個簡易的防範而已。</p><p>參考資料：</p><ol><li><a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/visual-studio-publish-profiles?tabs=aspnetcore2x" target="_blank" rel="external">Visual Studio publish profiles for ASP.NET Core app deployment | Microsoft Docs</a></li><li><a href="https://msdn.microsoft.com/en-us/library/bb629388.aspx" target="_blank" rel="external">Common MSBuild Project Items</a></li><li><a href="https://stackoverflow.com/a/8997746/4968420" target="_blank" rel="external">How can I have an entire folder be an embedded resource in a Visual Studio project? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/a/29962840/4968420" target="_blank" rel="external">Include Files using Wildcard into a folder in Visual Studio - Stack Overflow</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在某些狀況，可能會想把 &lt;code&gt;wwwroot&lt;/code&gt; 包起來，以防止遇到不預期的修改，雖然以下方式也只是簡易的防君子不防小人的方式。&lt;br&gt;首先以 &lt;a href=&quot;https://docs.microsoft.com/zh-tw/aspnet/core/get
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="ASP.NET Core 2" scheme="http://ssk7833.github.io/blog/tags/ASP-NET-Core-2/"/>
    
  </entry>
  
  <entry>
    <title>自己婚宴自己搞，婚宴彈幕系統</title>
    <link href="http://ssk7833.github.io/blog/2018/02/01/DIY-wedding-chat-system/"/>
    <id>http://ssk7833.github.io/blog/2018/02/01/DIY-wedding-chat-system/</id>
    <published>2018-01-31T16:22:30.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>婚宴結束後已經休息一陣子了，除了準備挪威的行程外，擠出些時間寫個婚宴彈幕系統的心得，以免最後因拖延症搞得無疾而終。</p><p>會觸發這場婚宴的原因，主要是因為在 2017/04/28 聚餐時，不曉得話題什麼時候被帶到極光去，而另一半提到想看極光時，有學長提到要看極光最好趕快去，因為近年來已經進到衰退期，迫使我們……回家後就開始查相關資訊，而在六天後已經決定去挪威，且開始下訂機票、郵輪、住宿等，決定在今年農曆過年時去一趟挪威旅遊。決定蜜月時間後，即開始挑場地，最後選上老新台菜，並將時間敲定於 2018/01/06。</p><p>在這段時間不時的需要去處理婚宴相關的大小事，但就是沒去處理婚宴當天影片要呈現什麼內容，直到約 11 月底時我們在巴哈動畫瘋上看了一部網路評論部分說很好看的遊戲改編動畫作品，而我們看了一致認同非常粗糙，最後每集都是開著彈幕才有辦法看下去（直接從懸疑片變成搞笑片），後來才有了「很多人都會在婚宴上放影片輪播，不如我們把影片加上彈幕系統讓畫面更有趣吧！」的想法出來，另外因為婚宴的座位安排遲遲無法決定，所以也決定寫個線上查詢座位的功能來讓座位可以隨狀態調整（例如臨時有誰要來爆位置，有誰不來使得一桌少於幾人），而最後拖到 2017/12/27 才開了 git repo 出來開始配置專案，開始撰寫彈幕系統跟帶位系統。所幸還有周末遇到跨年跟婚宴前兩天請假，有幾天可以專心寫程式不用擔心寫到太晚需要中斷思緒的問題，這幾天都是做到早上五六點才睡，活像個趕學期專題的大學生。</p><p>彈幕系統主要希望是賓客在看影片播放時，也能跟其他人互動交流一下，可能是吐個槽、也可能是交個朋友，就像在看動畫瘋、niconico 一樣，有時可以看到某些留言是有相關性的，也有些留言可能根本就離題，看了也是很有趣，也希望可以讓賓客們找點事做，不會因為影片輪播過一次後就沒有新鮮感，因為留言的內容只會越來越多，也可能會出現其他沒看過的訊息；而對於我們來說，我們知道自己在現場是沒什麼機會看到的，所以事先規劃了資料儲存來讓我們事後自己找時間看，除了部分是當天利用寫好的後台來看留言並隱藏不當留言外，配上影片的完整版本也是婚宴結束後才看的。</p><p>看過完整版本後也試著將它錄下來，可惜電腦不夠力，錄下來似乎有點卡，這是隱藏掉部分留言後的最後版本，也就是現場看到的版本。</p><p><img src="/blog/images/2018-02-01-DIY-wedding-chat-system/01.jpg" alt="影片截圖" title="影片截圖"><br><img src="/blog/images/2018-02-01-DIY-wedding-chat-system/02.jpg" alt="影片截圖" title="影片截圖"></p><p>同時也順便看了一下若將隱藏的留言通通呈現後會長什麼樣子，會發現多了一些大學朋友們現場測試 SQL injection 跟 XSS attack 的一些訊息，這些人給不給活路啊！不過還好沒出什麼問題就是 :P（雖然這類型留言還是被我們隱藏起來了）</p><p><img src="/blog/images/2018-02-01-DIY-wedding-chat-system/03.jpg" alt="未隱藏部分留言的影片截圖" title="未隱藏部分留言的影片截圖"></p><h2 id="實作細節"><a href="#實作細節" class="headerlink" title="實作細節"></a>實作細節</h2><p>這個系統架設於 Azure 上，也是第一次接觸 Azure，使用過程上非常輕鬆，沒有過多的陣痛期，主要用的資源是 App Service 跟 Azure Cosmos DB：App Service 快速建立起 Node.js 環境，讓我可以專注在 Node.js 的程式上面，且利用 GitHub 進行 Continuous Deployment，也省去一些手動上傳的動作；Azure Cosmos DB 則是讓我輕鬆建立 mongoDB 來儲存資料。</p><p>伺服器網頁框架採用 Express.js，手機發送留言跟影片彈幕功能則是用 socket.io 來處理 websocket 的部分，讓訊息可以即時呈現；影片的彈幕最小單位是秒，我們決定讓它出現於畫面底部且共十個軌道，其位置是利用 Fisher–Yates shuffle 來進行隨機安排，因此每一次播到同樣秒數時，每個留言的位置都是隨機的。除了十軌外，留言移動的速度也是隨機十種，但不做十種 shuffle 而是直接隨機，因此同一秒出現的留言可能會有快有慢，也可能有相等的；而若同一秒內超過十個留言，則是每十個留言做一次位置的 shuffle，最後同時丟出，其中就會出現留言重疊的事件，而留言多到重疊我們也認為這是彈幕的一種特色，且因為時間緊迫，因此就沒特別處理了，只能期望重疊的留言因速度不同的而能分辨各個留言的內容。</p><p>而留言系統我們曾考慮過到底該用黑名單還白名單機制來讓人留言，以及是否該綁定 Facebook 第三方登入的問題：黑白名單主要差在是否留言後須先通過審核才會出現，或是出現後再遭隱藏的問題，最後我們選擇使用黑名單機制，認為我們賓客都是很乖的，如果亂留言一定是交到壞朋友才這樣的；綁定 Facbook 登入的問題，以我們自己的觀點來看，若是需要綁定 Facebook 登入來驗證姓名的話，那我的參與意願就會降低，因此最後選擇直接輸入自已的姓名即可，即便害羞要打暱稱也不是不行。而在這點上我們徹底的錯了。原以為某個最有可能亂來的人因為出差去美國所以不用擔心太多的我們真是太天真了。好在防人之心不可無，必要的防護我還是有處理的，不然影片彈幕可能就被 XSS attack 玩壞了。當天才知道原來不是存在幾個亂留言的壞朋友，而是某桌整桌都是壞朋友！除了各種攻擊外，還出現各種不可能出現的姓名留言，例如我自己的名字，還有系上教授的名字，雖然很好笑，但也太 troll 了吧 XDD。好在有寫一個陽春的後台系統，可以即時顯示／隱藏留言及開啟／關閉留言功能，如下圖。</p><p><img src="/blog/images/2018-02-01-DIY-wedding-chat-system/04.jpg" alt="手機後台截圖" title="手機後台截圖"><br><img src="/blog/images/2018-02-01-DIY-wedding-chat-system/05.jpg" alt="手機後台截圖" title="手機後台截圖"></p><p>影片彈幕系統的部分，由於影片是放在 local 的電腦上，而又須連到網路上拿取後臺資料，因此利用 Google Chrome kiosk mode 來呈現，好在曾經做過<a href="/blog/2016/08/02/setup-Google-Chrome-as-kiosk-application-settings/">研究</a>，就直接拿以前的筆記稍微改一下複製貼上就沒事了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.exe <span class="string">"file:///C:/dist/index.html"</span> --user-data-dir=<span class="string">"C:/Chrome dev session"</span> --disable-web-security --test-type --disable-translate --kiosk</span><br></pre></td></tr></table></figure></p><p>手機前端網頁部分其實是花最多時間的，主要是 UI 該怎麼呈現也是改了又改改了又改，又再一次體會了下面這張圖的心情。同時也試著使用 History API 等未使用過的功能。</p><p><blockquote class="imgur-embed-pub" lang="en" data-id="IKw1B3W"><a href="//imgur.com/IKw1B3W">Sums up my new job as a graphic designer.</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script></p><p>另外帶位系統是不是多餘的，有親戚知道這個曾問過如果手機沒網路或不會用的人該怎麼辦，回答是「本婚宴不歡迎非親戚與非現代人入場」。因為我們確定除親戚外，其他人平常都會使用到這部分才這樣做，且許多人可能都有雙重身分，例如是大學同學也是社團同學，到底該坐哪桌的問題。且婚宴前一天都還有人臨時想來／不能來，此時我們要動態調整位置時就變得很方便！</p><h2 id="可改善的部分"><a href="#可改善的部分" class="headerlink" title="可改善的部分"></a>可改善的部分</h2><ul><li>未考慮到使用者可能會輸入 emoji，還好 emoji 能正常顯示，只是可能會跟使用者心中的樣式長得不一樣。</li><li>留言顏色只有白色，其實有想過更多顏色也許不錯，實作也不難，但後來又覺得會不會太亂就先作罷，看到有留言提到「需要能更換顏色，下班前給我」時覺得沒做好像有點可惜？</li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>寫的過程雖累但有趣，算是累得值得的一件事！<br>最後再次感謝參與婚宴的所有人，沒有你們的話，這個系統就不會出現。（重點誤）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;婚宴結束後已經休息一陣子了，除了準備挪威的行程外，擠出些時間寫個婚宴彈幕系統的心得，以免最後因拖延症搞得無疾而終。&lt;/p&gt;
&lt;p&gt;會觸發這場
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="wedding" scheme="http://ssk7833.github.io/blog/tags/wedding/"/>
    
  </entry>
  
  <entry>
    <title>利用 canvas 於 Chrome 實作 iOS 模糊背景效果</title>
    <link href="http://ssk7833.github.io/blog/2016/10/18/canvas-solution-of-implement-iOS-blurry-overlay-view-on-Chrome/"/>
    <id>http://ssk7833.github.io/blog/2016/10/18/canvas-solution-of-implement-iOS-blurry-overlay-view-on-Chrome/</id>
    <published>2016-10-18T03:02:30.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/2016-10-18-canvas-solution-of-implement-iOS-blurry-overlay-view-on-Chrome/01.png" alt="iOS blurry overlay" title="iOS blurry overlay"><br>這次要處理的就是上面的背景模糊背景效果，雖 iOS7 在某些版面上已經有了，但在瀏覽器上要做到同樣的事通常都要疊兩張一樣的圖再做 filter 處理，若今天需要模糊的是比圖片複雜的，例如影片、包含其他動態元件的 html 等就會變得不好處理。<br>在 Safari 上可以使用 <code>-webkit-backdrop-filter: blur(5px);</code> CSS 屬性來處理，且可以根據上層的 overflow:hidden; 來改變模糊的區域範圍；而在 Google Chrome 上，雖然可以透過 <code>enable-experimental-web-platform-features</code> 來開啟 <code>backdrop-filter: blur(5px);</code> 功能，但在配合其他 CSS 屬性時很容易出現 bug。</p><p>backdrop-filter 的實作範例：Chrome 需開啟 <code>enable-experimental-web-platform-features</code> 才能看到結果<br>Safari 下正常，而 Chrome 也正常，但我需要圓弧邊框：<a href="https://jsfiddle.net/ssk7833/8ybsqz4k/14/" target="_blank" rel="external">JSFiddle</a><br>Safari 下正常，而 Chrome 下若上層有 overflow: hidden; 時則完全無效：<a href="https://jsfiddle.net/ssk7833/8ybsqz4k/19/" target="_blank" rel="external">JSFiddle</a></p><p>網路上能找到許多解法，像是放兩張圖或放兩個影片，前景的圖層加上 filter:blur 即可，但最後我選擇使用 canvas 來實作看看。</p><iframe width="100%" height="300" src="//jsfiddle.net/ssk7833/8ybsqz4k/38/embedded/result,html,js,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><p>背景是影片的狀況：</p><iframe width="100%" height="300" src="//jsfiddle.net/ssk7833/zjzdmbcj/4/embedded/result,html,js,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><p>不過 canvas 解法反而不適用於 Safari，因為 Safari 不支援 canvas filter…XD</p><p>參考資料：</p><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter" target="_blank" rel="external">CanvasRenderingContext2D.filter - Web APIs | MDN</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/blog/images/2016-10-18-canvas-solution-of-implement-iOS-blurry-overlay-view-on-Chrome/01.png&quot; alt=&quot;iOS blurry overlay&quot; title=&quot;
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CSS" scheme="http://ssk7833.github.io/blog/tags/CSS/"/>
    
      <category term="canvas" scheme="http://ssk7833.github.io/blog/tags/canvas/"/>
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML 中多個可移動視窗互相覆蓋的處理方法</title>
    <link href="http://ssk7833.github.io/blog/2016/10/06/solution-of-multiple-draggable-elements-overlay-each-other-html/"/>
    <id>http://ssk7833.github.io/blog/2016/10/06/solution-of-multiple-draggable-elements-overlay-each-other-html/</id>
    <published>2016-10-06T05:58:30.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>雖說是視窗，但其實是個元件，不過稱視窗好像比較直觀些。<br>總之先看已經用 javascript 完成可移動的多個視窗功能，在沒有做任何處理的情況下，利用滑鼠去移動分別標有數字的方塊，會發現數字高的永遠在上層：</p><iframe width="100%" height="300" src="//jsfiddle.net/ssk7833/dsnneaos/6/embedded/result,html,js,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><p>我想到的解決方法有兩種：</p><ol><li>改變 DOM 的順序</li><li>改變 z-index</li></ol><h2 id="改變-z-index"><a href="#改變-z-index" class="headerlink" title="改變 z-index"></a>改變 z-index</h2><p><iframe width="100%" height="300" src="//jsfiddle.net/ssk7833/dsnneaos/8/embedded/result,html,js,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br>缺點：z-index 可能會超過其他元件的 z-index，因此最好讓移動視窗的 z-index 固定在一個區間內循環。（z-index 值的區間為一個 int）</p><h2 id="改變-DOM-的順序"><a href="#改變-DOM-的順序" class="headerlink" title="改變 DOM 的順序"></a>改變 DOM 的順序</h2><p><iframe width="100%" height="300" src="//jsfiddle.net/ssk7833/dsnneaos/9/embedded/result,html,js,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br>缺點：若內容有像卷軸一樣無法用 CSS 控制的部分，在改變 DOM 的順序後將不會保留原先狀態，如下範例的數字 1 方塊。</p><p><iframe width="100%" height="300" src="//jsfiddle.net/ssk7833/dsnneaos/10/embedded/result,html,js,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br>解決方法：先把所有額外的狀態記起來，移動過順序後再將這些狀態指定回去。</p><p>最後我選擇了改變 z-index 的方法，因為我的移動視窗內可能會有多個卷軸，若要一一紀錄狀態實在麻煩，而且實測兩個方法的重繪效率上，z-index 也是略勝一籌。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;雖說是視窗，但其實是個元件，不過稱視窗好像比較直觀些。&lt;br&gt;總之先看已經用 javascript 完成可移動的多個視窗功能，在沒有做任何處理的情況下，利用滑鼠去移動分別標有數字的方塊，會發現數字高的永遠在上層：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; heigh
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CSS" scheme="http://ssk7833.github.io/blog/tags/CSS/"/>
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>利用 windows batch 自動初始化、檢查 Google Chrome 開啟狀態</title>
    <link href="http://ssk7833.github.io/blog/2016/09/30/using-windows-batch-to-initialize-and-check-chrome-status/"/>
    <id>http://ssk7833.github.io/blog/2016/09/30/using-windows-batch-to-initialize-and-check-chrome-status/</id>
    <published>2016-09-30T07:04:20.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>延續上一篇<a href="/blog/2016/08/02/setup-Google-Chrome-as-kiosk-application-settings/">利用 Google Chrome 作為 kiosk 應用時的設定項目</a>所提到的，這個最終要應用在 batch 上，來達到在 kiosk 應用上能自動開機便能自動初始化、自動檢查 Chrome 是否因為不明原因被關閉了，減少作業系統曝光的情況，否則哪天說不定就會被拍照下來留念。</p><p><img src="https://cdn0-t17-techbang.pixcdn.tw/system/attached_images/2013/06/99221/show/660a0705c6416315e5146d622080be1a.jpg?1372171678" alt="Windows 出來呼吸了：http://t17.techbang.com/topics/20686-tv-advertising-is-running-windows-7-11" title="Windows 出來呼吸了！"></p><p>batch 檔內容如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">:: detectChrome.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 初始化</span><br><span class="line"><span class="built_in">echo</span> Initialize...</span><br><span class="line">:: 更改資料夾到正確位置</span><br><span class="line"><span class="built_in">cd</span> C:\</span><br><span class="line"></span><br><span class="line">:: 檢查網路狀態</span><br><span class="line"><span class="built_in">echo</span> Waiting <span class="keyword">for</span> Interent connection...</span><br><span class="line">:checkInternet</span><br><span class="line">ping www.google.com -n <span class="number">1</span> -w <span class="number">10000</span> &gt; nul</span><br><span class="line">IF errorlevel <span class="number">1</span> GOTO checkInternet</span><br><span class="line"></span><br><span class="line">:: 這裡可放入自己想放的 code</span><br><span class="line">::node update.js</span><br><span class="line"></span><br><span class="line">:: 進入迴圈</span><br><span class="line">:start</span><br><span class="line">:: 若 processEnd.tmp 則跳脫迴圈結束程式</span><br><span class="line">IF EXIST processEnd.tmp (</span><br><span class="line">  <span class="built_in">echo</span> processEnd.tmp detected! End the process.</span><br><span class="line">  GOTO end</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tasklist /FI <span class="string">"IMAGENAME eq chrome.exe"</span> /FO TABLE &gt; process.log</span><br><span class="line">FOR /F %%c <span class="keyword">in</span> (<span class="string">'find /v /c "" ^&lt; process.log'</span>) DO <span class="built_in">set</span> lineCount=%%c</span><br><span class="line">:: 刪除暫存檔案 process.log</span><br><span class="line">DEL process.log</span><br><span class="line">:: 若 process 存在，則 lineCount 會大於 <span class="number">1</span>，不存在則等於 <span class="number">1</span>，因此若大於 <span class="number">1</span> 則跳過執行部分</span><br><span class="line">IF %lineCount% GTR <span class="number">1</span> GOTO skip</span><br><span class="line">:: 執行程式</span><br><span class="line"><span class="built_in">echo</span> Execute Chrome</span><br><span class="line">::<span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"</span> --user-data-dir=<span class="string">"C:/Chrome dev session"</span> --disable-web-security --new-window <span class="string">"file:///C:/dist/index.html"</span> --test-type --kiosk</span><br><span class="line">start /WAIT /MAX chrome.exe --user-data-dir=<span class="string">"C:/Chrome dev session"</span> --disable-web-security --new-window <span class="string">"file:///C:/dist/index.html"</span> --test-type --disable-translate --kiosk</span><br><span class="line">:skip</span><br><span class="line"></span><br><span class="line">REM 等待一段時間後再次檢查(秒)</span><br><span class="line">timeout /t <span class="number">5</span></span><br><span class="line">GOTO start</span><br><span class="line">:end</span><br><span class="line">DEL processEnd.tmp</span><br></pre></td></tr></table></figure></p><p>主要流程為需要開機後直接執行更新，但我的環境曾遇到開機後網路異常的現象，因此檢查網路是否有沒有通，如果不擔心此問題的話則可考慮把<code>檢查網路狀態</code>那幾行拿掉。接著再執行自己需要的程式，我這邊已有一現成用 node.js 撰寫的程式，因此就讓他執行 node update.js。接著就進入 Chrome 判斷的迴圈了，為避免意外重複開啟 Chrome，因此先判斷了是否有 Chrome 在開啟狀態，若都沒有再開啟。</p><p>接著把這隻 batch 檔案丟到「所有程式」的「啟動」中就行了，或是利用「工作排程器」也可以達到同樣效果，唯一不方便的是有需要對電腦做操作時，要關掉這隻程式不是很方便，因此我又另外寫了一隻關閉這隻程式的 code，很懶惰的用了檔案檢查的方式去處理，在 detectChrome.bat 的迴圈中判斷是否有個暫存的檔案 processEnd.tmp，若有的話則不要中止程式。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:: end.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">type</span> nul &gt; C:\processEnd.tmp</span><br><span class="line"><span class="built_in">echo</span> 等待倒數後結束程式</span><br></pre></td></tr></table></figure><p>如此一來，不太懂的操作者也可以輕鬆的用 alt+tab, windows+d 等按鍵從 chrome kiosk 切換出去，然後開啟這隻 end.bat，再把 chrome alt+f4 關閉來完整結束這個程式帶來的影響。</p><p>bash 寫慣了，要寫 batch 還真不太適應，所幸有朋友的 <a href="http://www.slideshare.net/yipotw/batch-56466561" target="_blank" rel="external">Batch 溫故/知新</a> 支援省了我不少時間。</p><p>參考資料：</p><ol><li><a href="http://www.slideshare.net/yipotw/batch-56466561" target="_blank" rel="external">Batch 溫故/知新</a></li><li><a href="https://dotblogs.com.tw/rolence0515/2011/08/15/33157" target="_blank" rel="external">不用寫程式，偵測執行檔沒running就再次執行它</a></li><li><a href="https://social.technet.microsoft.com/Forums/scriptcenter/en-US/1867323d-e6c7-440f-83a4-2bdc9b4432d5/count-number-of-lines-in-a-text-file-from-a-windows-batch-file?forum=ITCG" target="_blank" rel="external">Count number of lines in a text file from a windows batch file</a></li><li><a href="http://blog.miniasp.com/post/2009/06/24/Sleep-command-in-Batch.aspx" target="_blank" rel="external">如何在批次檔(Batch)中實現 sleep 命令讓任務暫停執行 n 秒</a></li><li><a href="http://stackoverflow.com/questions/9278614/if-greater-than-batch-files/9278668#9278668" target="_blank" rel="external">windows - If greater than batch files - Stack Overflow</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;延續上一篇&lt;a href=&quot;/blog/2016/08/02/setup-Google-Chrome-as-kiosk-application-settings/&quot;&gt;利用 Google Chrome 作為 kiosk 應用時的設定項目&lt;/a&gt;所提到的，這個最終要應用在 ba
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="batch" scheme="http://ssk7833.github.io/blog/tags/batch/"/>
    
      <category term="chrome" scheme="http://ssk7833.github.io/blog/tags/chrome/"/>
    
      <category term="kiosk" scheme="http://ssk7833.github.io/blog/tags/kiosk/"/>
    
      <category term="windows" scheme="http://ssk7833.github.io/blog/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>利用 Google Chrome 作為 kiosk 應用時的設定項目</title>
    <link href="http://ssk7833.github.io/blog/2016/08/02/setup-Google-Chrome-as-kiosk-application-settings/"/>
    <id>http://ssk7833.github.io/blog/2016/08/02/setup-Google-Chrome-as-kiosk-application-settings/</id>
    <published>2016-08-02T08:03:45.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄一下利用 Google Chrome 作為 kiosk 時，需要注意的地方：<br>本文所使用的 Google Chrome 版本：52.0.2743.82 m</p><h2 id="鎖定右鍵內容"><a href="#鎖定右鍵內容" class="headerlink" title="鎖定右鍵內容"></a>鎖定右鍵內容</h2><p>當觸控啟用時，預設長按螢幕就會觸發滑鼠右鍵的功能表。如同一般網頁防止滑鼠右鍵內容一樣，於 HTML 中加入 Javascript 來防止右鍵清單的跳出。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'contextmenu'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; e.preventDefault(); &#125;);</span><br></pre></td></tr></table></figure></p><h2 id="禁止文字被選取"><a href="#禁止文字被選取" class="headerlink" title="禁止文字被選取"></a>禁止文字被選取</h2><p>當長按螢幕時會觸發與滑鼠左鍵按住拖曳來選取文字同樣的效果，如下圖中間搜尋視窗：<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/01.png" alt="長按螢幕字串時" title="長按螢幕字串時"><br>若不想被選取，可以利用 CSS 處理，根據自己不想被選的部分作出篩選，下方範例以整份 HTML 當作範例：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-user-select</span>:<span class="value"> none</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="關閉觸控滑動拖曳到上一頁／下一頁"><a href="#關閉觸控滑動拖曳到上一頁／下一頁" class="headerlink" title="關閉觸控滑動拖曳到上一頁／下一頁"></a>關閉觸控滑動拖曳到上一頁／下一頁</h2><p>若有超連結會導到其他頁面時，導向其他頁面後按著螢幕並往左或往右滑動，可能會觸發如手持裝置般的上下頁功能：<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/02.png" alt="當有歷史分頁時，碰觸畫面並往右滑將會回到上一頁" title="當有歷史分頁時，碰觸畫面並往右滑將會回到上一頁"><br>解決方式有兩種：</p><ol><li><p>利用 CSS 去解決：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">touch-action</span>:<span class="value"> none</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-user-drag</span>:<span class="value"> none</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>但有缺點！</strong>若在 HTML 內容中有需要橫向卷軸的部分，此橫向卷軸部分不可能套用上方 CSS，需再另外對 <code>touch-action</code> 及 <code>-webkit-user-drag</code> 允許橫向操作，而若允許之後，在此橫向卷軸部分拖曳到最頂／底端時再繼續拖曳，依然會觸發道上下頁的功能。</p></li><li><p>修改 Chrome flags 內的設定：<br>開啟 Chrome 新分頁，在網址列輸入 <code>chrome://flags</code> 並找到 <code>橫向捲動紀錄導覽 Mac, Windows, Linux, Chrome OS, Android</code>，預設為<code>已啟用</code>，把它改成<code>已停用</code>。<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/03.png" alt="更改設定為已停用" title="更改設定為已停用"><br>如此一來連 CSS 也不用寫了，缺點就是這個為全域設定，改成停用後任何網站都不能使用，不過既然是 kiosk，改成已停用理應影響不大。</p></li></ol><hr><p>接下來設定皆與命令列(command line)參數有關，使用方法有：</p><ol><li>利用建立捷徑的方式來填參數：<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/04.png" alt="利用建立捷徑方式填參數" title="利用建立捷徑方式填參數"></li><li>直接開啟執行(Windows + R)並輸入指令及參數：<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/05.png" alt="在執行中輸入" title="在執行中輸入"></li><li><p>於命令提示字元(cmd)中執行其中一行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">start</span> chrome</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"C:<span class="command">\Program</span> Files (x86)<span class="command">\Google</span><span class="command">\Chrome</span><span class="command">\Application</span><span class="command">\chrome</span>.exe"</span><br></pre></td></tr></table></figure></li></ol><h2 id="開啟固定位址的內容"><a href="#開啟固定位址的內容" class="headerlink" title="開啟固定位址的內容"></a>開啟固定位址的內容</h2><p>開啟時直接進入某個網頁。<br>在參數列加上網址即可，如 <code>start chrome ssk7833.github.io</code>。<br>若是本機上的靜態檔案則須加上 <code>file:///</code>，如 <code>start chrome file:///C:/dist/index.html</code></p><h2 id="運行-kiosk-模式"><a href="#運行-kiosk-模式" class="headerlink" title="運行 kiosk 模式"></a>運行 kiosk 模式</h2><p>開啟時直接進入全螢幕模式，且無法利用 <code>F11</code> 跟 <code>ESC</code> 來離開全螢幕模式，可以用 <code>ALT + F4</code> 或 <code>CTRL + W</code> 來關閉。<br>在參數列加上 <code>--kiosk</code> 即可。</p><h2 id="關閉詢問「您要翻譯這個網頁嗎？」"><a href="#關閉詢問「您要翻譯這個網頁嗎？」" class="headerlink" title="關閉詢問「您要翻譯這個網頁嗎？」"></a>關閉詢問「您要翻譯這個網頁嗎？」</h2><p><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/06.png" alt="您要翻譯這個網頁嗎？" title="您要翻譯這個網頁嗎？"><br>使用 kiosk 模式後，依然可能會因 HTML 撰寫或內文而自動跳出這個訊息，在 kiosk 模式這當然是不想要的。<br>在參數列加上 <code>--disable-translate</code> 即可。</p><h2 id="允許-Chrome-無視跨來源資源共享-CORS-限制"><a href="#允許-Chrome-無視跨來源資源共享-CORS-限制" class="headerlink" title="允許 Chrome 無視跨來源資源共享(CORS)限制"></a>允許 Chrome 無視跨來源資源共享(CORS)限制</h2><p>如果 kiosk 的內容是靜態網頁而無後台，又需要利用 AJAX 其他地方拿取資料，很可能會在開發時出現這種錯誤：<br><code>XMLHttpRequest cannot load https://www.example.com. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.</code><br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/07.png" alt="CORS 錯誤" title="CORS 錯誤"><br>若不想額外增設後台可在參數列加上 <code>--disable-web-security</code>，但加上後錯誤會依然存在，需配何下方參數才能正常運行。</p><h2 id="開啟新的使用者資料夾來放置內容"><a href="#開啟新的使用者資料夾來放置內容" class="headerlink" title="開啟新的使用者資料夾來放置內容"></a>開啟新的使用者資料夾來放置內容</h2><p>如同一台電腦支援多個 Chrome 使用者一樣，另外開一個額外的資料夾來放置 user data，使其不會各自汙染。<br>在參數列加上 <code>--user-data-dir=&quot;C:/Chrome dev session&quot;</code> 即可，<code>C:/Chrome dev session</code> 即是接下來這個 Chrome 視窗將會存放資訊的位置，此資料夾無需自行建立，系統會自動幫忙建立。<br><code>--disable-web-security</code> 搭配 <code>--user-data-dir=&quot;C:/Chrome dev session&quot;</code> 即可無視 CORS 限制，但使用上也須注意是否有其他安全性的疑慮，不過既然都是 kiosk 了，理應不太會有這個問題。</p><h2 id="移除上方跳出的警告訊息"><a href="#移除上方跳出的警告訊息" class="headerlink" title="移除上方跳出的警告訊息"></a>移除上方跳出的警告訊息</h2><p>前兩項做到後，其實會跳出此訊息：<code>您正在使用不受支援的命令列標識：--disable-web-security。這可能會危及穩定性與安全性。</code><br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/08.png" alt="--disable-web-security 警告" title="--disable-web-security 警告"><br>在 kiosk 模式當然不可能放出此行，可以在參數列加上 <code>--test-type</code> 即可。<del>為什麼這幾個不一次講完呢？</del></p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>上述這幾個的參數組合技已經蠻夠用的，我目前下的指令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.exe <span class="string">"file:///C:/dist/index.html"</span> --user-data-dir=<span class="string">"C:/Chrome dev session"</span> --disable-web-security --test-type --disable-translate --kiosk</span><br></pre></td></tr></table></figure></p><p>為什麼要用指令呢？因為能撰寫於 batch 中來達到部分的自動化。<br>不確定某些指令是否可能有潛藏的風險，若有思慮不周的地方也請您分享！</p><p><strong>UPDATE：</strong> 下一篇出來了：<a href="/blog/2016/09/30/using-windows-batch-to-initialize-and-check-chrome-status/">利用 windows batch 自動初始化、檢查 chrome 開啟狀態</a></p><p>參考資料：</p><ol><li><a href="http://askubuntu.com/a/310521" target="_blank" rel="external">Google Chrome browser, how to permanently disable this disturbing toolbar?</a></li><li><a href="http://stackoverflow.com/a/24018881/4968420" target="_blank" rel="external">Protractor error message “unsupported command-line flag” in Chrome?</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;紀錄一下利用 Google Chrome 作為 kiosk 時，需要注意的地方：&lt;br&gt;本文所使用的 Google Chrome 版本：52.0.2743.82 m&lt;/p&gt;
&lt;h2 id=&quot;鎖定右鍵內容&quot;&gt;&lt;a href=&quot;#鎖定右鍵內容&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="chrome" scheme="http://ssk7833.github.io/blog/tags/chrome/"/>
    
      <category term="kiosk" scheme="http://ssk7833.github.io/blog/tags/kiosk/"/>
    
      <category term="windows" scheme="http://ssk7833.github.io/blog/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>當有雙螢幕時，讓觸控螢幕在正確螢幕上觸控</title>
    <link href="http://ssk7833.github.io/blog/2016/07/15/let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/"/>
    <id>http://ssk7833.github.io/blog/2016/07/15/let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/</id>
    <published>2016-07-15T02:28:20.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近多了一台觸控螢幕，接到主機後從原本的雙螢幕變成的三螢幕，其中一個就是這個觸控螢幕。<br>我的螢幕設定是使用延伸模式，主螢幕為原本雙螢幕的其中一個，加入第三個螢幕時一樣採取延伸模式。而在這個觸控螢幕在插上 USB 線後且安裝完驅動程式後，觸控螢幕就像觸控板一樣可以點擊來觸發滑鼠事件，但對應到的點擊區域卻是我的主螢幕，這完全沒道理啊！</p><p>本以為是驅動程式的問題，其實不是，而找到的解法有兩種：</p><ol><li><p>將主螢幕設定到第三個螢幕，也就是觸控螢幕。<br><strong>這個方法不好！</strong>雖可以解決問題，但若像我一樣不希望第三個螢幕變成主螢幕的話就無法使用。</p></li><li><p>將觸控螢幕的對應到正確的螢幕上。<br>其實就是把觸控螢幕當成一個螢幕加上觸控板，若用這樣的方式去想就知道該怎麼解了，設定方法如下。</p></li></ol><p>打開控制台搜尋 Tablet PC 設定，或到開始功能表中直接搜尋 Tablet PC 設定。<br><img src="/blog/images/2016-07-15-let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/01.png" alt="控制台中的 Tablet PC 設定" title="控制台中的 Tablet PC 設定"><br><img src="/blog/images/2016-07-15-let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/02.png" alt="開始功能表搜尋 Tablet PC 設定" title="開始功能表搜尋 Tablet PC 設定"></p><p>直接點選設定中的設定。<br><img src="/blog/images/2016-07-15-let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/03.png" alt="Tablet PC 設定，點選設定" title="Tablet PC 設定，點選設定"></p><p>接著所有螢幕會變成白色，而其中一個將會顯示以下訊息，按 Enter 直到正確對應的螢幕上再觸控螢幕即可。<br><img src="/blog/images/2016-07-15-let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/04.png" alt="螢幕全白顯示，並跳出提示訊息" title="螢幕全白顯示，並跳出提示訊息"></p><p>參考資料：</p><ol><li><a href="http://superuser.com/a/969683/617008" target="_blank" rel="external">Windows Touch Screen With Multiple Monitors Puts Cursor On Wrong Monitor - Super User</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近多了一台觸控螢幕，接到主機後從原本的雙螢幕變成的三螢幕，其中一個就是這個觸控螢幕。&lt;br&gt;我的螢幕設定是使用延伸模式，主螢幕為原本雙螢幕的其中一個，加入第三個螢幕時一樣採取延伸模式。而在這個觸控螢幕在插上 USB 線後且安裝完驅動程式後，觸控螢幕就像觸控板一樣可以點擊來
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="windows" scheme="http://ssk7833.github.io/blog/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>在 Logdown 上移除右上方 dashboard</title>
    <link href="http://ssk7833.github.io/blog/2016/06/27/remove-dashboard-button-in-Logdown-page/"/>
    <id>http://ssk7833.github.io/blog/2016/06/27/remove-dashboard-button-in-Logdown-page/</id>
    <published>2016-06-27T06:55:30.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近朋友想開個部落格試試，我推薦了 Logdown、Blogger 或是全自己來的 GitHub Pages，最後友人選擇了 Logdown，然而友人跟我說：「Logdown 有個缺點，就是右上方的 Dashboard 很醜，要是能拿掉就太好了。」於是為了讓友人安心使用，我便看了一下 Logdown 原始碼，發現其實要拿掉或隱藏 Dashboard 並不困難。<br><img src="/blog/images/2016-06-27-hide-dashboard-button-in-Logdown-page/01.png" alt="被嫌醜的 Dashboard" title="被嫌醜的 Dashboard"></p><p>到自己的 <a href="http://logdown.com/dashboard" target="_blank" rel="external">Dashboard</a> 中點選 <code>Blog 設定</code>，接著點選<code>佈景主題</code>分頁，點選<code>編輯 HTML</code>，如下圖位置。<br><img src="/blog/images/2016-06-27-hide-dashboard-button-in-Logdown-page/02.png" alt="Blog 設定→佈景主題→編輯 HTML" title="Blog 設定→佈景主題→編輯 HTML"></p><p>在最下方 <code>&lt;/body&gt;&lt;/html&gt;</code> 前面空白處插入以下程式碼：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">'iframe[src="http://logdown.com/pages/top_controls"]'</span>);</span><br><span class="line">    elem.parentNode.removeChild(elem);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>插入後呈現如下：<br><img src="/blog/images/2016-06-27-hide-dashboard-button-in-Logdown-page/03.png" alt="插入 javascript" title="插入 javascript"></p><p>接著重新開啟自己的 Logdown 看看就能看到成果囉！</p><p>※此段語法不適用於 <a href="http://caniuse.com/#search=DOMContentLoaded" target="_blank" rel="external">IE8</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近朋友想開個部落格試試，我推薦了 Logdown、Blogger 或是全自己來的 GitHub Pages，最後友人選擇了 Logdown，然而友人跟我說：「Logdown 有個缺點，就是右上方的 Dashboard 很醜，要是能拿掉就太好了。」於是為了讓友人安心使用，我
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
      <category term="logdown" scheme="http://ssk7833.github.io/blog/tags/logdown/"/>
    
  </entry>
  
  <entry>
    <title>取得 Parse server 推播通知送出狀態</title>
    <link href="http://ssk7833.github.io/blog/2016/06/06/retrieve-push-status/"/>
    <id>http://ssk7833.github.io/blog/2016/06/06/retrieve-push-status/</id>
    <published>2016-06-06T03:02:00.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://parse.com/docs/rest/guide" target="_blank" rel="external">Parse REST API Developers Guide</a> 中，可以在 Quick Reference 看到所有使用的方法。在 Push Notification 分類中只有 POST 的方法，不像 Installations 可以透過 GET 方法到 <code>/installations/&lt;objectId&gt;</code> 來獲取已安裝裝置的資訊；然而若需要去擷取推播傳遞的狀態時，可以利用存於 mongoDB 中的 _PushStatus 來取得資訊，既然 push 的方法只有 POST，就繞個路把 _PushStatus 當成 Objects 來處理，Objects 的使用方法就多了。</p><table><thead><tr><th>URL</th><th>HTTP Verb</th><th>Functionality</th></tr></thead><tbody><tr><td>/classes/&lt;className&gt;</td><td>POST</td><td><a href="https://parse.com/docs/rest/guide#objects-creating-objects" target="_blank" rel="external">Creating Objects</a></td></tr><tr><td>/classes/&lt;className&gt;/&lt;objectId&gt;</td><td>GET</td><td><a href="https://parse.com/docs/rest/guide#objects-retrieving-objects" target="_blank" rel="external">Retrieving Objects</a></td></tr><tr><td>/classes/&lt;className&gt;/&lt;objectId&gt;</td><td>PUT</td><td><a href="https://parse.com/docs/rest/guide#objects-updating-objects" target="_blank" rel="external">Updating Objects</a></td></tr><tr><td>/classes/&lt;className&gt;</td><td>GET</td><td><a href="https://parse.com/docs/rest/guide#queries" target="_blank" rel="external">Queries</a></td></tr><tr><td>/classes/&lt;className&gt;/&lt;objectId&gt;</td><td>DELETE</td><td><a href="https://parse.com/docs/rest/guide#objects-deleting-objects" target="_blank" rel="external">Deleting Objects</a></td></tr></tbody></table><p>要取得推播通知狀態則是利用上表兩個 GET 的功能，若指定 objectId 則只回傳 objectId 那筆資訊，若不指定則回傳最近的幾筆資訊。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: parseAppId"</span> \</span><br><span class="line">  -H <span class="string">"X-Parse-Master-Key: parseMasterKey"</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/classes/_PushStatus/</span><br></pre></td></tr></table></figure><p>正常下會得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"results"</span>:[</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"xzBThEHVyc"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-19T10:00:59.827Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"VGo2rHGXjK"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-19T10:01:59.790Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"9rnRdakYzD"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-19T10:04:59.798Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"7pde1mbqzY"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-19T13:00:09.126Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"M2PmduKLH0"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T02:26:59.997Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"URiaNdDBps"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T02:35:59.991Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"eN8R4gVDEx"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T02:37:00.077Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"KRBif8iM6u"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T03:13:59.892Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"BP5FYt2GVX"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T03:24:59.846Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"1nSmDpZ3Yz"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-24T02:55:01.595Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"FDFjpei6rP"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-24T02:58:01.327Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"hTkD1EKO9U"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-24T03:02:01.608Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"TDT2bONPEF"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-24T07:51:02.636Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"tGuEYvGLbp"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-25T07:35:20.034Z"</span>,…&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而若加上 objectId，則會取得此 objectId 單筆資訊：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: parseAppId"</span> \</span><br><span class="line">  -H <span class="string">"X-Parse-Master-Key: parseMasterKey"</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/classes/_PushStatus/tGuEYvGLbp</span><br></pre></td></tr></table></figure><p>正常下會得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ACL"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"objectId"</span>: <span class="string">"tGuEYvGLbp"</span>,</span><br><span class="line">  <span class="string">"createdAt"</span>: <span class="string">"2016-05-25T07:35:20.034Z"</span>,</span><br><span class="line">  <span class="string">"pushTime"</span>: <span class="string">"2016-05-25T07:35:20.034Z"</span>,</span><br><span class="line">  <span class="string">"query"</span>: <span class="string">"&#123;\"deviceType\":&#123;\"$in\":[\"ios\"]&#125;,\"gender\":&#123;\"$in\":[\"female\"]&#125;&#125;"</span>,</span><br><span class="line">  <span class="string">"payload"</span>: <span class="string">"&#123;\"alert\":\"All work and no play makes Jack a dull boy.\"&#125;"</span>,</span><br><span class="line">  <span class="string">"source"</span>: <span class="string">"rest"</span>,</span><br><span class="line">  <span class="string">"status"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">  <span class="string">"numSent"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"pushHash"</span>: <span class="string">"cd3f8c70e6cfecc66ab69a0ee4c3c564"</span>,</span><br><span class="line">  <span class="string">"updatedAt"</span>: <span class="string">"2016-05-25T07:35:22.600Z"</span>,</span><br><span class="line">  <span class="string">"numFailed"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"sentPerType"</span>: &#123;</span><br><span class="line">    <span class="string">"ios"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兩者都可取得 <code>numSent</code>, <code>numFailed</code> 及 <code>sentPerType</code>，可利於推播通知的統計分析。</p><p>參考資料：</p><ol><li><a href="https://parse.com/docs/rest/guide" target="_blank" rel="external">REST API Developers Guide | Parse</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 &lt;a href=&quot;https://parse.com/docs/rest/guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parse REST API Developers Guide&lt;/a&gt; 中，可以在 Quick Reference 看到
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="Parse server" scheme="http://ssk7833.github.io/blog/tags/Parse-server/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="push notification" scheme="http://ssk7833.github.io/blog/tags/push-notification/"/>
    
  </entry>
  
  <entry>
    <title>隱藏 console 中的 source 來源</title>
    <link href="http://ssk7833.github.io/blog/2016/05/25/hide-source-of-log-messages-in-console/"/>
    <id>http://ssk7833.github.io/blog/2016/05/25/hide-source-of-log-messages-in-console/</id>
    <published>2016-05-25T07:02:30.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>先前有發現 Facebook 在開發人員工具的 console 中最右邊不會顯示 log 的來源行數，覺得神奇，但並沒有深入了解如何實作此效果。而最近看到有人提問同樣的問題，同樣以 Facebook 的 console 為例來發問，激起了我的求知慾望。<br><img src="/blog/images/2016-05-25-hide-source-of-log-messages-in-console/01.png" alt="Facebook 的 console，最右端沒顯示來源" title="Facebook 的 console，最右端沒顯示來源"><br><img src="/blog/images/2016-05-25-hide-source-of-log-messages-in-console/02.png" alt="正常呼叫 console.log 時，最右端會顯示來源" title="正常呼叫 console.log 時，最右端會顯示來源"></p><p>單純要查到此功能似乎不難，剛好在四個月前有人在 <a href="http://stackoverflow.com/questions/34762774/how-to-hide-source-of-log-messages-in-console" target="_blank" rel="external">stackoverflow</a> 問了同樣的問題，而方法就是利用下方寫法即可：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>, <span class="string">"Hello world!"</span>));</span><br></pre></td></tr></table></figure></p><p>看到 Facebook 將 console 的預設樣式改掉，因此我也試著去看該怎麼做，果然樣式是用 CSS 去設定，而要設定的部分前面記得放個 <code>%c</code>，若有多段需要不同樣式則放入多個 <code>%c</code>，每個 <code>%c</code> 都是獨立的，樣式不會互相覆蓋；而 CSS 以額外參數的方式傳遞，若有 N 個 <code>%c</code>，則需要另外傳入 N 個參數。範例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cRed color"</span>, <span class="string">"color:red;"</span>); <span class="comment">// 顯示為紅色字</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cRed color with blue background"</span>, <span class="string">"color:red; background:blue;"</span>); <span class="comment">// 顯示紅色字與藍色背景</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cRed color and %cgreen color"</span>, <span class="string">"color:red;"</span>, <span class="string">"color:green;"</span>); <span class="comment">// 顯示紅色字即綠色字</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cRed color%c and %cgreen color"</span>, <span class="string">"color:red;"</span>, <span class="string">""</span>, <span class="string">"color:green;"</span>); <span class="comment">// 顯示紅色字即綠色字，將 "and" 改回預設樣式</span></span><br></pre></td></tr></table></figure></p><p>兩者結合起來的話，一樣將樣式參數放於之後：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>, <span class="string">"%cRed color"</span>, <span class="string">"color:red;"</span>));</span><br></pre></td></tr></table></figure></p><p>因此我寫了一個範例，可以開啟開發人員工具的 console 觀看結果：</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="JKPYoX" data-default-tab="js,result" data-user="ssk7833" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/JKPYoX/" target="_blank" rel="external">Custom console log messages</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>好，問題解決了！<br>但痛苦來臨，我走不出自己這關 XD，深問 why？為什麼 <code>setTimeout(console.log.bind(console, &quot;something&quot;))</code> 能有如此魔力使來源行數隱藏起來？式了很多方式去包裝 console 還是徒勞無功，且 setTimeout 好像是必要的？自行寫了一個具有 callback function 的 function 也無法達到一樣效果。</p><p>後來想到或許能在 stack trace 中得到一點線索，因此改下 <code>console.error</code> 試試看，結果還是深深地打了我一巴掌，stack trace 竟然完全是空的。<br><img src="/blog/images/2016-05-25-hide-source-of-log-messages-in-console/03.png" alt="比較 error 上下的差別" title="比較 error 上下的差別"></p><p>有人跟我說，會不會是 call 到 browser 的 console 再從 console 下 command 才會這樣顯示出來？結果也不是，也是跳出了來源。<br><img src="/blog/images/2016-05-25-hide-source-of-log-messages-in-console/04.png" alt="使用開發者工具下指令結果一樣" title="使用開發者工具下指令結果一樣"></p><p>真是奇怪啊！百思不得其解後，決定先「不求甚解」了，等待哪一天突然想到再補充吧。</p><p>2016-05-26 Update:</p><p>最後跑去 <a href="http://stackoverflow.com/q/37430531/4968420" target="_blank" rel="external">stackoverflow</a> 問了，也有人回答了讓我似懂非懂的答案，因有些不確定性的部分並沒提到，總之可能就先這樣，哪天想到再繼續研究。</p><p>參考資料：</p><ol><li><a href="http://stackoverflow.com/questions/34762774/how-to-hide-source-of-log-messages-in-console" target="_blank" rel="external">How to hide source of Log messages in Console?</a></li><li><a href="http://stackoverflow.com/questions/7505623/colors-in-javascript-console" target="_blank" rel="external">Colors in JavaScript console</a></li><li><a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference" target="_blank" rel="external">Console API Reference | Web Tools - Google Developers</a></li><li><a href="https://github.com/DeveloperToolsWG/console-object/blob/master/api.md#format-specifiers" target="_blank" rel="external">Format Specifiers</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先前有發現 Facebook 在開發人員工具的 console 中最右邊不會顯示 log 的來源行數，覺得神奇，但並沒有深入了解如何實作此效果。而最近看到有人提問同樣的問題，同樣以 Facebook 的 console 為例來發問，激起了我的求知慾望。&lt;br&gt;&lt;img sr
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Parse 推播回傳 _pushStatus 的 id</title>
    <link href="http://ssk7833.github.io/blog/2016/05/20/Parse-push-return-pushStatus-objectId/"/>
    <id>http://ssk7833.github.io/blog/2016/05/20/Parse-push-return-pushStatus-objectId/</id>
    <published>2016-05-20T08:28:51.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 parse server REST API 的推播功能時，推播成功送到 parse server 只會時回傳 <code>{&quot;result&quot;:true}</code>，只有這資訊對於後台串接 parse server 不是很方便，因缺乏 <code>_pushStatus</code> 中的 id，導致資料送出後就一去無回，不方便針對各個送出到 parse server 的資料做對應。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: parseAppId"</span> \</span><br><span class="line">  -H <span class="string">"X-Parse-Master-Key: parseMasterKey"</span> \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  <span class="operator">-d</span> <span class="string">'&#123;</span><br><span class="line">        "where": &#123;</span><br><span class="line">          "deviceType": &#123;</span><br><span class="line">            "$in": [</span><br><span class="line">              "ios"</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "data": &#123;</span><br><span class="line">          "title": "The Shining",</span><br><span class="line">          "alert": "All work and no play makes Jack a dull boy."</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;'</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/push/</span><br></pre></td></tr></table></figure><p>正常下會得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"result"</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>所幸在 parse server 2.2.7 版時新增了 <code>X-Parse-Push-Status-Id</code> 這個 header，如同現行的 Parse.com 一樣，因為考量到回傳 object id 可能會暴露給 clients，因此放在 response 的 header 中。如何驗證 header 確實存在 <code>X-Parse-Push-Status-Id</code>，可以利用 curl 加上 -v 來看整個 request, response 的結果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: parseAppId"</span> \</span><br><span class="line">  -H <span class="string">"X-Parse-Master-Key: parseMasterKey"</span> \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  <span class="operator">-d</span> <span class="string">'&#123;</span><br><span class="line">        "where": &#123;</span><br><span class="line">          "deviceType": &#123;</span><br><span class="line">            "$in": [</span><br><span class="line">              "ios"</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "data": &#123;</span><br><span class="line">          "title": "The Shining",</span><br><span class="line">          "alert": "All work and no play makes Jack a dull boy."</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;'</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/push/ \</span><br><span class="line">  -v</span><br></pre></td></tr></table></figure><p>得到類似結果，回傳的 header 中就能看到 X-Parse-Push-Status-Id：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">*   Trying <span class="number">127.0</span>.<span class="number">0.1</span>...</span><br><span class="line">* Connected to localhost (<span class="number">127.0</span>.<span class="number">0.1</span>) port <span class="number">1337</span> (<span class="comment">#0)</span></span><br><span class="line">&gt; POST /parse/push/ HTTP/<span class="number">1.1</span></span><br><span class="line">&gt; User-Agent: curl/<span class="number">7.41</span>.<span class="number">0</span></span><br><span class="line">&gt; Host: localhost:<span class="number">1337</span></span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; X-Parse-Application-Id: parseAppId</span><br><span class="line">&gt; X-Parse-Master-Key: parseMasterKey</span><br><span class="line">&gt; Content-Type: application/json</span><br><span class="line">&gt; Content-Length: <span class="number">125</span></span><br><span class="line">&gt;</span><br><span class="line">* upload completely sent off: <span class="number">125</span> out of <span class="number">125</span> bytes</span><br><span class="line">&lt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">&lt; X-Powered-By: Express</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br><span class="line">&lt; Access-Control-Allow-Methods: GET,PUT,POST,DELETE,OPTIONS</span><br><span class="line">&lt; Access-Control-Allow-Headers: X-Parse-Master-Key, X-Parse-REST-API-Key, X-Parse-Javascript-Key, X-Parse-Application-Id, X-Parse-Client-Version, X-Parse-Session-Token, X-Requested-With, X-Parse-Revocable-Session, Content-Type</span><br><span class="line">&lt; X-Parse-Push-Status-Id: gLdaMNg12i</span><br><span class="line">&lt; Content-Type: application/json; charset=utf-<span class="number">8</span></span><br><span class="line">&lt; Content-Length: <span class="number">15</span></span><br><span class="line">&lt; Date: Fri, <span class="number">20</span> May <span class="number">2016</span> <span class="number">07</span>:<span class="number">51</span>:<span class="number">58</span> GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt;</span><br><span class="line">&#123;<span class="string">"result"</span>:<span class="literal">true</span>&#125;* Connection <span class="comment">#0 to host localhost left intact</span></span><br></pre></td></tr></table></figure><p>有了這個資訊後，就可以在後台中做到許多變化，以下為 node.js 的範例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  parseLocation: <span class="string">'localhost'</span>,</span><br><span class="line">  parsePort: <span class="number">1337</span>,</span><br><span class="line">  parsePush: <span class="string">'/parse/push'</span>,</span><br><span class="line">  parseAppId: <span class="string">'parseAppId'</span>,</span><br><span class="line">  parseMasterKey:<span class="string">'parseMasterKey'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 範例用 object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">"where"</span>: &#123;</span><br><span class="line">    <span class="string">"deviceType"</span>: &#123;</span><br><span class="line">      <span class="string">"$in"</span>: [<span class="string">"ios"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"The Shining"</span>,</span><br><span class="line">    <span class="string">"alert"</span>: <span class="string">"All work and no play makes Jack a dull boy."</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = http.request(&#123;</span><br><span class="line">  host: config.parseLocation,</span><br><span class="line">  port: config.parsePort,</span><br><span class="line">  path: config.parsePush,</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'X-Parse-Application-Id'</span>: config.parseAppId,</span><br><span class="line">    <span class="string">'X-Parse-Master-Key'</span>: config.parseMasterKey</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> jsonString = <span class="string">''</span>;</span><br><span class="line">  res.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">    jsonString += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(jsonString);</span><br><span class="line">    <span class="keyword">if</span>(json.result===<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 在這裡確認 result 為 true 後，將 x-parse-push-status-id 存在某個 obj 中來做對應</span></span><br><span class="line">      <span class="built_in">console</span>.log(res.headers[<span class="string">'x-parse-push-status-id'</span>]); <span class="comment">// 印出 x-parse-push-status-id</span></span><br><span class="line">      obj.pushId = res.headers[<span class="string">'x-parse-push-status-id'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postData = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line"></span><br><span class="line">req.write(postData);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><p>最後 obj 會得到類似結果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"where"</span>: &#123;</span><br><span class="line">    <span class="string">"deviceType"</span>: &#123;</span><br><span class="line">      <span class="string">"$in"</span>: [<span class="string">"ios"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"The Shining"</span>,</span><br><span class="line">    <span class="string">"alert"</span>: <span class="string">"All work and no play makes Jack a dull boy."</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"pushId"</span>: <span class="string">"kAuJhPqpt9"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下來怎麼儲存物件及使用這些資料就是另一個課題了～</p><p>參考資料：</p><ol><li><a href="https://github.com/ParsePlatform/parse-server/pull/1412" target="_blank" rel="external">Adds X-Parse-Push-Status-Id header</a></li><li><a href="https://github.com/ParsePlatform/parse-server/issues/1157" target="_blank" rel="external">Return PushStatus ID from push endpoint.</a></li><li><a href="https://parse.com/docs/rest/guide#push-notifications-sending-pushes" target="_blank" rel="external">Sending Pushes</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用 parse server REST API 的推播功能時，推播成功送到 parse server 只會時回傳 &lt;code&gt;{&amp;quot;result&amp;quot;:true}&lt;/code&gt;，只有這資訊對於後台串接 parse server 不是很方便，因缺乏 &lt;cod
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="Parse server" scheme="http://ssk7833.github.io/blog/tags/Parse-server/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="push notification" scheme="http://ssk7833.github.io/blog/tags/push-notification/"/>
    
  </entry>
  
  <entry>
    <title>Google Web Speech API 語音辨識 持續收音</title>
    <link href="http://ssk7833.github.io/blog/2016/04/21/Google-Web-Speech-API-continous-recording/"/>
    <id>http://ssk7833.github.io/blog/2016/04/21/Google-Web-Speech-API-continous-recording/</id>
    <published>2016-04-21T02:06:51.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>Google 的 web speech API 已經推出一段時間了，最近剛好有機會來試試。<br>Web speech API 的操作並不困難，基本上就是 <code>var recognition = new webkitSpeechRecognition();</code>，可以在下方參考資料中看到相關原始碼，唯獨我預設的需求是必須可持續收音，因使用者可能是在不適合任何物理碰觸的環境下操作，所以鍵盤滑鼠及觸控螢幕皆不適合在此當作 input 來源。然而 web speech API 的持續收音 <code>recognition.continuous = true;</code> 若發現麥克風閒置太長的話，一樣會自動停止收音，因此還是要再重新觸發 <code>recognition.start();</code>，所幸我就將 <code>recognition.start();</code> 寫到 <code>onend</code> event handler，天真的以為這樣就解決問題了。</p><p><img src="/blog/images/allowMicrophone.png" alt="要求使用麥克風" title="要求使用麥克風"><br>當每次收音結束後又重新觸發開始時，就會跳出這個允許授權的視窗，而當然此時是不能收音的，可以在此<a href="http://codepen.io/ssk7833/pen/YqepJb" target="_blank" rel="external">範例</a>體驗一下。</p><p>經過一番查證後，發現其實這個問題也不算問題，只是因為 chrome 要求安全性而在 http 上做出每次收音前都須要先確認允許才行，若是使用 https 的話只要允許過第一次後就再也不會詢問了，下方範例即是上方同一個範例的 https 版本。</p><iframe height="300" scrolling="no" src="https://codepen.io/ssk7833/embed/YqepJb/?height=300&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/ssk7833/pen/YqepJb/" target="_blank" rel="external">Web Speech API Demo</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe><p>允許之後就可以在麥克風例外狀況中看到已經預設允許的清單，在此清單中被允許的就再也不會跳出詢問視窗了，而 localhost 也是在允許範圍內，因此就可以做出很多有趣的事情了！<br><img src="/blog/images/microphoneExceptions.png" alt="麥克風例外狀況" title="麥克風例外狀況"></p><p>使用上的話，目前好像也沒看到什麼限制，也沒找到限制相關的文件，自己親自掛了好幾小時也還是活得好好的。</p><p>參考資料：</p><ol><li><a href="https://developers.google.com/web/updates/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API" target="_blank" rel="external">Voice Driven Web Apps: Introduction to the Web Speech API</a></li><li><a href="https://www.google.com/intl/en/chrome/demos/speech.html" target="_blank" rel="external">Web Speech API Demonstration</a></li><li><a href="http://www.oxxostudio.tw/articles/201509/web-speech-api.html" target="_blank" rel="external">Google 語音辨識 API</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Google 的 web speech API 已經推出一段時間了，最近剛好有機會來試試。&lt;br&gt;Web speech API 的操作並不困難，基本上就是 &lt;code&gt;var recognition = new webkitSpeechRecognition();&lt;/cod
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
      <category term="web speech API" scheme="http://ssk7833.github.io/blog/tags/web-speech-API/"/>
    
  </entry>
  
  <entry>
    <title>Parse Server APNS(iOS) 推播通知設定</title>
    <link href="http://ssk7833.github.io/blog/2016/04/19/parse-server-push-notification-APNS/"/>
    <id>http://ssk7833.github.io/blog/2016/04/19/parse-server-push-notification-APNS/</id>
    <published>2016-04-19T07:56:37.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>Parse 的一大方便之處，即是他提供了推播通知(push notification)的整合，使開發者可以在短時間內完成推播功能；而推播通知也已經移植到 Parse Server 版本上，步驟與先前在 Parse 上差不了多少，在這裡紀錄一下 APNS(iOS) 設定的步驟。</p><h2 id="建立-SSL-憑證"><a href="#建立-SSL-憑證" class="headerlink" title="建立 SSL 憑證"></a>建立 SSL 憑證</h2><p>在發送推播前必須給予 Parse Server 推播的權限，因此要先建立對應的 App ID 及 SSL 憑證。</p><h3 id="1-建立-Explicit-App-ID"><a href="#1-建立-Explicit-App-ID" class="headerlink" title="1. 建立 Explicit App ID"></a>1. 建立 Explicit App ID</h3><p>如果原本就已經有建立 Explicit App ID 的話，請跳過此步驟到 <a href="#2-設定推播通知">2. 設定推播通知</a>。</p><ol><li>到 <a href="https://developer.apple.com/membercenter/" target="_blank" rel="external">Apple Developer Member Center</a> 登入，點選 <a href="https://developer.apple.com/account/ios/certificate/" target="_blank" rel="external">Certificates, Identifiers &amp; Profiles</a>。</li><li>點選左欄中 Identifiers 底下的 <a href="https://developer.apple.com/account/ios/identifier/bundle" target="_blank" rel="external">App IDs</a>。</li><li>點選右上角 + 的按鈕。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/01.png" alt="建立 App ID" title="建立 App ID"></li><li>在 App ID Description 填上想要的名稱。</li><li>選擇 App ID Prefix，我的只有一組，好像預設就會自己選了～</li><li>App ID suffix 要注意選擇 Explicit App ID，而 Bundle ID 可參考 Apple 推薦的填法或是自己偏好的格式，須注意這組之後會在 Xcode 中使用到。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/02.png" alt="Explicit App ID" title="Explicit App ID"></li><li>將有需要用到的服務打勾，Push Notifications 記得要打勾！其餘就看自己有沒有要用到再開啟。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/03.png" alt="Apple Services" title="Apple Services"></li><li>點選 Contiune 進行下一步，確認無誤後就可以送出了。</li></ol><h3 id="2-設定推播通知"><a href="#2-設定推播通知" class="headerlink" title="2. 設定推播通知"></a>2. 設定推播通知</h3><p>到這裡，應該已經建立好一個 Explicit App ID。</p><ol><li>點開  <a href="https://developer.apple.com/account/ios/identifier/bundle" target="_blank" rel="external">App IDs</a> 底下已建立的 App ID，再點選 Edit。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/04.png" alt="App IDs Edit" title="App IDs Edit"></li><li>找到 Push Notifications 項目，若沒 Enable 則將他打勾，可以在此建立 Development 跟 Production 的憑證，建議先從開發模式開始，點選 Development SSL Certificate 中底下的 Create Certificate…。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/05.png" alt="Create Certificate" title="Create Certificate"></li><li>接下來他會教你怎麼做，然後要你做完再點選 Contiune，因為我英文對應中文 MAC OS 不太熟，所以在這裡也把步驟打出來了，開啟 MAC 中的「鑰匙圈存取」。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/06.png" alt="鑰匙圈存取" title="鑰匙圈存取"></li><li>點選「鑰匙圈存取」→「憑證輔助程式」→「從憑證授權要求憑證…」（蠻饒舌的）。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/07.png" alt="從憑證授權要求憑證…" title="從憑證授權要求憑證…"></li><li>在「使用者電子郵件位址」輸入自己的 Email，「一般名稱」輸入自己想要的名稱，「CA 電子郵件位址」留白，「已將要求」選擇「儲存到硬碟」，接著點選「繼續」來產生 CSR 檔。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/08.png" alt="憑證輔助程式" title="憑證輔助程式"></li><li>將剛剛儲存的 CSR 檔案上傳。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/09.png" alt="Upload CSR file" title="Upload CSR file"></li><li>下載憑證，下載完成後點選兩下此檔案，使檔案安裝到「鑰匙圈存取」中。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/10.png" alt="Download certificate" title="Download certificate"></li><li>開啟「鑰匙圈存取」，在左欄點選「我的憑證」，你可能會看到 Apple Development Push Services: 及 Apple Push Services:，這兩個分別對應了 development 憑證及 production 憑證，端看你使用哪一個。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/11.png" alt="Apple Development Push Services: &amp; Apple Push Services:" title="Apple Development Push Services: &amp; Apple Push Services:"></li><li>在要使用的憑證上點選右鍵，選擇「輸出」項目，儲存名稱依自己喜歡而定。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/12.png" alt="Export certificate" title="Export certificate"></li><li>在按儲存時會跳出密碼詢問的視窗，記得<strong>留白</strong>！<br><img src="/blog/images/2016-04-19-Parse-server-APNS/13.png" alt="Leave it blank" title="Leave it blank"></li><li>最後產生的檔案，將此檔案放到 Parse Server 的目錄內。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/14.png" alt=".p12" title=".p12"></li></ol><h2 id="Parse-Server-設定-APNS"><a href="#Parse-Server-設定-APNS" class="headerlink" title="Parse Server 設定 APNS"></a>Parse Server 設定 APNS</h2><p>延續 <a href="/blog/2016/04/09/setup-parse-server/">Parse Server 架設教學</a>中所使用的程式碼，在 <code>new ParseServer</code> 中加入 push 相關的程式碼，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</span><br><span class="line">  databaseURI: databaseUri || <span class="string">'mongodb://localhost:27017/dev'</span>,</span><br><span class="line">  cloud: process.env.CLOUD_CODE_MAIN || __dirname + <span class="string">'/cloud/main.js'</span>,</span><br><span class="line">  appId: process.env.APP_ID || <span class="string">'7c6a1d1470fed0313b5044c4eb83def0'</span>,</span><br><span class="line">  masterKey: process.env.MASTER_KEY || <span class="string">'98584a6e0a2592c274d1e4eae44b0a7b'</span>, <span class="comment">// Add your master key here. Keep it secret!</span></span><br><span class="line">  serverURL: process.env.SERVER_URL || <span class="string">'http://localhost:1337/parse'</span>,  <span class="comment">// Don't forget to change to https if needed</span></span><br><span class="line">  liveQuery: &#123;</span><br><span class="line">    classNames: [<span class="string">"Posts"</span>, <span class="string">"Comments"</span>] <span class="comment">// List of classes to support for query subscriptions</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 以下為新增部分</span></span><br><span class="line">  push: &#123;</span><br><span class="line">    <span class="comment">// 此篇未提到 Android，因此註解掉</span></span><br><span class="line">    <span class="comment">// android: &#123;</span></span><br><span class="line">    <span class="comment">//   senderId: '...',</span></span><br><span class="line">    <span class="comment">//   apiKey: '...'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    ios: &#123;</span><br><span class="line">      pfx: <span class="string">'pushDevelopmentCertificate.p12'</span>, <span class="comment">// 與 index.js 目錄同層</span></span><br><span class="line">      bundleId: <span class="string">'com.pushTest'</span>, <span class="comment">// 填入先前填的 Bundle ID</span></span><br><span class="line">      production: <span class="literal">false</span> <span class="comment">// false: development, true: production</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>而若需要同時使用 development 及 production 的 APNS 時，可以將設定改為這樣：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">push: &#123;</span><br><span class="line">  ios: [</span><br><span class="line">    &#123;</span><br><span class="line">      pfx: <span class="string">''</span>, <span class="comment">// Dev PFX or P12</span></span><br><span class="line">      bundleId: <span class="string">''</span>,</span><br><span class="line">      production: <span class="literal">false</span> <span class="comment">// development</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      pfx: <span class="string">''</span>, <span class="comment">// Prod PFX or P12</span></span><br><span class="line">      bundleId: <span class="string">''</span>,  </span><br><span class="line">      production: <span class="literal">true</span> <span class="comment">// production</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="設定-client-apps"><a href="#設定-client-apps" class="headerlink" title="設定 client apps"></a>設定 client apps</h2><p>App 部分的設定與先前 Parse 的設定一樣，因此在這裡省略，可以參考 <a href="https://github.com/ParsePlatform/Parse-Server/wiki/Push-Configuring-Clients" target="_blank" rel="external">Push Configuring Clients</a> 尋找自己需要的程式語言寫法。</p><h2 id="測試推播通知"><a href="#測試推播通知" class="headerlink" title="測試推播通知"></a>測試推播通知</h2><p>推播傳送的方式一樣可用 curl 或是 cloud code，唯一要注意的是傳送推播通知需要 <code>masterKey</code>，可以參考 <a href="https://github.com/ParsePlatform/parse-server/wiki/Push#4-send-push-notifications" target="_blank" rel="external">Send Push Notifications</a>。而 <a href="https://github.com/ParsePlatform/parse-dashboard" target="_blank" rel="external">Parse Dashboard</a>目前也可以傳送推播通知了，只可惜目前只可以傳而不能看傳送紀錄，下圖為 parse-dashboard 1.0.8 的畫面。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/15.png" alt="Parse Dashboard send push" title="Parse Dashboard send push"></p><h2 id="疑難雜症"><a href="#疑難雜症" class="headerlink" title="疑難雜症"></a>疑難雜症</h2><p>正常來說過沒多久就 app 就能收到推播通知，如果沒有成功的話可以新增這兩個環境變數 <code>VERBOSE=1</code> 及 <code>DEBUG=apn</code>，若 <code>VERBOSE=1</code> 看不出結果再觀察 <code>DEBUG=apn</code>，其餘問題可能就要爬 issues 了。</p><p>筆者遇到的問題很蠢，就是所在的網路環境中 port 2195 被鎖了，因此試了半天都推播失敗 Orz，請先確定自己到 <code>gateway.sandbox.push.apple.com:2195</code> (development) 及 <code>gateway.push.apple.com:2195</code> (production) 是否能通～</p><p>參考資料：</p><ol><li><a href="https://github.com/ParsePlatform/parse-server/wiki/Push" target="_blank" rel="external">parse-server wiki - push</a></li><li><a href="https://github.com/ParsePlatform/PushTutorial/blob/master/iOS/README.md" target="_blank" rel="external">PushTutorial - Push Notification Sample App</a></li><li><a href="https://github.com/ParsePlatform/parse-dashboard" target="_blank" rel="external">Parse Dashboard</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Parse 的一大方便之處，即是他提供了推播通知(push notification)的整合，使開發者可以在短時間內完成推播功能；而推播通知也已經移植到 Parse Server 版本上，步驟與先前在 Parse 上差不了多少，在這裡紀錄一下 APNS(iOS) 設定的步驟
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="APNS" scheme="http://ssk7833.github.io/blog/tags/APNS/"/>
    
      <category term="Parse server" scheme="http://ssk7833.github.io/blog/tags/Parse-server/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="push notification" scheme="http://ssk7833.github.io/blog/tags/push-notification/"/>
    
  </entry>
  
  <entry>
    <title>Parse Server 架設教學</title>
    <link href="http://ssk7833.github.io/blog/2016/04/09/setup-parse-server/"/>
    <id>http://ssk7833.github.io/blog/2016/04/09/setup-parse-server/</id>
    <published>2016-04-09T03:33:05.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>在今年一月底時 <a href="http://parse.com/" target="_blank" rel="external">Parse</a> 突然丟下了一枚震撼彈(<a href="http://blog.parse.com/announcements/moving-on/" target="_blank" rel="external">Moving On</a>)，隨著 Parse 服務將在一年後關閉的消息，同時也提到將會把 Parse Server open source 出來，如今兩個月過去了，釋出的 Parse Server 也趨於完善，不只提供了許多雲端服務的整合方案，連 Parse Dashboard 也在三月初時 open source 了(<a href="http://blog.parse.com/announcements/introducing-the-parse-server-dashboard/" target="_blank" rel="external">Introducing the Parse Server Dashboard</a>)，雖然這個 Dashboard 目前並不像 Parse 線上服務的功能一樣完整，但在短短一個月內間又多了推播(push notification)功能頁面(<a href="http://blog.parse.com/announcements/push-and-config-come-to-the-parse-dashboard/" target="_blank" rel="external">Push and Config come to the Parse Dashboard</a>)，可以預見未來功能會越來越完整。</p><p>單純架設 Parse Server 的難度不高，在 <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">GitHub</a> 有對於要在 local 架設或是部屬到其他服務上如 Heroku 的範例教學，<a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">wiki</a> 頁面也有更完整的解說，但從這裡開始我個人認為不是個好選擇，以指令方式去帶 appId 及 masterKey 總有可能會發生什麼意外。Parse 另外提供了 <a href="https://github.com/ParsePlatform/parse-server-example" target="_blank" rel="external">parse-server-example</a>，這個對於入門來說會比較方便。</p><h2 id="前置環境"><a href="#前置環境" class="headerlink" title="前置環境"></a>前置環境</h2><ul><li>Node 4.3 以上</li><li>MongoDB version 2.6.X or 3.0.X</li><li>Python 2.x (For Windows users, 2.7.1 is the required version)</li></ul><h2 id="架設-Parse-Server"><a href="#架設-Parse-Server" class="headerlink" title="架設 Parse Server"></a>架設 Parse Server</h2><ol><li><p>先從 GitHub 上抓一份 parse-server-example 下來。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ParsePlatform/parse-server-example.git --depth <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>將必要的模組裝上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>在 <code>index.js</code> 中修改參數，可以選擇修改環境變數或是直接修改後面字串：</p><ul><li>appId: 可填任意字串，用於識別 Parse API 的使用權限。在這裡用了 <code>md5</code> 來產生隨機字串。</li><li>masterKey: 可填任意字串，但不要公開此字串，用於覆寫權限設定。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</span><br><span class="line">  databaseURI: databaseUri || <span class="string">'mongodb://localhost:27017/dev'</span>,</span><br><span class="line">  cloud: process.env.CLOUD_CODE_MAIN || __dirname + <span class="string">'/cloud/main.js'</span>,</span><br><span class="line">  appId: process.env.APP_ID || <span class="string">'7c6a1d1470fed0313b5044c4eb83def0'</span>,</span><br><span class="line">  masterKey: process.env.MASTER_KEY || <span class="string">'98584a6e0a2592c274d1e4eae44b0a7b'</span>, <span class="comment">// Add your master key here. Keep it secret!</span></span><br><span class="line">  serverURL: process.env.SERVER_URL || <span class="string">'http://localhost:1337/parse'</span>,  <span class="comment">// Don't forget to change to https if needed</span></span><br><span class="line">  liveQuery: &#123;</span><br><span class="line">    classNames: [<span class="string">"Posts"</span>, <span class="string">"Comments"</span>] <span class="comment">// List of classes to support for query subscriptions</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>到這裡可以先執行看看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure><p>此時 Parse API 預設會掛在 <a href="http://localhost:1337/parse/" target="_blank" rel="external">http://localhost:1337/parse/</a> 下，有兩種方式可以測試是否運作正常：</p><ol><li>直接到第五步驟，利用此包程式碼中的範例網頁來測試。</li><li><code>curl</code> 來測試 Parse 的 REST API 是否正常運作，<code>X-Parse-Application-Id</code> 需改成在 <code>index.js</code> 中設定的 <code>appId</code>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: 7c6a1d1470fed0313b5044c4eb83def0"</span> \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  <span class="operator">-d</span> <span class="string">'&#123;"score":1337,"playerName":"Sean Plott","cheatMode":false&#125;'</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/classes/GameScore</span><br></pre></td></tr></table></figure><p>若正常無誤會得到以下類似的結果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"objectId"</span>: <span class="string">"CT8BWvZ8Fi"</span>,</span><br><span class="line">  <span class="string">"createdAt"</span>: <span class="string">"2016-04-08T02:55:57.802Z"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取值可利用以下指令來測試，<code>GameScore</code> 後面需加上剛剛回傳的 <code>objectId</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: 7c6a1d1470fed0313b5044c4eb83def0"</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/classes/GameScore/CT8BWvZ8Fi</span><br></pre></td></tr></table></figure><p>正常的話即可拿回上一步所傳的內容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"objectId"</span>: <span class="string">"CT8BWvZ8Fi"</span>,</span><br><span class="line">  <span class="string">"score"</span>: <span class="number">1337</span>,</span><br><span class="line">  <span class="string">"playerName"</span>: <span class="string">"Sean Plott"</span>,</span><br><span class="line">  <span class="string">"cheatMode"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"updatedAt"</span>: <span class="string">"2016-04-08T02:55:57.802Z"</span>,</span><br><span class="line">  <span class="string">"createdAt"</span>: <span class="string">"2016-04-08T02:55:57.802Z"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>詳細操作可參考 <a href="https://parse.com/docs/rest/guide/" target="_blank" rel="external">REST API Guide</a>。</p></li><li><p>在這個範例中有提供 REST API 及 Cloud Code 的測試程式碼，可以執行看看功能是否正常。<br>在 <code>public/assets/js/script.js</code> 中，將 <code>myAppId</code> 取代成自己目前的 <code>appId</code>，共有兩處；接著開啟 <a href="http://localhost:1337/public/test.html" target="_blank" rel="external">http://localhost:1337/public/test.html</a> 即可看到測試頁面，依序點選下方的 <code>POST</code>, <code>FETCH</code> 及 <code>TEST</code>，若正確無誤的話應能看到以下結果：<br><img src="/blog/images/ParseServerTest.png" alt="Parse Server Test" title="Parse Server Test"><br>看到這個結果就代表 REST API 及 Cloud Code 都沒有問題，下一步就看自己是不是要加推播通知的設定及 Dashboard 了！</p></li></ol><p>參考資料：</p><ol><li><a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">parse-server</a></li><li><a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">parse-server wiki</a></li><li><a href="https://github.com/ParsePlatform/parse-server-example" target="_blank" rel="external">parse-server-example</a></li><li><a href="https://github.com/ParsePlatform/parse-server/issues" target="_blank" rel="external">parse-server issues</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在今年一月底時 &lt;a href=&quot;http://parse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parse&lt;/a&gt; 突然丟下了一枚震撼彈(&lt;a href=&quot;http://blog.parse.com/announcements/movi
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CloudCode" scheme="http://ssk7833.github.io/blog/tags/CloudCode/"/>
    
      <category term="Parse server" scheme="http://ssk7833.github.io/blog/tags/Parse-server/"/>
    
      <category term="Parse.com" scheme="http://ssk7833.github.io/blog/tags/Parse-com/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Do it smart, a better way to write CSS - SASS/SCSS</title>
    <link href="http://ssk7833.github.io/blog/2016/03/30/do-it-smart-a-better-way-to-write-CSS/"/>
    <id>http://ssk7833.github.io/blog/2016/03/30/do-it-smart-a-better-way-to-write-CSS/</id>
    <published>2016-03-30T06:49:50.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近在會議中分享了以下這份投影片，算是一個 SASS/SCSS 的入門。我擷取了部分常用的基礎功能及寫法範例，希望對入門者有些幫助。</p><p><iframe src="https://ssk7833.github.io/slides/SCSS/" width="640" height="480" style="width:100%;"></iframe><br><a href="https://ssk7833.github.io/slides/SCSS/">Do it smart, a better way to write CSS - SASS/SCSS</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在會議中分享了以下這份投影片，算是一個 SASS/SCSS 的入門。我擷取了部分常用的基礎功能及寫法範例，希望對入門者有些幫助。&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://ssk7833.github.io/slides/SCSS/&quot; width=&quot;640
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CSS" scheme="http://ssk7833.github.io/blog/tags/CSS/"/>
    
      <category term="SASS" scheme="http://ssk7833.github.io/blog/tags/SASS/"/>
    
      <category term="SCSS" scheme="http://ssk7833.github.io/blog/tags/SCSS/"/>
    
  </entry>
  
  <entry>
    <title>實作 gooey 膠粘效果</title>
    <link href="http://ssk7833.github.io/blog/2016/03/09/implement-gooey-effect/"/>
    <id>http://ssk7833.github.io/blog/2016/03/09/implement-gooey-effect/</id>
    <published>2016-03-09T05:48:05.000Z</published>
    <updated>2018-12-10T06:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近在試著實作 gooey 效果，看了一些介紹後知道了 gooey 的原理，本以為在實作上可以一路順風，但果然沒有這麼簡單，還好最後有找到解決方法。</p><p>先來談談 gooey 的作法，首先要先有兩層 layer，內層將物件模糊 blur，而外層處理亮度 brightness 跟對比度 contrast，接著神奇的事情就會發生了，可以參考以下範例：</p><p></p><p data-height="380" data-theme-id="0" data-slug-hash="lIBAg" data-default-tab="result" data-user="chriscoyier" class="codepen">See the Pen <a href="http://codepen.io/chriscoyier/pen/lIBAg/" target="_blank" rel="external">Blur vs Contrast</a> by Chris Coyier (<a href="http://codepen.io/chriscoyier" target="_blank" rel="external">@chriscoyier</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>上層是只加了模糊，可以看到因為模糊的關係，物件間的顏色互相疊加在一起；下層則是調整對比後的結果，將模糊過的結果保留重疊及原本顏色較深的部分，濾掉顏色較淺的部分，物件間的部分就因此連起來了，若是加上動畫，效果就會更好：</p><p></p><p data-height="330" data-theme-id="0" data-slug-hash="lFdHu" data-default-tab="result" data-user="lbebber" class="codepen">See the Pen <a href="http://codepen.io/lbebber/pen/lFdHu/" target="_blank" rel="external">Gooey Pagination</a> by Lucas Bebber (<a href="http://codepen.io/lbebber" target="_blank" rel="external">@lbebber</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>這樣看似已經完成了，但實際上會遇到兩個問題：</p><ol><li>內部物件模糊掉，使用了 <code>filter: blur();</code> 後，子元素無一倖免。</li><li>更改顏色，所有更改顏色都會因對比而偏移掉。</li></ol><p>原本就是卡在這裡，不管怎麼調整都沒辦法有效的解決這兩項，後來看到了 <a href="http://tympanus.net/codrops/2015/03/10/creative-gooey-effects/" target="_blank" rel="external">Creative Gooey Effects</a> 這篇才知道可以利用 <code>fliter: url();</code> 配合 SVG filters 來解決這兩個問題，且用法也很簡單。此方法在 <a href="https://css-tricks.com/gooey-effect/" target="_blank" rel="external">The Gooey Effect</a> 中描述的更加清楚，包含在 <code>feColorMatrix</code> 中的 values 為什麼是下表也有描述，若是對他的敘述不清楚的話可以先看 <a href="http://www.oxxostudio.tw/articles/201406/svg-11-filter-feColorMatrix.html" target="_blank" rel="external">SVG 研究之路 (11) - filter:feColorMatrix</a> 稍微釐清一下。</p><p>簡單來說，若是沒有特別需求，就去調整 color matrix 中的 alpha channel (A) 跟 plus(+) 中值來得到自己想要的結果。</p><table><thead><tr><th>*</th><th>R</th><th>G</th><th>B</th><th>A</th><th>+</th></tr></thead><tbody><tr><td>R</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>G</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>B</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>A</td><td>0</td><td>0</td><td>0</td><td>18</td><td>-7</td></tr></tbody></table><p>以下是我在測試時寫的比較：</p><ol><li>用純 CSS 處理，背景與下一項的顏色設定相同，但呈現出 <code>#0000FF</code> 的藍色。<br><p data-height="200" data-theme-id="0" data-slug-hash="mPeEEG" data-default-tab="result" data-user="ssk7833" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/mPeEEG/" target="_blank" rel="external">Rotate loading (bad with and text)</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><script async src="//assets.codepen.io/assets/embed/ei.js"></script></li><li>用 SVG 處理，上一版的改良，在元素中放文字將會正常顯示。<br><p data-height="200" data-theme-id="0" data-slug-hash="dMGpXQ" data-default-tab="result" data-user="ssk7833" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/dMGpXQ/" target="_blank" rel="external">Gooey rotate loading (good with background and text)</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><script async src="//assets.codepen.io/assets/embed/ei.js"></script></li><li>將第二版的顏色稍加調整，移除 <code>feBlend</code> 後由於失去 <code>SourceGraphic</code> 的關係，文字將不會正常顯示，但此效果我更喜歡。<br><p data-height="200" data-theme-id="0" data-slug-hash="oxbBRy" data-default-tab="result" data-user="ssk7833" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/oxbBRy/" target="_blank" rel="external">Gooey rotate loading (good with only background)</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><script async src="//assets.codepen.io/assets/embed/ei.js"></script></li></ol><p>在寫上述三項測試時，自己也試過許多不同的組合，對 SVG filters 也多了許多理解，而在 gooey 相關的效果基本上就是 <code>feGaussianBlur</code>、<code>feColorMatrix</code> 和 <code>feBlend</code> 的變化所組成，未來若遇到類似需求時應該都能迎刃而解～</p><p>參考資料：</p><ol><li><a href="https://css-tricks.com/shape-blobbing-css/" target="_blank" rel="external">Shape Blobbing in CSS</a></li><li><a href="http://www.oxxostudio.tw/articles/201408/sticky-ball.html" target="_blank" rel="external">噁心黏黏球( 純 CSS )</a></li><li><a href="http://tympanus.net/codrops/2015/03/10/creative-gooey-effects/" target="_blank" rel="external">Creative Gooey Effects</a>  底下有幾個動畫範例值得一看</li><li><a href="https://css-tricks.com/gooey-effect/" target="_blank" rel="external">The Gooey Effect</a></li><li><a href="http://www.oxxostudio.tw/articles/201406/svg-11-filter-feColorMatrix.html" target="_blank" rel="external">SVG 研究之路 (11) - filter:feColorMatrix</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在試著實作 gooey 效果，看了一些介紹後知道了 gooey 的原理，本以為在實作上可以一路順風，但果然沒有這麼簡單，還好最後有找到解決方法。&lt;/p&gt;
&lt;p&gt;先來談談 gooey 的作法，首先要先有兩層 layer，內層將物件模糊 blur，而外層處理亮度 brigh
      
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CSS" scheme="http://ssk7833.github.io/blog/tags/CSS/"/>
    
      <category term="SVG" scheme="http://ssk7833.github.io/blog/tags/SVG/"/>
    
      <category term="gooey" scheme="http://ssk7833.github.io/blog/tags/gooey/"/>
    
  </entry>
  
</feed>
