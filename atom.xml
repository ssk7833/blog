<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[北風筆記]]></title>
  <subtitle><![CDATA[紀錄一些學習心得、過程及日常]]></subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://ssk7833.github.io/blog/"/>
  <updated>2016-01-22T02:14:48.886Z</updated>
  <id>http://ssk7833.github.io/blog/</id>
  
  <author>
    <name><![CDATA[North]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用 Travis CI 自動部署 GitHub Pages]]></title>
    <link href="http://ssk7833.github.io/blog/2016/01/21/using-TravisCI-to-deploy-on-GitHub-pages/"/>
    <id>http://ssk7833.github.io/blog/2016/01/21/using-TravisCI-to-deploy-on-GitHub-pages/</id>
    <published>2016-01-21T08:23:05.000Z</published>
    <updated>2016-01-22T02:14:48.886Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>先前看到了<a href="https://samkuo.me/post/2015/09/why-developers-should-have-a-blog/" target="_blank" rel="external">程式人就該有個部落格</a>，想想這個主意不錯，之前有在 Blogger 及 Logdown 零星寫了幾篇文章，也曾經想過自己架靜態或動態網站，只是一直沒有去做，看完這篇讓我更有動力去做這件事。研究一陣子後我選擇直接利用 Github pages 來發佈網站，於是開始調查 <a href="https://www.staticgen.com/" target="_blank" rel="external">StaticGen</a> 上排名較高的幾個，而最後挑選了 <a href="https://hexo.io" target="_blank" rel="external">Hexo</a>：是台灣人寫的，而且是 javascript。</p>
<p>自己完成 Hexo 初步設定，產生第一版頁面後不久就遇到兩個問題：</p>
<ol>
<li>能不能將每次都要發佈的這個動作自動化。</li>
<li>如果我換到其他電腦上，而其他電腦可能沒有 Hexo 時會很不方便，可能要選擇安裝一次 node.js 及 hexo，甚至根本沒安裝權限；若是能直接利用 GitHub 線上編輯 markdown 文件就能產生的話有多棒。</li>
</ol>
<p>因為這兩點，我決定開始我的 Travis CI 初體驗。</p>
<h2 id="u95DC_u65BC_Travis_CI"><a href="#u95DC_u65BC_Travis_CI" class="headerlink" title="關於 Travis CI"></a>關於 Travis CI</h2><p>簡單來說，持續整合 (Continuous integration，縮寫為 CI)是在開發過程中，有任何變更都自動且持續的整合到目前的版本中。整合包含測試及發佈，可根據自訂的測試內容產生可視化的結果，方便開發人員快速找到問題所在，並且在測試通過後自動執行已撰寫的腳本，以達到自動發佈的功能。要達到持續整合，需有一個伺服器專門監聽程式版本的改動，一旦有變動就執行事先撰寫的測試及部署腳本。</p>
<p>Travis CI 提供在 GitHub 上的任何公開的 repo 都可以免費的使用 CI 服務，Travis CI 與 GitHub 的適性很好（也只提供使用 GitHub 帳號登入），廣受 GitHub 上使用，因此在這裡也使用 Travis CI 所提供的服務來產生靜態網站。</p>
<p>初次接觸 CI 可以先從官方提供的範例檔開始：<a href="https://docs.travis-ci.com/user/for-beginners" target="_blank" rel="external">Travis CI for Complete Beginners</a>，以便能有一些基礎概念，接著再開始挑選 <a href="https://docs.travis-ci.com/user/getting-started/" target="_blank" rel="external">Getting started</a> 中的項目學習設定與操作。</p>
<p>我的目標很明確，想要弄出在同一個 repo 下，一個 branch 是放 source code 的 master，另一個 branch 則是發佈用的 gh-pages。每當我 master 有更新時 gh-pages 也會自動透過 Travis CI 更新，如下圖，經過幾次測試後終於成功，最後 branch 的點呈現交錯成長：</p>
<p><img src="/blog/images/sourceTree.png" alt="branch" title="branch"></p>
<h2 id="u7D66_u4E88_Travis_CI_push__u7684_u6B0A_u9650"><a href="#u7D66_u4E88_Travis_CI_push__u7684_u6B0A_u9650" class="headerlink" title="給予 Travis CI push 的權限"></a>給予 Travis CI push 的權限</h2><p>由於發佈到 gh-pages 要交給 Travis CI 處理，需要 GitHub 帳號的驗證，而在 public repo 下不可能直接把密碼直接放在 source 中，因此在這裡選擇 GitHub 所提供的 <a href="https://github.com/settings/tokens" target="_blank" rel="external">Personal access tokens</a> 來處理權限的問題，用 Personal access token 的好處在於是個人創建的，可以隨時刪除 token 以取消存取權限，再加上 Travis CI 在文件中提到的 <a href="https://docs.travis-ci.com/user/encryption-keys/" target="_blank" rel="external">Encryption keys</a> 來處理敏感資料，通過環境變數的方式傳遞給腳本，以避免密碼及 token 公開出來。</p>
<p>首先先產生一個 access token，因為目的只有讓 Travis CI 可以讀取 public repo，因此勾選 public repo 即可。</p>
<p><img src="/blog/images/personalAccessToken.png" alt="personal access token" title="personal access token"></p>
<p>接著先將產生的 token 妥善複製，未來只能 regenerate 一組新的 token，再也無法從 GitHub 調出目前這組。</p>
<p><img src="/blog/images/generatedToken.png" alt="generated token" title="generated token"></p>
<p>接著利用 Travis CLI 來處理敏感資料，較方便的方式是利用 ruby 的 gem 來安裝 Travis CLI：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="keyword">install</span> travis</span><br></pre></td></tr></table></figure>
<p>安裝完畢後，接著到想設定 Travis CI 的 repo 目錄中執行 <code>travis login</code> 來驗證身分，之後執行 <code>travis init</code>，會先詢問使用的語言，且產生 <code>.travis.yml</code>，接著在同一目錄下執行此指令，記得將 <code>&lt;Personal Access Token&gt;</code> 取代成先前複製的那組：</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt <span class="attribute">'GIT_NAME</span>=<span class="string">"North"</span> GIT_EMAIL=ssk7833@gmail.com GH_TOKEN=&lt;Personal <span class="keyword">Access</span> Token&gt;' <span class="comment">--add</span></span><br></pre></td></tr></table></figure>
<p>即可看到在 .travis.yml 中多了</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">env</span>:</span><br><span class="line">  <span class="attribute">global</span>:</span><br><span class="line">    <span class="attribute">secrue</span>: <span class="string">"long secure base64 string"</span></span><br></pre></td></tr></table></figure>
<p>這一串將在每次 CI 進行時設定環境變數，這邊環境變數即可在接下來的腳本中使用。</p>
<h2 id="u8A2D_u5B9A_-travis-yml__u6A94"><a href="#u8A2D_u5B9A_-travis-yml__u6A94" class="headerlink" title="設定 .travis.yml 檔"></a>設定 .travis.yml 檔</h2><p>編輯 .travis.yml 前，可以先閱讀一下 Travis CI 的 <a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="external">Build Lifecycle</a>，以下是我粗略的設定：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">language</span>: <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="haml">node_js:</span><br><span class="line">  -<span class="ruby"> <span class="string">"4.0"</span></span><br><span class="line"></span></span><br><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">    secure:  "long secure base64 string"</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  -<span class="ruby"> npm install</span><br><span class="line"></span></span><br><span class="line">script:</span><br><span class="line">  # Set Git config</span><br><span class="line">  -<span class="ruby"> git config --global user.name <span class="string">"$GIT_NAME"</span></span><br><span class="line"></span>  -<span class="ruby"> git config --global user.email <span class="string">"$GIT_EMAIL"</span></span><br><span class="line"></span>  -<span class="ruby"> git config --global push.default simple</span><br><span class="line"></span>  -<span class="ruby"> git clone --depth <span class="number">1</span> --branch gh-pages <span class="symbol">https:</span>/<span class="regexp">/$GH_TOKEN@github.com/ssk</span>7833/blog public</span><br><span class="line"></span>  # Generate Hexo static pages</span><br><span class="line">  -<span class="ruby"> npm run generate</span><br><span class="line"></span>  -<span class="ruby"> cd public</span><br><span class="line"></span>  -<span class="ruby"> git add -<span class="constant">A</span> .</span><br><span class="line"></span>  -<span class="ruby"> <span class="constant">MESSAGE</span>=<span class="string">`date +\ %Y-%m-%d\ %H:%M:%S`</span></span><br><span class="line"></span>  -<span class="ruby"> git commit -m <span class="string">"Site updated:$MESSAGE"</span></span><br><span class="line"></span>  -<span class="ruby"> git push --quiet</span></span></span><br></pre></td></tr></table></figure>
<p>node.js 的套件 dependencies 都已先用 package.json 存下，因此在 install 的部分只需使用 npm install；在 script 中完成部分指令，但因為沒特殊需求，只有設定 git 及產生靜態頁面，因此讓它一路到底。</p>
<p><strong>注意：git push 時一定要加 <code>--quiet</code>，否則先前設定的 Personal Access Token 將會印出，這樣就失去加密意義了。</strong></p>
<p>結果可以在 Travis CI 的網頁上看到，可以瀏覽各次的狀況，像我最近的 <a href="https://travis-ci.org/ssk7833/blog/builds/101307260" target="_blank" rel="external">push 結果</a>及先前測試的<a href="https://travis-ci.org/ssk7833/blog/builds/100311173" target="_blank" rel="external">失敗結果</a>都可以在 Build history 中瀏覽到。</p>
<h2 id="u5728_GitHub__u4E0A_u767C_u4F48_uFF0F_u7DE8_u8F2F"><a href="#u5728_GitHub__u4E0A_u767C_u4F48_uFF0F_u7DE8_u8F2F" class="headerlink" title="在 GitHub 上發佈／編輯"></a>在 GitHub 上發佈／編輯</h2><p>若是設定無誤，接下來要發佈或編輯文章即可直接利用 GitHub 網頁版來作編輯，不需要擔心作業系統沒有安裝相關環境而無法發佈或編輯文章囉！</p>
<p><img src="/blog/images/editPost.png" alt="edit post" title="edit post"></p>
<p><strong>UPDATE：</strong>發現 Travis CI 發佈的結果可能會跟實際時間對不起來，如圖：</p>
<p><img src="/blog/images/TZIncorrect.png" alt="time zone incorrect" title="time zone incorrect"></p>
<p>後來發現是因為我在 Hexo 中設定了時區為 Asia/Taipei，而 Travis CI 所提供的機器時區不一樣而造成的，將 Travis CI 一樣設定為 Asia/Taipei 即可解決問題。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">before_install:</span><br><span class="line"></span>  - <span class="preprocessor">export</span> TZ<span class="label">=Asia</span>/Taipei</span><br></pre></td></tr></table></figure>
<p>這是我最後的 <a href="https://github.com/ssk7833/blog/blob/master/.travis.yml" target="_blank" rel="external">.travis.yml 設定</a>。</p>
<p>參考資料：</p>
<ol>
<li><a href="https://farseerfc.me/zhs/travis-push-to-github-pages-blog.html" target="_blank" rel="external">用 Travis-CI 生成 Github Pages 博客 </a></li>
<li><a href="http://changyuheng.me/2015/when-hexo-static-site-meets-github-pages-and-travis-ci/" target="_blank" rel="external">When Hexo Meets GitHub Pages and Travis CI plus Raspberry Pi</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>先前看到了<a href="https://samkuo.me/post/2015/09/why-dev]]>
    </summary>
    
      <category term="gf-pages" scheme="http://ssk7833.github.io/blog/tags/gf-pages/"/>
    
      <category term="hexo" scheme="http://ssk7833.github.io/blog/tags/hexo/"/>
    
      <category term="travis ci" scheme="http://ssk7833.github.io/blog/tags/travis-ci/"/>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML5 fullscreen API 將 iframe 以全螢幕顯示]]></title>
    <link href="http://ssk7833.github.io/blog/2016/01/10/show-iframe-in-fullscreen-by-html5-fullscreen-api/"/>
    <id>http://ssk7833.github.io/blog/2016/01/10/show-iframe-in-fullscreen-by-html5-fullscreen-api/</id>
    <published>2016-01-09T20:10:05.000Z</published>
    <updated>2016-01-22T02:14:48.886Z</updated>
    <content type="html"><![CDATA[<p>最近因為有把 iframe 內容以全螢幕顯示的需求，因此研究了一下 HTML5 fullscreen API。已有現成的 library 可以用如 <a href="https://sindresorhus.com/screenfull.js/" target="_blank" rel="external">screenfull.js</a> 及 <a href="https://brad.is/coding/BigScreen/" target="_blank" rel="external">BigScreen</a>，但大致上並不難，因此我選擇了純 javascript 來撰寫看看。</p>
<p>要全螢幕其實並不難，只要呼叫 <code>requestFullscreen()</code> 即可做到，以下是簡易範例：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'#container .button'</span>);</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, fullscreen);</span><br><span class="line"></span><br><span class="line">function fullscreen() &#123;</span><br><span class="line">  <span class="comment">// check if fullscreen mode is available</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.fullscreenEnabled ||</span><br><span class="line">    <span class="built_in">document</span>.webkitFullscreenEnabled ||</span><br><span class="line">    <span class="built_in">document</span>.mozFullScreenEnabled ||</span><br><span class="line">    <span class="built_in">document</span>.msFullscreenEnabled) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// which element will be fullscreen</span></span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'#container iframe'</span>);</span><br><span class="line">    <span class="comment">// Do fullscreen</span></span><br><span class="line">    <span class="keyword">if</span> (iframe.requestFullscreen) &#123;</span><br><span class="line">      iframe.requestFullscreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframe.webkitRequestFullscreen) &#123;</span><br><span class="line">      iframe.webkitRequestFullscreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframe.mozRequestFullScreen) &#123;</span><br><span class="line">      iframe.mozRequestFullScreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframe.msRequestFullscreen) &#123;</span><br><span class="line">      iframe.msRequestFullscreen();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'.error'</span>).innerHTML = <span class="string">'Your browser is not supported'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此範例即可讓當所選擇的 <code>#container .button</code> 被點擊時，讓 <code>#container iframe</code> 全螢幕。</p>
<p>但因為 iframe 的內容並非我可以控制的，有些 iframe 的內容沒有處理 RWD，因此當頁面縮放時可能會呈現未預期的效果，如：<a href="http://codepen.io/kanaparty/pen/eJYXeZ" target="_blank" rel="external">ぶつからないように動くビークル</a>（找了一下 codepen 才找到一個可用範例）。要做到這點，我目前選擇當 iframe 被全螢幕時則重新載入一次，當然，當 iframe 從全螢幕離開時也會再 resize 一次，因此也要注意離開全螢幕時也得處理。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reload</span></span><br><span class="line"><span class="tag">iframe</span><span class="class">.src</span> = <span class="tag">iframe</span>.src</span><br></pre></td></tr></table></figure>
<p>原本我認為應將重新載入寫在 request fullscreen 之後，而當觸發 keydown event 時再觸發一次重新載入，後來發現在全螢幕時按下 ESC 時 keydown event 都不會被觸發(chrome, firefox)，而按下 F11 則是 Firefox 會觸發而 Chrome 不會，因此認為這應該不是個好寫法。</p>
<p>後來在 <a href="http://www.sitepoint.com/use-html5-full-screen-api/" target="_blank" rel="external">How to Use the HTML5 Full-Screen API (Again)</a> 發現有 fullscreenchange event 可以用，因此也改用這個，原本放在全螢幕後的重新載入也改成放於 event listener 內，程式碼也簡潔多了！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when you are in fullscreen, ESC and F11 may not be trigger by keydown listener.</span></span><br><span class="line"><span class="comment">// so don't use it to detect exit fullscreen</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'key press'</span> + e.keyCode);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// detect enter or exit fullscreen mode</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'webkitfullscreenchange'</span>, fullscreenChange);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'mozfullscreenchange'</span>, fullscreenChange);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'fullscreenchange'</span>, fullscreenChange);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'MSFullscreenChange'</span>, fullscreenChange);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fullscreenChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.fullscreenEnabled ||</span><br><span class="line">       <span class="built_in">document</span>.webkitIsFullScreen ||</span><br><span class="line">       <span class="built_in">document</span>.mozFullScreen ||</span><br><span class="line">       <span class="built_in">document</span>.msFullscreenElement) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'enter fullscreen'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'exit fullscreen'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// force to reload iframe once to prevent the iframe source didn't care about trying to resize the window</span></span><br><span class="line">  <span class="comment">// comment this line and you will see</span></span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.querySelector(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.src = iframe.src;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下為測試的範例，可以試著把 <code>iframe.src = iframe.src;</code> 註解掉，即可看到改造前後的差異：</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="mVOXXp" data-default-tab="result" data-user="ssk7833" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/mVOXXp/" target="_blank" rel="external">Fullscreen API on iframe</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>參考資料：<br><a href="http://codepen.io/kanaparty/pen/eJYXeZ" target="_blank" rel="external">ぶつからないように動くビークル</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API" target="_blank" rel="external">Using fullscreen mode - Web APIs | MDN</a><br><a href="http://www.sitepoint.com/use-html5-full-screen-api/" target="_blank" rel="external">How to Use the HTML5 Full-Screen API (Again) - SitePoint</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近因為有把 iframe 內容以全螢幕顯示的需求，因此研究了一下 HTML5 fullscreen API。已有現成的 library 可以用如 <a href="https://sindresorhus.com/screenfull.js/" target="_blan]]>
    </summary>
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Facebook Graph API 取得大頭貼照]]></title>
    <link href="http://ssk7833.github.io/blog/2015/08/25/facebook-graph-api-get-picture/"/>
    <id>http://ssk7833.github.io/blog/2015/08/25/facebook-graph-api-get-picture/</id>
    <published>2015-08-24T19:11:56.000Z</published>
    <updated>2016-01-22T02:14:48.886Z</updated>
    <content type="html"><![CDATA[<p>要取得大頭貼照，如果使用 API request ，加上 picture 即可得到大頭貼照，如：<code>me?fields=id,name,picture</code>，即可在回傳的 JSON 中取得圖片的位址，但這時取回來的圖片會比正常大小還要小，而且此方法還需要 access_token。</p>
<p>要取得不同大小的大頭貼照，有個更輕鬆的方法：<code>http://graph.facebook.com/{id}/picture?type=normal</code> 直接使用此網址，將 id 換成想呈現的 userId 即可，此網址將會 redirect 到對應的圖片位址，且此方法不需要 access_token。</p>
<p>在這個網址中，type 可為 <code>small</code>, <code>normal</code>, <code>album</code>, <code>large</code>, <code>square</code>，分別為不同解析度的照片大小。</p>
<p>以 Facebook 的創始人 Mark Zuckerberg 為例，userId 為 4，則要顯示的網址如下：<br>50*50:<br><code>http://graph.facebook.com/4/picture?type=small</code><br><img src="http://graph.facebook.com/4/picture?type=small" alt="Small" title="Mark Zuckerberg"><br><code>http://graph.facebook.com/4/picture?type=album</code><br><img src="http://graph.facebook.com/4/picture?type=album" alt="Album" title="Mark Zuckerberg"><br><code>http://graph.facebook.com/4/picture?type=square</code><br><img src="http://graph.facebook.com/4/picture?type=square" alt="Square" title="Mark Zuckerberg"></p>
<p>100*100:<br><code>http://graph.facebook.com/4/picture?type=normal</code><br><img src="http://graph.facebook.com/4/picture?type=normal" alt="Normal" title="Mark Zuckerberg"></p>
<p>200*200:<br><code>http://graph.facebook.com/4/picture?type=large</code><br><img src="http://graph.facebook.com/4/picture?type=large" alt="Large" title="Mark Zuckerberg"></p>
<p>不能理解的是為什麼 small, album, square 所得到的大小都一樣，還不知道差在哪。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>要取得大頭貼照，如果使用 API request ，加上 picture 即可得到大頭貼照，如：<code>me?fields=id,name,picture</code>，即可在回傳的 JSON 中取得圖片的位址，但這時取回來的圖片會比正常大小還要小，而且此方法還需要 a]]>
    </summary>
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Facebook-Graph-API" scheme="http://ssk7833.github.io/blog/tags/Facebook-Graph-API/"/>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Facebook Graph API 回傳指定語言姓名(Language-specific name)]]></title>
    <link href="http://ssk7833.github.io/blog/2015/07/12/facebook-graph-api-returns-language-specific-name/"/>
    <id>http://ssk7833.github.io/blog/2015/07/12/facebook-graph-api-returns-language-specific-name/</id>
    <published>2015-07-12T10:49:43.000Z</published>
    <updated>2016-01-22T02:14:48.886Z</updated>
    <content type="html"><![CDATA[<p>玩 Facebook Graph API 玩了一陣子才發現回傳的姓名總是是英文的，才想到若是有回傳中文姓名的需求時該怎麼辦，如此下去一找才發現關鍵字是 <a href="https://www.facebook.com/help/217868321565724" target="_blank" rel="external">Language-specific name</a>，而要如何在 Facebook Graph API 中顯示為中文則可以參考這篇中的 locale：<a href="https://developers.facebook.com/docs/graph-api/using-graph-api/v2.0#readmodifiers" target="_blank" rel="external">Modifying API Requests</a>。</p>
<p>其實只要在 API request 中加上 <code>&amp;locale=zh_TW</code> 即可得到中文姓名，如：<code>me?fields=id,name&amp;locale=zh_TW</code>，只是有趣的是我稍微測了一下 locale 給以開頭 <code>en_</code> 以外的任何值都會取得中文名稱，還以為預設會以英文為主。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>玩 Facebook Graph API 玩了一陣子才發現回傳的姓名總是是英文的，才想到若是有回傳中文姓名的需求時該怎麼辦，如此下去一找才發現關鍵字是 <a href="https://www.facebook.com/help/217868321565724" targe]]>
    </summary>
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Facebook-Graph-API" scheme="http://ssk7833.github.io/blog/tags/Facebook-Graph-API/"/>
    
      <category term="localization" scheme="http://ssk7833.github.io/blog/tags/localization/"/>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Parse.com Cloud Code Hosting 進行 Facebook 登入存取 - 3]]></title>
    <link href="http://ssk7833.github.io/blog/2015/07/02/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-3/"/>
    <id>http://ssk7833.github.io/blog/2015/07/02/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-3/</id>
    <published>2015-07-01T16:11:49.000Z</published>
    <updated>2016-01-22T02:14:48.886Z</updated>
    <content type="html"><![CDATA[<p>繼上一篇成功截取出使用者資料後，發現除了基本資料外，朋友、按讚的資訊等資料其實都抓不出來，原因是因為沒有給予 app 存取這些資訊的權限。要求權限的話可以透過 OAuth 來索取 access token ，其範例網址如下：</p>
<p><code>https://www.facebook.com/dialog/oauth?client_id={appId}&amp;redirect_uri={redirectURI}</code></p>
<p><img src="/blog/images/profile.png" alt="Profile" title="Profile"><br><img src="/blog/images/profile02.png" alt="Profile details" title="Profile Details"></p>
<p>這是一個截取基本權限的網址，appId 指的是每一個 app 獨立的 ID，而 redirectURI 是當 OAuth 通過後，會送發一串 code 到這個 redirectURI 去，而若需要要求其他權限，可以增加 scope 屬性如下：</p>
<p><code>https://www.facebook.com/dialog/oauth?client_id={appId}&amp;redirect_uri={redirectURI}&amp;scope={accessPermissions}</code></p>
<p>這個 scope 以逗號作為分隔，填在裡面的將會在 Facebook dialog 中要求權限。</p>
<p><img src="/blog/images/user_friends.png" alt="Profile with friends" title="Profile with friends"><br><img src="/blog/images/user_friends02.png" alt="Profile with friends details" title="Profile with friends details"></p>
<p>講了這麼多，但以<a href="http://north.logdown.com/posts/280761-using-parsecom-cloud-code-hosting-to-log-in-with-facebook" target="_blank" rel="external">第一篇</a>中使用了<a href="https://github.com/ParsePlatform/parse-facebook-user-session" target="_blank" rel="external">parse-facebook-user-session</a>該怎麼修改呢？稍微翻了它的 source code 後發現它在實作上並沒有保留 scope 欄位，因此我便把 scope 加上去了，可以由此瀏覽：<a href="https://github.com/ssk7833/parse-facebook-user-session" target="_blank" rel="external">parse-facebook-user-session</a><br><strong>UPDATE：</strong>原 repository 已經將此功能 merge上 去，直接使用原本的即可</p>
<p>使用方式的話則與先前的沒什麼差別，只是可以選擇多填一個 scope 欄位，範例如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">app</span><span class="class">.use</span>(<span class="function">parseFacebookUserSession</span>(&#123;</span><br><span class="line">  <span class="attribute">clientId</span>: <span class="string">'YOUR_FB_CLIENT_ID'</span>,</span><br><span class="line">  <span class="attribute">appSecret</span>: <span class="string">'YOUR_FB_APP_SECRET'</span>,</span><br><span class="line">  <span class="attribute">redirectUri</span>: <span class="string">'/login'</span>,</span><br><span class="line">  <span class="attribute">scope</span>: <span class="string">'user_friends,user_likes'</span>, <span class="comment">// 要求friends與like資訊</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p>
<p>至於有哪些權限可以要求，可以當<a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="external">https://developers.facebook.com/tools/explorer/</a>中，點選 Get Access Token 來參考，並且在下面做測試。</p>
<p>不過要注意的有像是 <code>user_friends</code> 這項，如果在 API v2.0 以上的版本上要求資訊的話，只會列出同樣有授權此 app 的好友出來，開了幾個 test users 測試的確如此：</p>
<p>很可憐沒有朋友授權此 APP：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">id</span>": <span class="value"><span class="string">"104342733239984"</span></span>,</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"Hello world"</span></span>,</span><br><span class="line">  "<span class="attribute">friends</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">data</span>": <span class="value">[]</span>,</span><br><span class="line">    "<span class="attribute">summary</span>": <span class="value">&#123;</span><br><span class="line">      "<span class="attribute">total_count</span>": <span class="value"><span class="number">1</span></span><br><span class="line">    </span>&#125;</span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到 summary 中，total_count 為 1，但 data 中無資料。</p>
<p>有朋友也授權此 APP：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">id</span>": <span class="value"><span class="string">"1421116644879628"</span></span>,</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"Doraemon Cat"</span></span>,</span><br><span class="line">  "<span class="attribute">friends</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">data</span>": <span class="value">[</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Open Graph Test User"</span></span>,</span><br><span class="line">        "<span class="attribute">id</span>": <span class="value"><span class="string">"1414470195545509"</span></span><br><span class="line">      </span>&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Monkey D Luffy"</span></span>,</span><br><span class="line">        "<span class="attribute">id</span>": <span class="value"><span class="string">"100347703641647"</span></span><br><span class="line">      </span>&#125;</span><br><span class="line">    ]</span>,</span><br><span class="line">    "<span class="attribute">paging</span>": <span class="value">&#123;</span><br><span class="line">      "<span class="attribute">next</span>": <span class="value"><span class="string">"https://graph.facebook.com/1421116644879628/friends?limit=25&amp;offset=25&amp;__after_id=enc_AdAMpWdRxSLZAvND6bEd0htyyGsZAZBvzP6jzoAIZBKS9EiBSndZCNZC3S1AC5TEYchbuuBSV0xvg7ziwO4Cdt843yZApF"</span></span><br><span class="line">    </span>&#125;</span>,</span><br><span class="line">    "<span class="attribute">summary</span>": <span class="value">&#123;</span><br><span class="line">      "<span class="attribute">total_count</span>": <span class="value"><span class="number">2</span></span><br><span class="line">    </span>&#125;</span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到此 test user 有兩個朋友也都有安裝此 app。</p>
<p>至於怎麼得到 test user 的 access token，我是利用 Parse.com 的 API Console，Endpoint 填入 users 且 Use Master Key 改成 Yes，send request 後即可在 response 中看到 access token，即可複製此 token 到 <a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="external">https://developers.facebook.com/tools/explorer/</a> 中做測試，如下圖。</p>
<p><img src="/blog/images/APIconsole02.png" alt="API console" title="API console"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>繼上一篇成功截取出使用者資料後，發現除了基本資料外，朋友、按讚的資訊等資料其實都抓不出來，原因是因為沒有給予 app 存取這些資訊的權限。要求權限的話可以透過 OAuth 來索取 access token ，其範例網址如下：</p>
<p><code>https://www]]>
    </summary>
    
      <category term="CloudCode" scheme="http://ssk7833.github.io/blog/tags/CloudCode/"/>
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Parse.com" scheme="http://ssk7833.github.io/blog/tags/Parse-com/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Parse.com Cloud Code Hosting 進行 Facebook 登入存取 - 2]]></title>
    <link href="http://ssk7833.github.io/blog/2015/06/20/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-2/"/>
    <id>http://ssk7833.github.io/blog/2015/06/20/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-2/</id>
    <published>2015-06-20T15:43:39.000Z</published>
    <updated>2016-01-22T02:14:48.886Z</updated>
    <content type="html"><![CDATA[<p>延續上一篇，成功使用 Facebook 登入 Parse.com 的使用者資訊後，接著就是怎麼從使用者資訊中取得 Facebook 的資料了。</p>
<p><img src="/blog/images/user.png" alt="User" title="User"><br>以上圖的 Facebook Test Users 為例，建立完的使用者可以由 Parse.com 的 Data 中看到，不過 authData 卻只顯示了 Facebook 的 ID，因此我們可以先透過 API Console 來對 users 作存取，這裡要注意的是 Use Master Key 記得要選 Yes，否則會沒有權限看 authData 的內容；users 後面的參數為 objectId，若不放置則會列出全部符合的資料。<br><img src="/blog/images/APIconsole.png" alt="API console" title="API console"><br>在 Response 中的內容：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;</span><br><span class="line">  <span class="string">"authData"</span>: <span class="collection">&#123;</span><br><span class="line">    <span class="string">"facebook"</span>: <span class="collection">&#123;</span><br><span class="line">      // 不要想對這組 access_token 亂來，因為是 test user XD</span><br><span class="line">      <span class="string">"access_token"</span>: <span class="string">"CAAMCk3Pv7SkBAEjfvRaG4SrC8k3CXak1843iisuUJiIK9gYV9PNFRraXi9gxYVBJO83zsvzFO91dcACevKwinxAVPNCUeEv0UPWsmv7DZBlqPjtZCCnEBcMBKpU7ikoj9OKo1ZCwzi3wmTycsB2avHT1SiBxLUF5ZAHTaT9XDNtz1phGZCk0lltOY5agj0JGQ9ezNGmOsvUmdpKFASx5K"</span>,</span><br><span class="line">      <span class="string">"expiration_date"</span>: <span class="string">"2015-08-15T17:52:46.495Z"</span>,</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"118563748477765"</span></span><br><span class="line">    &#125;</span></span><br><span class="line">  &#125;</span>,</span><br><span class="line">  <span class="string">"createdAt"</span>: <span class="string">"2015-06-16T17:52:48.623Z"</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Super Mario"</span>,</span><br><span class="line">  <span class="string">"objectId"</span>: <span class="string">"wmVm7Qb1Fc"</span>,</span><br><span class="line">  <span class="string">"sessionToken"</span>: <span class="string">"jEKKzfbDcIN0CmBIvsdZR9Aoc"</span>,</span><br><span class="line">  <span class="string">"updatedAt"</span>: <span class="string">"2015-06-17T07:57:08.934Z"</span>,</span><br><span class="line">  <span class="string">"username"</span>: <span class="string">"3GwDpgmuqmfnyGYINNI27W9fO"</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>已經知道存放在哪裡之後，接下來就是利用 cloud code function 建立資料存取了！在這裡我用名字與圖片作範例，參考了 <a href="http://stackoverflow.com/a/16445118/4968420" target="_blank" rel="external">stackoverflow 這篇的回答</a>稍微修改了一下：<br>當然，別忘記 userMasterKey…<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Parse.Cloud.define(<span class="string">"facebook"</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> </span>&#123;</span><br><span class="line">  Parse.Cloud.useMasterKey();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Parse.Query(Parse.User).<span class="keyword">get</span>(request.params.user_id).then(<span class="function"><span class="keyword">function</span><span class="params">(user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> authData = user.<span class="keyword">get</span>(<span class="string">"authData"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Quit early for users who aren't linked with Facebook</span></span><br><span class="line">    <span class="keyword">if</span> (authData === <span class="literal">undefined</span> || authData.facebook === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      response.success(<span class="literal">null</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Parse.Cloud.httpRequest(&#123;</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      url: <span class="string">"https://graph.facebook.com/me"</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        access_token: authData.facebook.access_token,</span><br><span class="line">        fields: <span class="string">"name, friends"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(json)</span> </span>&#123;</span><br><span class="line">    response.success(json.data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Promises will let you bubble up any error, similar to a catch statement</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span><br><span class="line">    response.error(error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在 Express 中 call 建立好的 cloud host function：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="keyword">get</span>(<span class="string">'/test'</span>, fbLogin, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = Parse.User.current();</span><br><span class="line">  Parse.Cloud.run(<span class="string">'facebook'</span>, &#123; user_id: user.id &#125;, &#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span> </span>&#123;</span><br><span class="line">      res.send(<span class="string">'Congrats, you are logged in, '</span> + results.name + <span class="string">'!'</span> +  <span class="string">'&lt;img src="https://graph.facebook.com/'</span>+ results.id +<span class="string">'/picture?type=normal"&gt;'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span><br><span class="line">      console.log(<span class="string">"error :"</span> + error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>若是成功的話就能在自己的 URL 中看到如下圖的結果了！<br><img src="/blog/images/facebookSuccess.png" alt="Facebook success" title="Facebook success"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>延續上一篇，成功使用 Facebook 登入 Parse.com 的使用者資訊後，接著就是怎麼從使用者資訊中取得 Facebook 的資料了。</p>
<p><img src="/blog/images/user.png" alt="User" title="User"><]]>
    </summary>
    
      <category term="CloudCode" scheme="http://ssk7833.github.io/blog/tags/CloudCode/"/>
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Parse.com" scheme="http://ssk7833.github.io/blog/tags/Parse-com/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Parse.com Cloud Code Hosting 進行 Facebook 登入存取 - 1]]></title>
    <link href="http://ssk7833.github.io/blog/2015/06/20/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-1/"/>
    <id>http://ssk7833.github.io/blog/2015/06/20/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-1/</id>
    <published>2015-06-20T14:13:10.000Z</published>
    <updated>2016-01-22T02:14:48.886Z</updated>
    <content type="html"><![CDATA[<p><a href="http://parse.com/" target="_blank" rel="external">Parse.com</a> 在 <a href="https://parse.com/docs/tw/js/guide" target="_blank" rel="external">javascript SDK</a> 中提供了使用者的存取，其中包含 Facebook 的整合，但 javascript 終究是前端，有些不想讓 client end知道的還是放在後端處理比較好。然而 Parse.com 所提供的 cloud code 所使用的目前雖是 node.js，會讓開發者很想直接把 javascript SDK 的 Facebook 部分塞進去看能不能跑，乍看之下很合理，但實際上就是不行，因為以 Parse.com Javascript SDK在要求登入時會跳出另一個瀏覽器視窗以要求登入 Facebook 及權限給予，而這個視窗當然沒有辦法在 server end 中呈現並要求 client end 進行認證。</p>
<p>在官方論壇上也有人發表過此問題：<a href="https://www.parse.com/questions/interacting-with-the-facebook-api-in-cloud-code" target="_blank" rel="external">Interacting with the Facebook API in Cloud Code</a><br>所得到的回答是：<br><strong>Unfortunately, the Facebook JavaScript SDK is not made to work outside of a browser, so using it directly from Cloud Code is not supported at the moment.</strong></p>
<p><strong>You can, however, get the authData from the current user in cloud code and use that to make a REST call to Facebook’s graph API manually.</strong></p>
<p>因此我轉而研究使用OAuth方式來登入Facebook，除了跳轉出的頁面比較美觀外（不會產生另一個瀏覽器視窗），也不用擔心暴露資訊給clent end，參考資料有這兩篇：<br><a href="http://sweeteason.pixnet.net/blog/post/40581580-%E7%B6%B2%E7%AB%99%E5%88%A9%E7%94%A8-facebook-%E5%B8%B3%E8%99%9F%E7%99%BB%E5%85%A5-%28%E4%BD%BF%E7%94%A8-oauth%29" target="_blank" rel="external">網站利用 Facebook 帳號登入 (使用 OAuth)</a><br><a href="https://gigenchang.wordpress.com/2014/01/26/10%E5%88%86%E9%90%98%E7%90%86%E8%A7%A3oauth%E5%92%8Cfacebook%E7%99%BB%E5%85%A5%E5%8E%9F%E7%90%86/" target="_blank" rel="external">10分鐘理解OAuth和facebook登入原理</a><br>這篇以python Django framework實作，其實看code好像也蠻容易理解的：<a href="http://nthn.me/posts/2012/facebook-registration.html" target="_blank" rel="external">Ghetto Facebook Registration with Django</a></p>
<p>後來正當我開始打算實作時，我找到了 <a href="https://github.com/ParsePlatform/parse-facebook-user-session" target="_blank" rel="external">parse-facebook-user-session</a> ，原來 Parse.com 早就把這個寫好了，根本不用自己去寫了，只需要按照他的說明一步一步來就行了（吧）！</p>
<p>結果證明事情果然不是我想的這麼簡單，不管怎麼弄就是跳出 <strong>209 invalid session token</strong> ，花了一段時間後找到 Parse.com 自己發的文章 <a href="https://www.parse.com/tutorials/session-migration-tutorial" target="_blank" rel="external">Session Migration Tutorial</a> ，才知道把這個選項關掉就行了，我花了這麼久到底在幹麻！</p>
<p><img src="/blog/images/userSessions.png" alt="User sessions" title="User sessions"><br>總之，關閉這個選項後就成功了， Parse.com 的資料庫也會成功紀錄登入過的使用者，事情完成一半，其餘的就是登入的使用者資料該怎麼讀取出來了～</p>
<p><strong>UPDATE：</strong>在GitHub上新增了 <a href="https://loginexample.parseapp.com/" target="_blank" rel="external">demo</a>：<a href="https://github.com/ssk7833/Parse-Facebook-OAuth-login-example" target="_blank" rel="external">GitHub</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://parse.com/" target="_blank" rel="external">Parse.com</a> 在 <a href="https://parse.com/docs/tw/js/guide" target="_blank" r]]>
    </summary>
    
      <category term="CloudCode" scheme="http://ssk7833.github.io/blog/tags/CloudCode/"/>
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Parse.com" scheme="http://ssk7833.github.io/blog/tags/Parse-com/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[將 cd 跟 ls 合併為一個指令]]></title>
    <link href="http://ssk7833.github.io/blog/2011/01/18/combine-cd-and-ls-into-one-command/"/>
    <id>http://ssk7833.github.io/blog/2011/01/18/combine-cd-and-ls-into-one-command/</id>
    <published>2011-01-17T17:45:05.000Z</published>
    <updated>2016-01-07T16:47:05.000Z</updated>
    <content type="html"><![CDATA[<p>用 alias, script, unix programing 都無法達到更換資料夾後並印出資料夾內容的功能<br>最後測試只有 function 可以。</p>
<p>若是 bash shell，將 .bashrc 增加下列程式碼後重新載入 .bashrc 即可。</p>
<pre><code>cds() { cd &quot;$1&quot;; ls; }
</code></pre><p>接著只要執行 cds 指令即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>用 alias, script, unix programing 都無法達到更換資料夾後並印出資料夾內容的功能<br>最後測試只有 function 可以。</p>
<p>若是 bash shell，將 .bashrc 增加下列程式碼後重新載入 .bashrc 即可。</p]]>
    </summary>
    
      <category term="shell script" scheme="http://ssk7833.github.io/blog/tags/shell-script/"/>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
  </entry>
  
</feed>
