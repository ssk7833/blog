<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北風筆記</title>
  <subtitle>紀錄一些學習心得、過程及日常</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://ssk7833.github.io/blog/"/>
  <updated>2016-08-02T08:04:58.689Z</updated>
  <id>http://ssk7833.github.io/blog/</id>
  
  <author>
    <name>North</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用 Google Chrome 作為 kiosk 應用時的設定項目</title>
    <link href="http://ssk7833.github.io/blog/2016/08/02/setup-Google-Chrome-as-kiosk-application-settings/"/>
    <id>http://ssk7833.github.io/blog/2016/08/02/setup-Google-Chrome-as-kiosk-application-settings/</id>
    <published>2016-08-02T08:03:45.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄一下利用 Google Chrome 作為 kiosk 時，需要注意的地方：<br>本文所使用的 Google Chrome 版本：52.0.2743.82 m</p>
<h2 id="鎖定右鍵內容"><a href="#鎖定右鍵內容" class="headerlink" title="鎖定右鍵內容"></a>鎖定右鍵內容</h2><p>當觸控啟用時，預設長按螢幕就會觸發滑鼠右鍵的功能表。如同一般網頁防止滑鼠右鍵內容一樣，於 HTML 中加入 Javascript 來防止右鍵清單的跳出。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'contextmenu'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; e.preventDefault(); &#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="禁止文字被選取"><a href="#禁止文字被選取" class="headerlink" title="禁止文字被選取"></a>禁止文字被選取</h2><p>當長按螢幕時會觸發與滑鼠左鍵按住拖曳來選取文字同樣的效果，如下圖中間搜尋視窗：<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/01.png" alt="長按螢幕字串時" title="長按螢幕字串時"><br>若不想被選取，可以利用 CSS 處理，根據自己不想被選的部分作出篩選，下方範例以整份 HTML 當作範例：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-user-select</span>:<span class="value"> none</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="關閉觸控滑動拖曳到上一頁／下一頁"><a href="#關閉觸控滑動拖曳到上一頁／下一頁" class="headerlink" title="關閉觸控滑動拖曳到上一頁／下一頁"></a>關閉觸控滑動拖曳到上一頁／下一頁</h2><p>若有超連結會導到其他頁面時，導向其他頁面後按著螢幕並往左或往右滑動，可能會觸發如手持裝置般的上下頁功能：<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/02.png" alt="當有歷史分頁時，碰觸畫面並往右滑將會回到上一頁" title="當有歷史分頁時，碰觸畫面並往右滑將會回到上一頁"><br>解決方式有兩種：</p>
<ol>
<li><p>利用 CSS 去解決：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">touch-action</span>:<span class="value"> none</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-user-drag</span>:<span class="value"> none</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>但有缺點！</strong>若在 HTML 內容中有需要橫向卷軸的部分，此橫向卷軸部分不可能套用上方 CSS，需再另外對 <code>touch-action</code> 及 <code>-webkit-user-drag</code> 允許橫向操作，而若允許之後，在此橫向卷軸部分拖曳到最頂／底端時再繼續拖曳，依然會觸發道上下頁的功能。</p>
</li>
<li><p>修改 Chrome flags 內的設定：<br>開啟 Chrome 新分頁，在網址列輸入 <code>chrome://flags</code> 並找到 <code>橫向捲動紀錄導覽 Mac, Windows, Linux, Chrome OS, Android</code>，預設為<code>已啟用</code>，把它改成<code>已停用</code>。<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/03.png" alt="更改設定為已停用" title="更改設定為已停用"><br>如此一來連 CSS 也不用寫了，缺點就是這個為全域設定，改成停用後任何網站都不能使用，不過既然是 kiosk，改成已停用理應影響不大。</p>
</li>
</ol>
<hr>
<p>接下來設定皆與命令列(command line)參數有關，使用方法有：</p>
<ol>
<li>利用建立捷徑的方式來填參數：<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/04.png" alt="利用建立捷徑方式填參數" title="利用建立捷徑方式填參數"></li>
<li>直接開啟執行(Windows + R)並輸入指令及參數：<br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/05.png" alt="在執行中輸入" title="在執行中輸入"></li>
<li><p>於命令提示字元(cmd)中執行其中一行：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">start</span> chrome</span><br></pre></td></tr></table></figure>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"C:<span class="command">\Program</span> Files (x86)<span class="command">\Google</span><span class="command">\Chrome</span><span class="command">\Application</span><span class="command">\chrome</span>.exe"</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="開啟固定位址的內容"><a href="#開啟固定位址的內容" class="headerlink" title="開啟固定位址的內容"></a>開啟固定位址的內容</h2><p>開啟時直接進入某個網頁。<br>在參數列加上網址即可，如 <code>start chrome ssk7833.github.io</code>。<br>若是本機上的靜態檔案則須加上 <code>file:///</code>，如 <code>start chrome file:///C:/dist/index.html</code></p>
<h2 id="運行-kiosk-模式"><a href="#運行-kiosk-模式" class="headerlink" title="運行 kiosk 模式"></a>運行 kiosk 模式</h2><p>開啟時直接進入全螢幕模式，且無法利用 <code>F11</code> 跟 <code>ESC</code> 來離開全螢幕模式，可以用 <code>ALT + F4</code> 或 <code>CTRL + W</code> 來關閉。<br>在參數列加上 <code>--kiosk</code> 即可。</p>
<h2 id="關閉詢問「您要翻譯這個網頁嗎？」"><a href="#關閉詢問「您要翻譯這個網頁嗎？」" class="headerlink" title="關閉詢問「您要翻譯這個網頁嗎？」"></a>關閉詢問「您要翻譯這個網頁嗎？」</h2><p><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/06.png" alt="您要翻譯這個網頁嗎？" title="您要翻譯這個網頁嗎？"><br>使用 kiosk 模式後，依然可能會因 HTML 撰寫或內文而自動跳出這個訊息，在 kiosk 模式這當然是不想要的。<br>在參數列加上 <code>--disable-translate</code> 即可。</p>
<h2 id="允許-Chrome-無視跨來源資源共享-CORS-限制"><a href="#允許-Chrome-無視跨來源資源共享-CORS-限制" class="headerlink" title="允許 Chrome 無視跨來源資源共享(CORS)限制"></a>允許 Chrome 無視跨來源資源共享(CORS)限制</h2><p>如果 kiosk 的內容是靜態網頁而無後台，又需要利用 AJAX 其他地方拿取資料，很可能會在開發時出現這種錯誤：<br><code>XMLHttpRequest cannot load https://www.example.com. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.</code><br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/07.png" alt="CORS 錯誤" title="CORS 錯誤"><br>若不想額外增設後台可在參數列加上 <code>--disable-web-security</code>，但加上後錯誤會依然存在，需配何下方參數才能正常運行。</p>
<h2 id="開啟新的使用者資料夾來放置內容"><a href="#開啟新的使用者資料夾來放置內容" class="headerlink" title="開啟新的使用者資料夾來放置內容"></a>開啟新的使用者資料夾來放置內容</h2><p>如同一台電腦支援多個 Chrome 使用者一樣，另外開一個額外的資料夾來放置 user data，使其不會各自汙染。<br>在參數列加上 <code>--user-data-dir=&quot;C:/Chrome dev session&quot;</code> 即可，<code>C:/Chrome dev session</code> 即是接下來這個 Chrome 視窗將會存放資訊的位置，此資料夾無需自行建立，系統會自動幫忙建立。<br><code>--disable-web-security</code> 搭配 <code>--user-data-dir=&quot;C:/Chrome dev session&quot;</code> 即可無視 CORS 限制，但使用上也須注意是否有其他安全性的疑慮，不過既然都是 kiosk 了，理應不太會有這個問題。</p>
<h2 id="移除上方跳出的警告訊息"><a href="#移除上方跳出的警告訊息" class="headerlink" title="移除上方跳出的警告訊息"></a>移除上方跳出的警告訊息</h2><p>前兩項做到後，其實會跳出此訊息：<code>您正在使用不受支援的命令列標識：--disable-web-security。這可能會危及穩定性與安全性。</code><br><img src="/blog/images/2016-08-02-setup-Google-Chrome-as-kiosk-application-settings/08.png" alt="--disable-web-security 警告" title="--disable-web-security 警告"><br>在 kiosk 模式當然不可能放出此行，可以在參數列加上 <code>--test-type</code> 即可。<del>為什麼這幾個不一次講完呢？</del></p>
<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>上述這幾個的參數組合技已經蠻夠用的，我目前下的指令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.exe <span class="string">"file:///C:/dist/index.html"</span> --user-data-dir=<span class="string">"C:/Chrome dev session"</span> --disable-web-security --test-type --disable-translate --kiosk</span><br></pre></td></tr></table></figure></p>
<p>為什麼要用指令呢？因為能撰寫於 batch 中來達到部分的自動化。<br>不確定某些指令是否可能有潛藏的風險，若有思慮不周的地方也請您分享！</p>
<p>參考資料：</p>
<ol>
<li><a href="http://askubuntu.com/a/310521" target="_blank" rel="external">Google Chrome browser, how to permanently disable this disturbing toolbar?</a></li>
<li><a href="http://stackoverflow.com/a/24018881/4968420" target="_blank" rel="external">Protractor error message “unsupported command-line flag” in Chrome?</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄一下利用 Google Chrome 作為 kiosk 時，需要注意的地方：&lt;br&gt;本文所使用的 Google Chrome 版本：52.0.2743.82 m&lt;/p&gt;
&lt;h2 id=&quot;鎖定右鍵內容&quot;&gt;&lt;a href=&quot;#鎖定右鍵內容&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="chrome" scheme="http://ssk7833.github.io/blog/tags/chrome/"/>
    
      <category term="kiosk" scheme="http://ssk7833.github.io/blog/tags/kiosk/"/>
    
      <category term="windows" scheme="http://ssk7833.github.io/blog/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>當有雙螢幕時，讓觸控螢幕在正確螢幕上觸控</title>
    <link href="http://ssk7833.github.io/blog/2016/07/15/let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/"/>
    <id>http://ssk7833.github.io/blog/2016/07/15/let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/</id>
    <published>2016-07-15T02:28:20.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>最近多了一台觸控螢幕，接到主機後從原本的雙螢幕變成的三螢幕，其中一個就是這個觸控螢幕。<br>我的螢幕設定是使用延伸模式，主螢幕為原本雙螢幕的其中一個，加入第三個螢幕時一樣採取延伸模式。而在這個觸控螢幕在插上 USB 線後且安裝完驅動程式後，觸控螢幕就像觸控板一樣可以點擊來觸發滑鼠事件，但對應到的點擊區域卻是我的主螢幕，這完全沒道理啊！</p>
<p>本以為是驅動程式的問題，其實不是，而找到的解法有兩種：</p>
<ol>
<li><p>將主螢幕設定到第三個螢幕，也就是觸控螢幕。<br><strong>這個方法不好！</strong>雖可以解決問題，但若像我一樣不希望第三個螢幕變成主螢幕的話就無法使用。</p>
</li>
<li><p>將觸控螢幕的對應到正確的螢幕上。<br>其實就是把觸控螢幕當成一個螢幕加上觸控板，若用這樣的方式去想就知道該怎麼解了，設定方法如下。</p>
</li>
</ol>
<p>打開控制台搜尋 Tablet PC 設定，或到開始功能表中直接搜尋 Tablet PC 設定。<br><img src="/blog/images/2016-07-15-let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/01.png" alt="控制台中的 Tablet PC 設定" title="控制台中的 Tablet PC 設定"><br><img src="/blog/images/2016-07-15-let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/02.png" alt="開始功能表搜尋 Tablet PC 設定" title="開始功能表搜尋 Tablet PC 設定"></p>
<p>直接點選設定中的設定。<br><img src="/blog/images/2016-07-15-let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/03.png" alt="Tablet PC 設定，點選設定" title="Tablet PC 設定，點選設定"></p>
<p>接著所有螢幕會變成白色，而其中一個將會顯示以下訊息，按 Enter 直到正確對應的螢幕上再觸控螢幕即可。<br><img src="/blog/images/2016-07-15-let-touch-screen-with-multiple-monitors-works-on-the-right-monitor/04.png" alt="螢幕全白顯示，並跳出提示訊息" title="螢幕全白顯示，並跳出提示訊息"></p>
<p>參考資料：</p>
<ol>
<li><a href="http://superuser.com/a/969683/617008" target="_blank" rel="external">Windows Touch Screen With Multiple Monitors Puts Cursor On Wrong Monitor - Super User</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近多了一台觸控螢幕，接到主機後從原本的雙螢幕變成的三螢幕，其中一個就是這個觸控螢幕。&lt;br&gt;我的螢幕設定是使用延伸模式，主螢幕為原本雙螢幕的其中一個，加入第三個螢幕時一樣採取延伸模式。而在這個觸控螢幕在插上 USB 線後且安裝完驅動程式後，觸控螢幕就像觸控板一樣可以點擊來
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="windows" scheme="http://ssk7833.github.io/blog/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>在 Logdown 上移除右上方 dashboard</title>
    <link href="http://ssk7833.github.io/blog/2016/06/27/remove-dashboard-button-in-Logdown-page/"/>
    <id>http://ssk7833.github.io/blog/2016/06/27/remove-dashboard-button-in-Logdown-page/</id>
    <published>2016-06-27T06:55:30.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>最近朋友想開個部落格試試，我推薦了 Logdown、Blogger 或是全自己來的 GitHub Pages，最後友人選擇了 Logdown，然而友人跟我說：「Logdown 有個缺點，就是右上方的 Dashboard 很醜，要是能拿掉就太好了。」於是為了讓友人安心使用，我便看了一下 Logdown 原始碼，發現其實要拿掉或隱藏 Dashboard 並不困難。<br><img src="/blog/images/2016-06-27-hide-dashboard-button-in-Logdown-page/01.png" alt="被嫌醜的 Dashboard" title="被嫌醜的 Dashboard"></p>
<p>到自己的 <a href="http://logdown.com/dashboard" target="_blank" rel="external">Dashboard</a> 中點選 <code>Blog 設定</code>，接著點選<code>佈景主題</code>分頁，點選<code>編輯 HTML</code>，如下圖位置。<br><img src="/blog/images/2016-06-27-hide-dashboard-button-in-Logdown-page/02.png" alt="Blog 設定→佈景主題→編輯 HTML" title="Blog 設定→佈景主題→編輯 HTML"></p>
<p>在最下方 <code>&lt;/body&gt;&lt;/html&gt;</code> 前面空白處插入以下程式碼：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">'iframe[src="http://logdown.com/pages/top_controls"]'</span>);</span><br><span class="line">    elem.parentNode.removeChild(elem);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>插入後呈現如下：<br><img src="/blog/images/2016-06-27-hide-dashboard-button-in-Logdown-page/03.png" alt="插入 javascript" title="插入 javascript"></p>
<p>接著重新開啟自己的 Logdown 看看就能看到成果囉！</p>
<p>※此段語法不適用於 <a href="http://caniuse.com/#search=DOMContentLoaded" target="_blank" rel="external">IE8</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近朋友想開個部落格試試，我推薦了 Logdown、Blogger 或是全自己來的 GitHub Pages，最後友人選擇了 Logdown，然而友人跟我說：「Logdown 有個缺點，就是右上方的 Dashboard 很醜，要是能拿掉就太好了。」於是為了讓友人安心使用，我
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
      <category term="logdown" scheme="http://ssk7833.github.io/blog/tags/logdown/"/>
    
  </entry>
  
  <entry>
    <title>取得 Parse server 推播通知送出狀態</title>
    <link href="http://ssk7833.github.io/blog/2016/06/06/retrieve-push-status/"/>
    <id>http://ssk7833.github.io/blog/2016/06/06/retrieve-push-status/</id>
    <published>2016-06-06T03:02:00.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://parse.com/docs/rest/guide" target="_blank" rel="external">Parse REST API Developers Guide</a> 中，可以在 Quick Reference 看到所有使用的方法。在 Push Notification 分類中只有 POST 的方法，不像 Installations 可以透過 GET 方法到 <code>/installations/&lt;objectId&gt;</code> 來獲取已安裝裝置的資訊；然而若需要去擷取推播傳遞的狀態時，可以利用存於 mongoDB 中的 _PushStatus 來取得資訊，既然 push 的方法只有 POST，就繞個路把 _PushStatus 當成 Objects 來處理，Objects 的使用方法就多了。</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>HTTP Verb</th>
<th>Functionality</th>
</tr>
</thead>
<tbody>
<tr>
<td>/classes/&lt;className&gt;</td>
<td>POST</td>
<td><a href="https://parse.com/docs/rest/guide#objects-creating-objects" target="_blank" rel="external">Creating Objects</a></td>
</tr>
<tr>
<td>/classes/&lt;className&gt;/&lt;objectId&gt;</td>
<td>GET</td>
<td><a href="https://parse.com/docs/rest/guide#objects-retrieving-objects" target="_blank" rel="external">Retrieving Objects</a></td>
</tr>
<tr>
<td>/classes/&lt;className&gt;/&lt;objectId&gt;</td>
<td>PUT</td>
<td><a href="https://parse.com/docs/rest/guide#objects-updating-objects" target="_blank" rel="external">Updating Objects</a></td>
</tr>
<tr>
<td>/classes/&lt;className&gt;</td>
<td>GET</td>
<td><a href="https://parse.com/docs/rest/guide#queries" target="_blank" rel="external">Queries</a></td>
</tr>
<tr>
<td>/classes/&lt;className&gt;/&lt;objectId&gt;</td>
<td>DELETE</td>
<td><a href="https://parse.com/docs/rest/guide#objects-deleting-objects" target="_blank" rel="external">Deleting Objects</a></td>
</tr>
</tbody>
</table>
<p>要取得推播通知狀態則是利用上表兩個 GET 的功能，若指定 objectId 則只回傳 objectId 那筆資訊，若不指定則回傳最近的幾筆資訊。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: parseAppId"</span> \</span><br><span class="line">  -H <span class="string">"X-Parse-Master-Key: parseMasterKey"</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/classes/_PushStatus/</span><br></pre></td></tr></table></figure>
<p>正常下會得到：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"results"</span>:[</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"xzBThEHVyc"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-19T10:00:59.827Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"VGo2rHGXjK"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-19T10:01:59.790Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"9rnRdakYzD"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-19T10:04:59.798Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"7pde1mbqzY"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-19T13:00:09.126Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"M2PmduKLH0"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T02:26:59.997Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"URiaNdDBps"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T02:35:59.991Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"eN8R4gVDEx"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T02:37:00.077Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"KRBif8iM6u"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T03:13:59.892Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"BP5FYt2GVX"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-20T03:24:59.846Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"1nSmDpZ3Yz"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-24T02:55:01.595Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"FDFjpei6rP"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-24T02:58:01.327Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"hTkD1EKO9U"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-24T03:02:01.608Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"TDT2bONPEF"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-24T07:51:02.636Z"</span>,…&#125;,</span><br><span class="line">    &#123;<span class="string">"ACL"</span>:&#123;&#125;, <span class="string">"objectId"</span>: <span class="string">"tGuEYvGLbp"</span>, <span class="string">"createdAt"</span>: <span class="string">"2016-05-25T07:35:20.034Z"</span>,…&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而若加上 objectId，則會取得此 objectId 單筆資訊：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: parseAppId"</span> \</span><br><span class="line">  -H <span class="string">"X-Parse-Master-Key: parseMasterKey"</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/classes/_PushStatus/tGuEYvGLbp</span><br></pre></td></tr></table></figure>
<p>正常下會得到：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ACL"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"objectId"</span>: <span class="string">"tGuEYvGLbp"</span>,</span><br><span class="line">  <span class="string">"createdAt"</span>: <span class="string">"2016-05-25T07:35:20.034Z"</span>,</span><br><span class="line">  <span class="string">"pushTime"</span>: <span class="string">"2016-05-25T07:35:20.034Z"</span>,</span><br><span class="line">  <span class="string">"query"</span>: <span class="string">"&#123;\"deviceType\":&#123;\"$in\":[\"ios\"]&#125;,\"gender\":&#123;\"$in\":[\"female\"]&#125;&#125;"</span>,</span><br><span class="line">  <span class="string">"payload"</span>: <span class="string">"&#123;\"alert\":\"All work and no play makes Jack a dull boy.\"&#125;"</span>,</span><br><span class="line">  <span class="string">"source"</span>: <span class="string">"rest"</span>,</span><br><span class="line">  <span class="string">"status"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">  <span class="string">"numSent"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"pushHash"</span>: <span class="string">"cd3f8c70e6cfecc66ab69a0ee4c3c564"</span>,</span><br><span class="line">  <span class="string">"updatedAt"</span>: <span class="string">"2016-05-25T07:35:22.600Z"</span>,</span><br><span class="line">  <span class="string">"numFailed"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"sentPerType"</span>: &#123;</span><br><span class="line">    <span class="string">"ios"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>兩者都可取得 <code>numSent</code>, <code>numFailed</code> 及 <code>sentPerType</code>，可利於推播通知的統計分析。</p>
<p>參考資料：</p>
<ol>
<li><a href="https://parse.com/docs/rest/guide" target="_blank" rel="external">REST API Developers Guide | Parse</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;https://parse.com/docs/rest/guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parse REST API Developers Guide&lt;/a&gt; 中，可以在 Quick Reference 看到
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="Parse server" scheme="http://ssk7833.github.io/blog/tags/Parse-server/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="push notification" scheme="http://ssk7833.github.io/blog/tags/push-notification/"/>
    
  </entry>
  
  <entry>
    <title>隱藏 console 中的 source 來源</title>
    <link href="http://ssk7833.github.io/blog/2016/05/25/hide-source-of-log-messages-in-console/"/>
    <id>http://ssk7833.github.io/blog/2016/05/25/hide-source-of-log-messages-in-console/</id>
    <published>2016-05-25T07:02:30.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>先前有發現 Facebook 在開發人員工具的 console 中最右邊不會顯示 log 的來源行數，覺得神奇，但並沒有深入了解如何實作此效果。而最近看到有人提問同樣的問題，同樣以 Facebook 的 console 為例來發問，激起了我的求知慾望。<br><img src="/blog/images/2016-05-25-hide-source-of-log-messages-in-console/01.png" alt="Facebook 的 console，最右端沒顯示來源" title="Facebook 的 console，最右端沒顯示來源"><br><img src="/blog/images/2016-05-25-hide-source-of-log-messages-in-console/02.png" alt="正常呼叫 console.log 時，最右端會顯示來源" title="正常呼叫 console.log 時，最右端會顯示來源"></p>
<p>單純要查到此功能似乎不難，剛好在四個月前有人在 <a href="http://stackoverflow.com/questions/34762774/how-to-hide-source-of-log-messages-in-console" target="_blank" rel="external">stackoverflow</a> 問了同樣的問題，而方法就是利用下方寫法即可：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>, <span class="string">"Hello world!"</span>));</span><br></pre></td></tr></table></figure></p>
<p>看到 Facebook 將 console 的預設樣式改掉，因此我也試著去看該怎麼做，果然樣式是用 CSS 去設定，而要設定的部分前面記得放個 <code>%c</code>，若有多段需要不同樣式則放入多個 <code>%c</code>，每個 <code>%c</code> 都是獨立的，樣式不會互相覆蓋；而 CSS 以額外參數的方式傳遞，若有 N 個 <code>%c</code>，則需要另外傳入 N 個參數。範例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cRed color"</span>, <span class="string">"color:red;"</span>); <span class="comment">// 顯示為紅色字</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cRed color with blue background"</span>, <span class="string">"color:red; background:blue;"</span>); <span class="comment">// 顯示紅色字與藍色背景</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cRed color and %cgreen color"</span>, <span class="string">"color:red;"</span>, <span class="string">"color:green;"</span>); <span class="comment">// 顯示紅色字即綠色字</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cRed color%c and %cgreen color"</span>, <span class="string">"color:red;"</span>, <span class="string">""</span>, <span class="string">"color:green;"</span>); <span class="comment">// 顯示紅色字即綠色字，將 "and" 改回預設樣式</span></span><br></pre></td></tr></table></figure></p>
<p>兩者結合起來的話，一樣將樣式參數放於之後：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>, <span class="string">"%cRed color"</span>, <span class="string">"color:red;"</span>));</span><br></pre></td></tr></table></figure></p>
<p>因此我寫了一個範例，可以開啟開發人員工具的 console 觀看結果：</p>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="JKPYoX" data-default-tab="js,result" data-user="ssk7833" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/JKPYoX/" target="_blank" rel="external">Custom console log messages</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>好，問題解決了！<br>但痛苦來臨，我走不出自己這關 XD，深問 why？為什麼 <code>setTimeout(console.log.bind(console, &quot;something&quot;))</code> 能有如此魔力使來源行數隱藏起來？式了很多方式去包裝 console 還是徒勞無功，且 setTimeout 好像是必要的？自行寫了一個具有 callback function 的 function 也無法達到一樣效果。</p>
<p>後來想到或許能在 stack trace 中得到一點線索，因此改下 <code>console.error</code> 試試看，結果還是深深地打了我一巴掌，stack trace 竟然完全是空的。<br><img src="/blog/images/2016-05-25-hide-source-of-log-messages-in-console/03.png" alt="比較 error 上下的差別" title="比較 error 上下的差別"></p>
<p>有人跟我說，會不會是 call 到 browser 的 console 再從 console 下 command 才會這樣顯示出來？結果也不是，也是跳出了來源。<br><img src="/blog/images/2016-05-25-hide-source-of-log-messages-in-console/04.png" alt="使用開發者工具下指令結果一樣" title="使用開發者工具下指令結果一樣"></p>
<p>真是奇怪啊！百思不得其解後，決定先「不求甚解」了，等待哪一天突然想到再補充吧。</p>
<p>2016-05-26 Update:</p>
<p>最後跑去 <a href="http://stackoverflow.com/q/37430531/4968420" target="_blank" rel="external">stackoverflow</a> 問了，也有人回答了讓我似懂非懂的答案，因有些不確定性的部分並沒提到，總之可能就先這樣，哪天想到再繼續研究。</p>
<p>參考資料：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/34762774/how-to-hide-source-of-log-messages-in-console" target="_blank" rel="external">How to hide source of Log messages in Console?</a></li>
<li><a href="http://stackoverflow.com/questions/7505623/colors-in-javascript-console" target="_blank" rel="external">Colors in JavaScript console</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference" target="_blank" rel="external">Console API Reference | Web Tools - Google Developers</a></li>
<li><a href="https://github.com/DeveloperToolsWG/console-object/blob/master/api.md#format-specifiers" target="_blank" rel="external">Format Specifiers</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先前有發現 Facebook 在開發人員工具的 console 中最右邊不會顯示 log 的來源行數，覺得神奇，但並沒有深入了解如何實作此效果。而最近看到有人提問同樣的問題，同樣以 Facebook 的 console 為例來發問，激起了我的求知慾望。&lt;br&gt;&lt;img sr
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Parse 推播回傳 _pushStatus 的 id</title>
    <link href="http://ssk7833.github.io/blog/2016/05/20/Parse-push-return-pushStatus-objectId/"/>
    <id>http://ssk7833.github.io/blog/2016/05/20/Parse-push-return-pushStatus-objectId/</id>
    <published>2016-05-20T08:28:51.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 parse server REST API 的推播功能時，推播成功送到 parse server 只會時回傳 <code>{&quot;result&quot;:true}</code>，只有這資訊對於後台串接 parse server 不是很方便，因缺乏 <code>_pushStatus</code> 中的 id，導致資料送出後就一去無回，不方便針對各個送出到 parse server 的資料做對應。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: parseAppId"</span> \</span><br><span class="line">  -H <span class="string">"X-Parse-Master-Key: parseMasterKey"</span> \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  <span class="operator">-d</span> <span class="string">'&#123;</span><br><span class="line">        "where": &#123;</span><br><span class="line">          "deviceType": &#123;</span><br><span class="line">            "$in": [</span><br><span class="line">              "ios"</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "data": &#123;</span><br><span class="line">          "title": "The Shining",</span><br><span class="line">          "alert": "All work and no play makes Jack a dull boy."</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;'</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/push/</span><br></pre></td></tr></table></figure>
<p>正常下會得到：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"result"</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<p>所幸在 parse server 2.2.7 版時新增了 <code>X-Parse-Push-Status-Id</code> 這個 header，如同現行的 Parse.com 一樣，因為考量到回傳 object id 可能會暴露給 clients，因此放在 response 的 header 中。如何驗證 header 確實存在 <code>X-Parse-Push-Status-Id</code>，可以利用 curl 加上 -v 來看整個 request, response 的結果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: parseAppId"</span> \</span><br><span class="line">  -H <span class="string">"X-Parse-Master-Key: parseMasterKey"</span> \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  <span class="operator">-d</span> <span class="string">'&#123;</span><br><span class="line">        "where": &#123;</span><br><span class="line">          "deviceType": &#123;</span><br><span class="line">            "$in": [</span><br><span class="line">              "ios"</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "data": &#123;</span><br><span class="line">          "title": "The Shining",</span><br><span class="line">          "alert": "All work and no play makes Jack a dull boy."</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;'</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/push/ \</span><br><span class="line">  -v</span><br></pre></td></tr></table></figure>
<p>得到類似結果，回傳的 header 中就能看到 X-Parse-Push-Status-Id：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">*   Trying <span class="number">127.0</span>.<span class="number">0.1</span>...</span><br><span class="line">* Connected to localhost (<span class="number">127.0</span>.<span class="number">0.1</span>) port <span class="number">1337</span> (<span class="comment">#0)</span></span><br><span class="line">&gt; POST /parse/push/ HTTP/<span class="number">1.1</span></span><br><span class="line">&gt; User-Agent: curl/<span class="number">7.41</span>.<span class="number">0</span></span><br><span class="line">&gt; Host: localhost:<span class="number">1337</span></span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; X-Parse-Application-Id: parseAppId</span><br><span class="line">&gt; X-Parse-Master-Key: parseMasterKey</span><br><span class="line">&gt; Content-Type: application/json</span><br><span class="line">&gt; Content-Length: <span class="number">125</span></span><br><span class="line">&gt;</span><br><span class="line">* upload completely sent off: <span class="number">125</span> out of <span class="number">125</span> bytes</span><br><span class="line">&lt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">&lt; X-Powered-By: Express</span><br><span class="line">&lt; Access-Control-Allow-Origin: *</span><br><span class="line">&lt; Access-Control-Allow-Methods: GET,PUT,POST,DELETE,OPTIONS</span><br><span class="line">&lt; Access-Control-Allow-Headers: X-Parse-Master-Key, X-Parse-REST-API-Key, X-Parse-Javascript-Key, X-Parse-Application-Id, X-Parse-Client-Version, X-Parse-Session-Token, X-Requested-With, X-Parse-Revocable-Session, Content-Type</span><br><span class="line">&lt; X-Parse-Push-Status-Id: gLdaMNg12i</span><br><span class="line">&lt; Content-Type: application/json; charset=utf-<span class="number">8</span></span><br><span class="line">&lt; Content-Length: <span class="number">15</span></span><br><span class="line">&lt; Date: Fri, <span class="number">20</span> May <span class="number">2016</span> <span class="number">07</span>:<span class="number">51</span>:<span class="number">58</span> GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt;</span><br><span class="line">&#123;<span class="string">"result"</span>:<span class="literal">true</span>&#125;* Connection <span class="comment">#0 to host localhost left intact</span></span><br></pre></td></tr></table></figure>
<p>有了這個資訊後，就可以在後台中做到許多變化，以下為 node.js 的範例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  parseLocation: <span class="string">'localhost'</span>,</span><br><span class="line">  parsePort: <span class="number">1337</span>,</span><br><span class="line">  parsePush: <span class="string">'/parse/push'</span>,</span><br><span class="line">  parseAppId: <span class="string">'parseAppId'</span>,</span><br><span class="line">  parseMasterKey:<span class="string">'parseMasterKey'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 範例用 object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">"where"</span>: &#123;</span><br><span class="line">    <span class="string">"deviceType"</span>: &#123;</span><br><span class="line">      <span class="string">"$in"</span>: [<span class="string">"ios"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"The Shining"</span>,</span><br><span class="line">    <span class="string">"alert"</span>: <span class="string">"All work and no play makes Jack a dull boy."</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = http.request(&#123;</span><br><span class="line">  host: config.parseLocation,</span><br><span class="line">  port: config.parsePort,</span><br><span class="line">  path: config.parsePush,</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'X-Parse-Application-Id'</span>: config.parseAppId,</span><br><span class="line">    <span class="string">'X-Parse-Master-Key'</span>: config.parseMasterKey</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> jsonString = <span class="string">''</span>;</span><br><span class="line">  res.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">    jsonString += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(jsonString);</span><br><span class="line">    <span class="keyword">if</span>(json.result===<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 在這裡確認 result 為 true 後，將 x-parse-push-status-id 存在某個 obj 中來做對應</span></span><br><span class="line">      <span class="built_in">console</span>.log(res.headers[<span class="string">'x-parse-push-status-id'</span>]); <span class="comment">// 印出 x-parse-push-status-id</span></span><br><span class="line">      obj.pushId = res.headers[<span class="string">'x-parse-push-status-id'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postData = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line"></span><br><span class="line">req.write(postData);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure>
<p>最後 obj 會得到類似結果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"where"</span>: &#123;</span><br><span class="line">    <span class="string">"deviceType"</span>: &#123;</span><br><span class="line">      <span class="string">"$in"</span>: [<span class="string">"ios"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"The Shining"</span>,</span><br><span class="line">    <span class="string">"alert"</span>: <span class="string">"All work and no play makes Jack a dull boy."</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"pushId"</span>: <span class="string">"kAuJhPqpt9"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下來怎麼儲存物件及使用這些資料就是另一個課題了～</p>
<p>參考資料：</p>
<ol>
<li><a href="https://github.com/ParsePlatform/parse-server/pull/1412" target="_blank" rel="external">Adds X-Parse-Push-Status-Id header</a></li>
<li><a href="https://github.com/ParsePlatform/parse-server/issues/1157" target="_blank" rel="external">Return PushStatus ID from push endpoint.</a></li>
<li><a href="https://parse.com/docs/rest/guide#push-notifications-sending-pushes" target="_blank" rel="external">Sending Pushes</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 parse server REST API 的推播功能時，推播成功送到 parse server 只會時回傳 &lt;code&gt;{&amp;quot;result&amp;quot;:true}&lt;/code&gt;，只有這資訊對於後台串接 parse server 不是很方便，因缺乏 &lt;cod
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="Parse server" scheme="http://ssk7833.github.io/blog/tags/Parse-server/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="push notification" scheme="http://ssk7833.github.io/blog/tags/push-notification/"/>
    
  </entry>
  
  <entry>
    <title>Google Web Speech API 語音辨識 持續收音</title>
    <link href="http://ssk7833.github.io/blog/2016/04/21/Google-Web-Speech-API-continous-recording/"/>
    <id>http://ssk7833.github.io/blog/2016/04/21/Google-Web-Speech-API-continous-recording/</id>
    <published>2016-04-21T02:06:51.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>Google 的 web speech API 已經推出一段時間了，最近剛好有機會來試試。<br>Web speech API 的操作並不困難，基本上就是 <code>var recognition = new webkitSpeechRecognition();</code>，可以在下方參考資料中看到相關原始碼，唯獨我預設的需求是必須可持續收音，因使用者可能是在不適合任何物理碰觸的環境下操作，所以鍵盤滑鼠及觸控螢幕皆不適合在此當作 input 來源。然而 web speech API 的持續收音 <code>recognition.continuous = true;</code> 若發現麥克風閒置太長的話，一樣會自動停止收音，因此還是要再重新觸發 <code>recognition.start();</code>，所幸我就將 <code>recognition.start();</code> 寫到 <code>onend</code> event handler，天真的以為這樣就解決問題了。</p>
<p><img src="/blog/images/allowMicrophone.png" alt="要求使用麥克風" title="要求使用麥克風"><br>當每次收音結束後又重新觸發開始時，就會跳出這個允許授權的視窗，而當然此時是不能收音的，可以在此<a href="http://codepen.io/ssk7833/pen/YqepJb" target="_blank" rel="external">範例</a>體驗一下。</p>
<p>經過一番查證後，發現其實這個問題也不算問題，只是因為 chrome 要求安全性而在 http 上做出每次收音前都須要先確認允許才行，若是使用 https 的話只要允許過第一次後就再也不會詢問了，下方範例即是上方同一個範例的 https 版本。</p>
<iframe height="300" scrolling="no" src="https://codepen.io/ssk7833/embed/YqepJb/?height=300&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/ssk7833/pen/YqepJb/" target="_blank" rel="external">Web Speech API Demo</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p>允許之後就可以在麥克風例外狀況中看到已經預設允許的清單，在此清單中被允許的就再也不會跳出詢問視窗了，而 localhost 也是在允許範圍內，因此就可以做出很多有趣的事情了！<br><img src="/blog/images/microphoneExceptions.png" alt="麥克風例外狀況" title="麥克風例外狀況"></p>
<p>使用上的話，目前好像也沒看到什麼限制，也沒找到限制相關的文件，自己親自掛了好幾小時也還是活得好好的。</p>
<p>參考資料：</p>
<ol>
<li><a href="https://developers.google.com/web/updates/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API" target="_blank" rel="external">Voice Driven Web Apps: Introduction to the Web Speech API</a></li>
<li><a href="https://www.google.com/intl/en/chrome/demos/speech.html" target="_blank" rel="external">Web Speech API Demonstration</a></li>
<li><a href="http://www.oxxostudio.tw/articles/201509/web-speech-api.html" target="_blank" rel="external">Google 語音辨識 API</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Google 的 web speech API 已經推出一段時間了，最近剛好有機會來試試。&lt;br&gt;Web speech API 的操作並不困難，基本上就是 &lt;code&gt;var recognition = new webkitSpeechRecognition();&lt;/cod
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
      <category term="web speech API" scheme="http://ssk7833.github.io/blog/tags/web-speech-API/"/>
    
  </entry>
  
  <entry>
    <title>Parse Server APNS(iOS) 推播通知設定</title>
    <link href="http://ssk7833.github.io/blog/2016/04/19/parse-server-push-notification-APNS/"/>
    <id>http://ssk7833.github.io/blog/2016/04/19/parse-server-push-notification-APNS/</id>
    <published>2016-04-19T07:56:37.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>Parse 的一大方便之處，即是他提供了推播通知(push notification)的整合，使開發者可以在短時間內完成推播功能；而推播通知也已經移植到 Parse Server 版本上，步驟與先前在 Parse 上差不了多少，在這裡紀錄一下 APNS(iOS) 設定的步驟。</p>
<h2 id="建立-SSL-憑證"><a href="#建立-SSL-憑證" class="headerlink" title="建立 SSL 憑證"></a>建立 SSL 憑證</h2><p>在發送推播前必須給予 Parse Server 推播的權限，因此要先建立對應的 App ID 及 SSL 憑證。</p>
<h3 id="1-建立-Explicit-App-ID"><a href="#1-建立-Explicit-App-ID" class="headerlink" title="1. 建立 Explicit App ID"></a>1. 建立 Explicit App ID</h3><p>如果原本就已經有建立 Explicit App ID 的話，請跳過此步驟到 <a href="#2-設定推播通知">2. 設定推播通知</a>。</p>
<ol>
<li>到 <a href="https://developer.apple.com/membercenter/" target="_blank" rel="external">Apple Developer Member Center</a> 登入，點選 <a href="https://developer.apple.com/account/ios/certificate/" target="_blank" rel="external">Certificates, Identifiers &amp; Profiles</a>。</li>
<li>點選左欄中 Identifiers 底下的 <a href="https://developer.apple.com/account/ios/identifier/bundle" target="_blank" rel="external">App IDs</a>。</li>
<li>點選右上角 + 的按鈕。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/01.png" alt="建立 App ID" title="建立 App ID"></li>
<li>在 App ID Description 填上想要的名稱。</li>
<li>選擇 App ID Prefix，我的只有一組，好像預設就會自己選了～</li>
<li>App ID suffix 要注意選擇 Explicit App ID，而 Bundle ID 可參考 Apple 推薦的填法或是自己偏好的格式，須注意這組之後會在 Xcode 中使用到。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/02.png" alt="Explicit App ID" title="Explicit App ID"></li>
<li>將有需要用到的服務打勾，Push Notifications 記得要打勾！其餘就看自己有沒有要用到再開啟。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/03.png" alt="Apple Services" title="Apple Services"></li>
<li>點選 Contiune 進行下一步，確認無誤後就可以送出了。</li>
</ol>
<h3 id="2-設定推播通知"><a href="#2-設定推播通知" class="headerlink" title="2. 設定推播通知"></a>2. 設定推播通知</h3><p>到這裡，應該已經建立好一個 Explicit App ID。</p>
<ol>
<li>點開  <a href="https://developer.apple.com/account/ios/identifier/bundle" target="_blank" rel="external">App IDs</a> 底下已建立的 App ID，再點選 Edit。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/04.png" alt="App IDs Edit" title="App IDs Edit"></li>
<li>找到 Push Notifications 項目，若沒 Enable 則將他打勾，可以在此建立 Development 跟 Production 的憑證，建議先從開發模式開始，點選 Development SSL Certificate 中底下的 Create Certificate…。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/05.png" alt="Create Certificate" title="Create Certificate"></li>
<li>接下來他會教你怎麼做，然後要你做完再點選 Contiune，因為我英文對應中文 MAC OS 不太熟，所以在這裡也把步驟打出來了，開啟 MAC 中的「鑰匙圈存取」。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/06.png" alt="鑰匙圈存取" title="鑰匙圈存取"></li>
<li>點選「鑰匙圈存取」→「憑證輔助程式」→「從憑證授權要求憑證…」（蠻饒舌的）。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/07.png" alt="從憑證授權要求憑證…" title="從憑證授權要求憑證…"></li>
<li>在「使用者電子郵件位址」輸入自己的 Email，「一般名稱」輸入自己想要的名稱，「CA 電子郵件位址」留白，「已將要求」選擇「儲存到硬碟」，接著點選「繼續」來產生 CSR 檔。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/08.png" alt="憑證輔助程式" title="憑證輔助程式"></li>
<li>將剛剛儲存的 CSR 檔案上傳。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/09.png" alt="Upload CSR file" title="Upload CSR file"></li>
<li>下載憑證，下載完成後點選兩下此檔案，使檔案安裝到「鑰匙圈存取」中。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/10.png" alt="Download certificate" title="Download certificate"></li>
<li>開啟「鑰匙圈存取」，在左欄點選「我的憑證」，你可能會看到 Apple Development Push Services: 及 Apple Push Services:，這兩個分別對應了 development 憑證及 production 憑證，端看你使用哪一個。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/11.png" alt="Apple Development Push Services: &amp; Apple Push Services:" title="Apple Development Push Services: &amp; Apple Push Services:"></li>
<li>在要使用的憑證上點選右鍵，選擇「輸出」項目，儲存名稱依自己喜歡而定。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/12.png" alt="Export certificate" title="Export certificate"></li>
<li>在按儲存時會跳出密碼詢問的視窗，記得<strong>留白</strong>！<br><img src="/blog/images/2016-04-19-Parse-server-APNS/13.png" alt="Leave it blank" title="Leave it blank"></li>
<li>最後產生的檔案，將此檔案放到 Parse Server 的目錄內。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/14.png" alt=".p12" title=".p12"></li>
</ol>
<h2 id="Parse-Server-設定-APNS"><a href="#Parse-Server-設定-APNS" class="headerlink" title="Parse Server 設定 APNS"></a>Parse Server 設定 APNS</h2><p>延續 <a href="/blog/2016/04/09/setup-parse-server/">Parse Server 架設教學</a>中所使用的程式碼，在 <code>new ParseServer</code> 中加入 push 相關的程式碼，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</span><br><span class="line">  databaseURI: databaseUri || <span class="string">'mongodb://localhost:27017/dev'</span>,</span><br><span class="line">  cloud: process.env.CLOUD_CODE_MAIN || __dirname + <span class="string">'/cloud/main.js'</span>,</span><br><span class="line">  appId: process.env.APP_ID || <span class="string">'7c6a1d1470fed0313b5044c4eb83def0'</span>,</span><br><span class="line">  masterKey: process.env.MASTER_KEY || <span class="string">'98584a6e0a2592c274d1e4eae44b0a7b'</span>, <span class="comment">// Add your master key here. Keep it secret!</span></span><br><span class="line">  serverURL: process.env.SERVER_URL || <span class="string">'http://localhost:1337/parse'</span>,  <span class="comment">// Don't forget to change to https if needed</span></span><br><span class="line">  liveQuery: &#123;</span><br><span class="line">    classNames: [<span class="string">"Posts"</span>, <span class="string">"Comments"</span>] <span class="comment">// List of classes to support for query subscriptions</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 以下為新增部分</span></span><br><span class="line">  push: &#123;</span><br><span class="line">    <span class="comment">// 此篇未提到 Android，因此註解掉</span></span><br><span class="line">    <span class="comment">// android: &#123;</span></span><br><span class="line">    <span class="comment">//   senderId: '...',</span></span><br><span class="line">    <span class="comment">//   apiKey: '...'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    ios: &#123;</span><br><span class="line">      pfx: <span class="string">'pushDevelopmentCertificate.p12'</span>, <span class="comment">// 與 index.js 目錄同層</span></span><br><span class="line">      bundleId: <span class="string">'com.pushTest'</span>, <span class="comment">// 填入先前填的 Bundle ID</span></span><br><span class="line">      production: <span class="literal">false</span> <span class="comment">// false: development, true: production</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>而若需要同時使用 development 及 production 的 APNS 時，可以將設定改為這樣：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">push: &#123;</span><br><span class="line">  ios: [</span><br><span class="line">    &#123;</span><br><span class="line">      pfx: <span class="string">''</span>, <span class="comment">// Dev PFX or P12</span></span><br><span class="line">      bundleId: <span class="string">''</span>,</span><br><span class="line">      production: <span class="literal">false</span> <span class="comment">// development</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      pfx: <span class="string">''</span>, <span class="comment">// Prod PFX or P12</span></span><br><span class="line">      bundleId: <span class="string">''</span>,  </span><br><span class="line">      production: <span class="literal">true</span> <span class="comment">// production</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="設定-client-apps"><a href="#設定-client-apps" class="headerlink" title="設定 client apps"></a>設定 client apps</h2><p>App 部分的設定與先前 Parse 的設定一樣，因此在這裡省略，可以參考 <a href="https://github.com/ParsePlatform/Parse-Server/wiki/Push-Configuring-Clients" target="_blank" rel="external">Push Configuring Clients</a> 尋找自己需要的程式語言寫法。</p>
<h2 id="測試推播通知"><a href="#測試推播通知" class="headerlink" title="測試推播通知"></a>測試推播通知</h2><p>推播傳送的方式一樣可用 curl 或是 cloud code，唯一要注意的是傳送推播通知需要 <code>masterKey</code>，可以參考 <a href="https://github.com/ParsePlatform/parse-server/wiki/Push#4-send-push-notifications" target="_blank" rel="external">Send Push Notifications</a>。而 <a href="https://github.com/ParsePlatform/parse-dashboard" target="_blank" rel="external">Parse Dashboard</a>目前也可以傳送推播通知了，只可惜目前只可以傳而不能看傳送紀錄，下圖為 parse-dashboard 1.0.8 的畫面。<br><img src="/blog/images/2016-04-19-Parse-server-APNS/15.png" alt="Parse Dashboard send push" title="Parse Dashboard send push"></p>
<h2 id="疑難雜症"><a href="#疑難雜症" class="headerlink" title="疑難雜症"></a>疑難雜症</h2><p>正常來說過沒多久就 app 就能收到推播通知，如果沒有成功的話可以新增這兩個環境變數 <code>VERBOSE=1</code> 及 <code>DEBUG=apn</code>，若 <code>VERBOSE=1</code> 看不出結果再觀察 <code>DEBUG=apn</code>，其餘問題可能就要爬 issues 了。</p>
<p>筆者遇到的問題很蠢，就是所在的網路環境中 port 2195 被鎖了，因此試了半天都推播失敗 Orz，請先確定自己到 <code>gateway.sandbox.push.apple.com:2195</code> (development) 及 <code>gateway.push.apple.com:2195</code> (production) 是否能通～</p>
<p>參考資料：</p>
<ol>
<li><a href="https://github.com/ParsePlatform/parse-server/wiki/Push" target="_blank" rel="external">parse-server wiki - push</a></li>
<li><a href="https://github.com/ParsePlatform/PushTutorial/blob/master/iOS/README.md" target="_blank" rel="external">PushTutorial - Push Notification Sample App</a></li>
<li><a href="https://github.com/ParsePlatform/parse-dashboard" target="_blank" rel="external">Parse Dashboard</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Parse 的一大方便之處，即是他提供了推播通知(push notification)的整合，使開發者可以在短時間內完成推播功能；而推播通知也已經移植到 Parse Server 版本上，步驟與先前在 Parse 上差不了多少，在這裡紀錄一下 APNS(iOS) 設定的步驟
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="APNS" scheme="http://ssk7833.github.io/blog/tags/APNS/"/>
    
      <category term="Parse server" scheme="http://ssk7833.github.io/blog/tags/Parse-server/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
      <category term="push notification" scheme="http://ssk7833.github.io/blog/tags/push-notification/"/>
    
  </entry>
  
  <entry>
    <title>Parse Server 架設教學</title>
    <link href="http://ssk7833.github.io/blog/2016/04/09/setup-parse-server/"/>
    <id>http://ssk7833.github.io/blog/2016/04/09/setup-parse-server/</id>
    <published>2016-04-09T03:33:05.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>在今年一月底時 <a href="http://parse.com/" target="_blank" rel="external">Parse</a> 突然丟下了一枚震撼彈(<a href="http://blog.parse.com/announcements/moving-on/" target="_blank" rel="external">Moving On</a>)，隨著 Parse 服務將在一年後關閉的消息，同時也提到將會把 Parse Server open source 出來，如今兩個月過去了，釋出的 Parse Server 也趨於完善，不只提供了許多雲端服務的整合方案，連 Parse Dashboard 也在三月初時 open source 了(<a href="http://blog.parse.com/announcements/introducing-the-parse-server-dashboard/" target="_blank" rel="external">Introducing the Parse Server Dashboard</a>)，雖然這個 Dashboard 目前並不像 Parse 線上服務的功能一樣完整，但在短短一個月內間又多了推播(push notification)功能頁面(<a href="http://blog.parse.com/announcements/push-and-config-come-to-the-parse-dashboard/" target="_blank" rel="external">Push and Config come to the Parse Dashboard</a>)，可以預見未來功能會越來越完整。</p>
<p>單純架設 Parse Server 的難度不高，在 <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">GitHub</a> 有對於要在 local 架設或是部屬到其他服務上如 Heroku 的範例教學，<a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">wiki</a> 頁面也有更完整的解說，但從這裡開始我個人認為不是個好選擇，以指令方式去帶 appId 及 masterKey 總有可能會發生什麼意外。Parse 另外提供了 <a href="https://github.com/ParsePlatform/parse-server-example" target="_blank" rel="external">parse-server-example</a>，這個對於入門來說會比較方便。</p>
<h2 id="前置環境"><a href="#前置環境" class="headerlink" title="前置環境"></a>前置環境</h2><ul>
<li>Node 4.3 以上</li>
<li>MongoDB version 2.6.X or 3.0.X</li>
<li>Python 2.x (For Windows users, 2.7.1 is the required version)</li>
</ul>
<h2 id="架設-Parse-Server"><a href="#架設-Parse-Server" class="headerlink" title="架設 Parse Server"></a>架設 Parse Server</h2><ol>
<li><p>先從 GitHub 上抓一份 parse-server-example 下來。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ParsePlatform/parse-server-example.git --depth <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>將必要的模組裝上。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>index.js</code> 中修改參數，可以選擇修改環境變數或是直接修改後面字串：</p>
<ul>
<li>appId: 可填任意字串，用於識別 Parse API 的使用權限。在這裡用了 <code>md5</code> 來產生隨機字串。</li>
<li>masterKey: 可填任意字串，但不要公開此字串，用於覆寫權限設定。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</span><br><span class="line">  databaseURI: databaseUri || <span class="string">'mongodb://localhost:27017/dev'</span>,</span><br><span class="line">  cloud: process.env.CLOUD_CODE_MAIN || __dirname + <span class="string">'/cloud/main.js'</span>,</span><br><span class="line">  appId: process.env.APP_ID || <span class="string">'7c6a1d1470fed0313b5044c4eb83def0'</span>,</span><br><span class="line">  masterKey: process.env.MASTER_KEY || <span class="string">'98584a6e0a2592c274d1e4eae44b0a7b'</span>, <span class="comment">// Add your master key here. Keep it secret!</span></span><br><span class="line">  serverURL: process.env.SERVER_URL || <span class="string">'http://localhost:1337/parse'</span>,  <span class="comment">// Don't forget to change to https if needed</span></span><br><span class="line">  liveQuery: &#123;</span><br><span class="line">    classNames: [<span class="string">"Posts"</span>, <span class="string">"Comments"</span>] <span class="comment">// List of classes to support for query subscriptions</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>到這裡可以先執行看看。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure>
<p>此時 Parse API 預設會掛在 <a href="http://localhost:1337/parse/" target="_blank" rel="external">http://localhost:1337/parse/</a> 下，有兩種方式可以測試是否運作正常：</p>
<ol>
<li>直接到第五步驟，利用此包程式碼中的範例網頁來測試。</li>
<li><code>curl</code> 來測試 Parse 的 REST API 是否正常運作，<code>X-Parse-Application-Id</code> 需改成在 <code>index.js</code> 中設定的 <code>appId</code>。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: 7c6a1d1470fed0313b5044c4eb83def0"</span> \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  <span class="operator">-d</span> <span class="string">'&#123;"score":1337,"playerName":"Sean Plott","cheatMode":false&#125;'</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/classes/GameScore</span><br></pre></td></tr></table></figure>
<p>若正常無誤會得到以下類似的結果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"objectId"</span>: <span class="string">"CT8BWvZ8Fi"</span>,</span><br><span class="line">  <span class="string">"createdAt"</span>: <span class="string">"2016-04-08T02:55:57.802Z"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取值可利用以下指令來測試，<code>GameScore</code> 後面需加上剛剛回傳的 <code>objectId</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET \</span><br><span class="line">  -H <span class="string">"X-Parse-Application-Id: 7c6a1d1470fed0313b5044c4eb83def0"</span> \</span><br><span class="line">  http://localhost:<span class="number">1337</span>/parse/classes/GameScore/CT8BWvZ8Fi</span><br></pre></td></tr></table></figure>
<p>正常的話即可拿回上一步所傳的內容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"objectId"</span>: <span class="string">"CT8BWvZ8Fi"</span>,</span><br><span class="line">  <span class="string">"score"</span>: <span class="number">1337</span>,</span><br><span class="line">  <span class="string">"playerName"</span>: <span class="string">"Sean Plott"</span>,</span><br><span class="line">  <span class="string">"cheatMode"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"updatedAt"</span>: <span class="string">"2016-04-08T02:55:57.802Z"</span>,</span><br><span class="line">  <span class="string">"createdAt"</span>: <span class="string">"2016-04-08T02:55:57.802Z"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>詳細操作可參考 <a href="https://parse.com/docs/rest/guide/" target="_blank" rel="external">REST API Guide</a>。</p>
</li>
<li><p>在這個範例中有提供 REST API 及 Cloud Code 的測試程式碼，可以執行看看功能是否正常。<br>在 <code>public/assets/js/script.js</code> 中，將 <code>myAppId</code> 取代成自己目前的 <code>appId</code>，共有兩處；接著開啟 <a href="http://localhost:1337/public/test.html" target="_blank" rel="external">http://localhost:1337/public/test.html</a> 即可看到測試頁面，依序點選下方的 <code>POST</code>, <code>FETCH</code> 及 <code>TEST</code>，若正確無誤的話應能看到以下結果：<br><img src="/blog/images/ParseServerTest.png" alt="Parse Server Test" title="Parse Server Test"><br>看到這個結果就代表 REST API 及 Cloud Code 都沒有問題，下一步就看自己是不是要加推播通知的設定及 Dashboard 了！</p>
</li>
</ol>
<p>參考資料：</p>
<ol>
<li><a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">parse-server</a></li>
<li><a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">parse-server wiki</a></li>
<li><a href="https://github.com/ParsePlatform/parse-server-example" target="_blank" rel="external">parse-server-example</a></li>
<li><a href="https://github.com/ParsePlatform/parse-server/issues" target="_blank" rel="external">parse-server issues</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在今年一月底時 &lt;a href=&quot;http://parse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parse&lt;/a&gt; 突然丟下了一枚震撼彈(&lt;a href=&quot;http://blog.parse.com/announcements/movi
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CloudCode" scheme="http://ssk7833.github.io/blog/tags/CloudCode/"/>
    
      <category term="Parse server" scheme="http://ssk7833.github.io/blog/tags/Parse-server/"/>
    
      <category term="Parse.com" scheme="http://ssk7833.github.io/blog/tags/Parse-com/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Do it smart, a better way to write CSS - SASS/SCSS</title>
    <link href="http://ssk7833.github.io/blog/2016/03/30/do-it-smart-a-better-way-to-write-CSS/"/>
    <id>http://ssk7833.github.io/blog/2016/03/30/do-it-smart-a-better-way-to-write-CSS/</id>
    <published>2016-03-30T06:49:50.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>最近在會議中分享了以下這份投影片，算是一個 SASS/SCSS 的入門。我擷取了部分常用的基礎功能及寫法範例，希望對入門者有些幫助。</p>
<p><iframe src="https://ssk7833.github.io/slides/SCSS/" width="640" height="480" style="width:100%;"></iframe><br><a href="https://ssk7833.github.io/slides/SCSS/">Do it smart, a better way to write CSS - SASS/SCSS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在會議中分享了以下這份投影片，算是一個 SASS/SCSS 的入門。我擷取了部分常用的基礎功能及寫法範例，希望對入門者有些幫助。&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://ssk7833.github.io/slides/SCSS/&quot; width=&quot;640
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CSS" scheme="http://ssk7833.github.io/blog/tags/CSS/"/>
    
      <category term="SASS" scheme="http://ssk7833.github.io/blog/tags/SASS/"/>
    
      <category term="SCSS" scheme="http://ssk7833.github.io/blog/tags/SCSS/"/>
    
  </entry>
  
  <entry>
    <title>實作 gooey 膠粘效果</title>
    <link href="http://ssk7833.github.io/blog/2016/03/09/implement-gooey-effect/"/>
    <id>http://ssk7833.github.io/blog/2016/03/09/implement-gooey-effect/</id>
    <published>2016-03-09T05:48:05.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>最近在試著實作 gooey 效果，看了一些介紹後知道了 gooey 的原理，本以為在實作上可以一路順風，但果然沒有這麼簡單，還好最後有找到解決方法。</p>
<p>先來談談 gooey 的作法，首先要先有兩層 layer，內層將物件模糊 blur，而外層處理亮度 brightness 跟對比度 contrast，接著神奇的事情就會發生了，可以參考以下範例：</p>
<p></p><p data-height="380" data-theme-id="0" data-slug-hash="lIBAg" data-default-tab="result" data-user="chriscoyier" class="codepen">See the Pen <a href="http://codepen.io/chriscoyier/pen/lIBAg/" target="_blank" rel="external">Blur vs Contrast</a> by Chris Coyier (<a href="http://codepen.io/chriscoyier" target="_blank" rel="external">@chriscoyier</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>上層是只加了模糊，可以看到因為模糊的關係，物件間的顏色互相疊加在一起；下層則是調整對比後的結果，將模糊過的結果保留重疊及原本顏色較深的部分，濾掉顏色較淺的部分，物件間的部分就因此連起來了，若是加上動畫，效果就會更好：</p>
<p></p><p data-height="330" data-theme-id="0" data-slug-hash="lFdHu" data-default-tab="result" data-user="lbebber" class="codepen">See the Pen <a href="http://codepen.io/lbebber/pen/lFdHu/" target="_blank" rel="external">Gooey Pagination</a> by Lucas Bebber (<a href="http://codepen.io/lbebber" target="_blank" rel="external">@lbebber</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>這樣看似已經完成了，但實際上會遇到兩個問題：</p>
<ol>
<li>內部物件模糊掉，使用了 <code>filter: blur();</code> 後，子元素無一倖免。</li>
<li>更改顏色，所有更改顏色都會因對比而偏移掉。</li>
</ol>
<p>原本就是卡在這裡，不管怎麼調整都沒辦法有效的解決這兩項，後來看到了 <a href="http://tympanus.net/codrops/2015/03/10/creative-gooey-effects/" target="_blank" rel="external">Creative Gooey Effects</a> 這篇才知道可以利用 <code>fliter: url();</code> 配合 SVG filters 來解決這兩個問題，且用法也很簡單。此方法在 <a href="https://css-tricks.com/gooey-effect/" target="_blank" rel="external">The Gooey Effect</a> 中描述的更加清楚，包含在 <code>feColorMatrix</code> 中的 values 為什麼是下表也有描述，若是對他的敘述不清楚的話可以先看 <a href="http://www.oxxostudio.tw/articles/201406/svg-11-filter-feColorMatrix.html" target="_blank" rel="external">SVG 研究之路 (11) - filter:feColorMatrix</a> 稍微釐清一下。</p>
<p>簡單來說，若是沒有特別需求，就去調整 color matrix 中的 alpha channel (A) 跟 plus(+) 中值來得到自己想要的結果。</p>
<table>
<thead>
<tr>
<th>*</th>
<th>R</th>
<th>G</th>
<th>B</th>
<th>A</th>
<th>+</th>
</tr>
</thead>
<tbody>
<tr>
<td>R</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>G</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>B</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>A</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>18</td>
<td>-7</td>
</tr>
</tbody>
</table>
<p>以下是我在測試時寫的比較：</p>
<ol>
<li>用純 CSS 處理，背景與下一項的顏色設定相同，但呈現出 <code>#0000FF</code> 的藍色。<br><p data-height="200" data-theme-id="0" data-slug-hash="mPeEEG" data-default-tab="result" data-user="ssk7833" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/mPeEEG/" target="_blank" rel="external">Rotate loading (bad with and text)</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><script async src="//assets.codepen.io/assets/embed/ei.js"></script></li>
<li>用 SVG 處理，上一版的改良，在元素中放文字將會正常顯示。<br><p data-height="200" data-theme-id="0" data-slug-hash="dMGpXQ" data-default-tab="result" data-user="ssk7833" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/dMGpXQ/" target="_blank" rel="external">Gooey rotate loading (good with background and text)</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><script async src="//assets.codepen.io/assets/embed/ei.js"></script></li>
<li>將第二版的顏色稍加調整，移除 <code>feBlend</code> 後由於失去 <code>SourceGraphic</code> 的關係，文字將不會正常顯示，但此效果我更喜歡。<br><p data-height="200" data-theme-id="0" data-slug-hash="oxbBRy" data-default-tab="result" data-user="ssk7833" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/oxbBRy/" target="_blank" rel="external">Gooey rotate loading (good with only background)</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><script async src="//assets.codepen.io/assets/embed/ei.js"></script>

</li>
</ol>
<p>在寫上述三項測試時，自己也試過許多不同的組合，對 SVG filters 也多了許多理解，而在 gooey 相關的效果基本上就是 <code>feGaussianBlur</code>、<code>feColorMatrix</code> 和 <code>feBlend</code> 的變化所組成，未來若遇到類似需求時應該都能迎刃而解～</p>
<p>參考資料：</p>
<ol>
<li><a href="https://css-tricks.com/shape-blobbing-css/" target="_blank" rel="external">Shape Blobbing in CSS</a></li>
<li><a href="http://www.oxxostudio.tw/articles/201408/sticky-ball.html" target="_blank" rel="external">噁心黏黏球( 純 CSS )</a></li>
<li><a href="http://tympanus.net/codrops/2015/03/10/creative-gooey-effects/" target="_blank" rel="external">Creative Gooey Effects</a>  底下有幾個動畫範例值得一看</li>
<li><a href="https://css-tricks.com/gooey-effect/" target="_blank" rel="external">The Gooey Effect</a></li>
<li><a href="http://www.oxxostudio.tw/articles/201406/svg-11-filter-feColorMatrix.html" target="_blank" rel="external">SVG 研究之路 (11) - filter:feColorMatrix</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在試著實作 gooey 效果，看了一些介紹後知道了 gooey 的原理，本以為在實作上可以一路順風，但果然沒有這麼簡單，還好最後有找到解決方法。&lt;/p&gt;
&lt;p&gt;先來談談 gooey 的作法，首先要先有兩層 layer，內層將物件模糊 blur，而外層處理亮度 brigh
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CSS" scheme="http://ssk7833.github.io/blog/tags/CSS/"/>
    
      <category term="SVG" scheme="http://ssk7833.github.io/blog/tags/SVG/"/>
    
      <category term="gooey" scheme="http://ssk7833.github.io/blog/tags/gooey/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis CI 自動部署 GitHub Pages</title>
    <link href="http://ssk7833.github.io/blog/2016/01/21/using-TravisCI-to-deploy-on-GitHub-pages/"/>
    <id>http://ssk7833.github.io/blog/2016/01/21/using-TravisCI-to-deploy-on-GitHub-pages/</id>
    <published>2016-01-21T08:23:05.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先前看到了<a href="https://samkuo.me/post/2015/09/why-developers-should-have-a-blog/" target="_blank" rel="external">程式人就該有個部落格</a>，想想這個主意不錯，之前有在 Blogger 及 Logdown 零星寫了幾篇文章，也曾經想過自己架靜態或動態網站，只是一直沒有去做，看完這篇讓我更有動力去做這件事。研究一陣子後我選擇直接利用 Github pages 來發佈網站，於是開始調查 <a href="https://www.staticgen.com/" target="_blank" rel="external">StaticGen</a> 上排名較高的幾個，而最後挑選了 <a href="https://hexo.io" target="_blank" rel="external">Hexo</a>：是台灣人寫的，而且是 javascript。</p>
<p>自己完成 Hexo 初步設定，產生第一版頁面後不久就遇到兩個問題：</p>
<ol>
<li>能不能將每次都要發佈的這個動作自動化。</li>
<li>如果我換到其他電腦上，而其他電腦可能沒有 Hexo 時會很不方便，可能要選擇安裝一次 node.js 及 hexo，甚至根本沒安裝權限；若是能直接利用 GitHub 線上編輯 markdown 文件就能產生的話有多棒。</li>
</ol>
<p>因為這兩點，我決定開始我的 Travis CI 初體驗。</p>
<h2 id="關於-Travis-CI"><a href="#關於-Travis-CI" class="headerlink" title="關於 Travis CI"></a>關於 Travis CI</h2><p>簡單來說，持續整合 (Continuous integration，縮寫為 CI)是在開發過程中，有任何變更都自動且持續的整合到目前的版本中。整合包含測試及發佈，可根據自訂的測試內容產生可視化的結果，方便開發人員快速找到問題所在，並且在測試通過後自動執行已撰寫的腳本，以達到自動發佈的功能。要達到持續整合，需有一個伺服器專門監聽程式版本的改動，一旦有變動就執行事先撰寫的測試及部署腳本。</p>
<p>Travis CI 提供在 GitHub 上的任何公開的 repo 都可以免費的使用 CI 服務，Travis CI 與 GitHub 的適性很好（也只提供使用 GitHub 帳號登入），廣受 GitHub 上使用，因此在這裡也使用 Travis CI 所提供的服務來產生靜態網站。</p>
<p>初次接觸 CI 可以先從官方提供的範例檔開始：<a href="https://docs.travis-ci.com/user/for-beginners" target="_blank" rel="external">Travis CI for Complete Beginners</a>，以便能有一些基礎概念，接著再開始挑選 <a href="https://docs.travis-ci.com/user/getting-started/" target="_blank" rel="external">Getting started</a> 中的項目學習設定與操作。</p>
<p>我的目標很明確，想要弄出在同一個 repo 下，一個 branch 是放 source code 的 master，另一個 branch 則是發佈用的 gh-pages。每當我 master 有更新時 gh-pages 也會自動透過 Travis CI 更新，如下圖，經過幾次測試後終於成功，最後 branch 的點呈現交錯成長：</p>
<p><img src="/blog/images/sourceTree.png" alt="branch" title="branch"></p>
<h2 id="給予-Travis-CI-push-的權限"><a href="#給予-Travis-CI-push-的權限" class="headerlink" title="給予 Travis CI push 的權限"></a>給予 Travis CI push 的權限</h2><p>由於發佈到 gh-pages 要交給 Travis CI 處理，需要 GitHub 帳號的驗證，而在 public repo 下不可能直接把密碼直接放在 source 中，因此在這裡選擇 GitHub 所提供的 <a href="https://github.com/settings/tokens" target="_blank" rel="external">Personal access tokens</a> 來處理權限的問題，用 Personal access token 的好處在於是個人創建的，可以隨時刪除 token 以取消存取權限，再加上 Travis CI 在文件中提到的 <a href="https://docs.travis-ci.com/user/encryption-keys/" target="_blank" rel="external">Encryption keys</a> 來處理敏感資料，通過環境變數的方式傳遞給腳本，以避免密碼及 token 公開出來。</p>
<p>首先先產生一個 access token，因為目的只有讓 Travis CI 可以讀取 public repo，因此勾選 public repo 即可。</p>
<p><img src="/blog/images/personalAccessToken.png" alt="personal access token" title="personal access token"></p>
<p>接著先將產生的 token 妥善複製，未來只能 regenerate 一組新的 token，再也無法從 GitHub 調出目前這組。</p>
<p><img src="/blog/images/generatedToken.png" alt="generated token" title="generated token"></p>
<p>接著利用 Travis CLI 來處理敏感資料，較方便的方式是利用 ruby 的 gem 來安裝 Travis CLI：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="keyword">install</span> travis</span><br></pre></td></tr></table></figure>
<p>安裝完畢後，接著到想設定 Travis CI 的 repo 目錄中執行 <code>travis login</code> 來驗證身分，之後執行 <code>travis init</code>，會先詢問使用的語言，且產生 <code>.travis.yml</code>，接著在同一目錄下執行此指令，記得將 <code>&lt;Personal Access Token&gt;</code> 取代成先前複製的那組：</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt <span class="attribute">'GIT_NAME</span>=<span class="string">"North"</span> GIT_EMAIL=ssk7833@gmail.com GH_TOKEN=&lt;Personal <span class="keyword">Access</span> Token&gt;' <span class="comment">--add</span></span><br></pre></td></tr></table></figure>
<p>即可看到在 .travis.yml 中多了</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">env</span>:</span><br><span class="line">  <span class="attribute">global</span>:</span><br><span class="line">    <span class="attribute">secrue</span>: <span class="string">"long secure base64 string"</span></span><br></pre></td></tr></table></figure>
<p>這一串將在每次 CI 進行時設定環境變數，這邊環境變數即可在接下來的腳本中使用。</p>
<h2 id="設定-travis-yml-檔"><a href="#設定-travis-yml-檔" class="headerlink" title="設定 .travis.yml 檔"></a>設定 .travis.yml 檔</h2><p>編輯 .travis.yml 前，可以先閱讀一下 Travis CI 的 <a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="external">Build Lifecycle</a>，以下是我粗略的設定：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">language</span>: <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="haml">node_js:</span><br><span class="line">  -<span class="ruby"> <span class="string">"4.0"</span></span><br><span class="line"></span></span><br><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">    secure:  "long secure base64 string"</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  -<span class="ruby"> npm install</span><br><span class="line"></span></span><br><span class="line">script:</span><br><span class="line">  # Set Git config</span><br><span class="line">  -<span class="ruby"> git config --global user.name <span class="string">"$GIT_NAME"</span></span><br><span class="line"></span>  -<span class="ruby"> git config --global user.email <span class="string">"$GIT_EMAIL"</span></span><br><span class="line"></span>  -<span class="ruby"> git config --global push.default simple</span><br><span class="line"></span>  -<span class="ruby"> git clone --depth <span class="number">1</span> --branch gh-pages <span class="symbol">https:</span>/<span class="regexp">/$GH_TOKEN@github.com/ssk</span>7833/blog public</span><br><span class="line"></span>  # Generate Hexo static pages</span><br><span class="line">  -<span class="ruby"> npm run generate</span><br><span class="line"></span>  -<span class="ruby"> cd public</span><br><span class="line"></span>  -<span class="ruby"> git add -<span class="constant">A</span> .</span><br><span class="line"></span>  -<span class="ruby"> <span class="constant">MESSAGE</span>=<span class="string">`date +\ %Y-%m-%d\ %H:%M:%S`</span></span><br><span class="line"></span>  -<span class="ruby"> git commit -m <span class="string">"Site updated:$MESSAGE"</span></span><br><span class="line"></span>  -<span class="ruby"> git push --quiet</span></span></span><br></pre></td></tr></table></figure>
<p>node.js 的套件 dependencies 都已先用 package.json 存下，因此在 install 的部分只需使用 npm install；在 script 中完成部分指令，但因為沒特殊需求，只有設定 git 及產生靜態頁面，因此讓它一路到底。</p>
<p><strong>注意：git push 時一定要加 <code>--quiet</code>，否則先前設定的 Personal Access Token 將會印出，這樣就失去加密意義了。</strong></p>
<p>結果可以在 Travis CI 的網頁上看到，可以瀏覽各次的狀況，像我最近的 <a href="https://travis-ci.org/ssk7833/blog/builds/101307260" target="_blank" rel="external">push 結果</a>及先前測試的<a href="https://travis-ci.org/ssk7833/blog/builds/100311173" target="_blank" rel="external">失敗結果</a>都可以在 Build history 中瀏覽到。</p>
<h2 id="在-GitHub-上發佈／編輯"><a href="#在-GitHub-上發佈／編輯" class="headerlink" title="在 GitHub 上發佈／編輯"></a>在 GitHub 上發佈／編輯</h2><p>若是設定無誤，接下來要發佈或編輯文章即可直接利用 GitHub 網頁版來作編輯，不需要擔心作業系統沒有安裝相關環境而無法發佈或編輯文章囉！</p>
<p><img src="/blog/images/editPost.png" alt="edit post" title="edit post"></p>
<p><strong>UPDATE：</strong>發現 Travis CI 發佈的結果可能會跟實際時間對不起來，如圖：</p>
<p><img src="/blog/images/TZIncorrect.png" alt="time zone incorrect" title="time zone incorrect"></p>
<p>後來發現是因為我在 Hexo 中設定了時區為 Asia/Taipei，而 Travis CI 所提供的機器時區不一樣而造成的，將 Travis CI 一樣設定為 Asia/Taipei 即可解決問題。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">before_install:</span><br><span class="line"></span>  - <span class="preprocessor">export</span> TZ<span class="label">=Asia</span>/Taipei</span><br></pre></td></tr></table></figure>
<p>這是我最後的 <a href="https://github.com/ssk7833/blog/blob/master/.travis.yml" target="_blank" rel="external">.travis.yml 設定</a>。</p>
<p>參考資料：</p>
<ol>
<li><a href="https://farseerfc.me/zhs/travis-push-to-github-pages-blog.html" target="_blank" rel="external">用 Travis-CI 生成 Github Pages 博客 </a></li>
<li><a href="http://changyuheng.me/2015/when-hexo-static-site-meets-github-pages-and-travis-ci/" target="_blank" rel="external">When Hexo Meets GitHub Pages and Travis CI plus Raspberry Pi</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;先前看到了&lt;a href=&quot;https://samkuo.me/post/2015/09/why-developers-should-hav
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="gf-pages" scheme="http://ssk7833.github.io/blog/tags/gf-pages/"/>
    
      <category term="hexo" scheme="http://ssk7833.github.io/blog/tags/hexo/"/>
    
      <category term="travis ci" scheme="http://ssk7833.github.io/blog/tags/travis-ci/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 fullscreen API 將 iframe 以全螢幕顯示</title>
    <link href="http://ssk7833.github.io/blog/2016/01/10/show-iframe-in-fullscreen-by-html5-fullscreen-api/"/>
    <id>http://ssk7833.github.io/blog/2016/01/10/show-iframe-in-fullscreen-by-html5-fullscreen-api/</id>
    <published>2016-01-09T20:10:05.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>最近因為有把 iframe 內容以全螢幕顯示的需求，因此研究了一下 HTML5 fullscreen API。已有現成的 library 可以用如 <a href="https://sindresorhus.com/screenfull.js/" target="_blank" rel="external">screenfull.js</a> 及 <a href="https://brad.is/coding/BigScreen/" target="_blank" rel="external">BigScreen</a>，但大致上並不難，因此我選擇了純 javascript 來撰寫看看。</p>
<p>要全螢幕其實並不難，只要呼叫 <code>requestFullscreen()</code> 即可做到，以下是簡易範例：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'#container .button'</span>);</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, fullscreen);</span><br><span class="line"></span><br><span class="line">function fullscreen() &#123;</span><br><span class="line">  <span class="comment">// check if fullscreen mode is available</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.fullscreenEnabled ||</span><br><span class="line">    <span class="built_in">document</span>.webkitFullscreenEnabled ||</span><br><span class="line">    <span class="built_in">document</span>.mozFullScreenEnabled ||</span><br><span class="line">    <span class="built_in">document</span>.msFullscreenEnabled) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// which element will be fullscreen</span></span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'#container iframe'</span>);</span><br><span class="line">    <span class="comment">// Do fullscreen</span></span><br><span class="line">    <span class="keyword">if</span> (iframe.requestFullscreen) &#123;</span><br><span class="line">      iframe.requestFullscreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframe.webkitRequestFullscreen) &#123;</span><br><span class="line">      iframe.webkitRequestFullscreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframe.mozRequestFullScreen) &#123;</span><br><span class="line">      iframe.mozRequestFullScreen();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iframe.msRequestFullscreen) &#123;</span><br><span class="line">      iframe.msRequestFullscreen();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'.error'</span>).innerHTML = <span class="string">'Your browser is not supported'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此範例即可讓當所選擇的 <code>#container .button</code> 被點擊時，讓 <code>#container iframe</code> 全螢幕。</p>
<p>但因為 iframe 的內容並非我可以控制的，有些 iframe 的內容沒有處理 RWD，因此當頁面縮放時可能會呈現未預期的效果，如：<a href="http://codepen.io/kanaparty/pen/eJYXeZ" target="_blank" rel="external">ぶつからないように動くビークル</a>（找了一下 codepen 才找到一個可用範例）。要做到這點，我目前選擇當 iframe 被全螢幕時則重新載入一次，當然，當 iframe 從全螢幕離開時也會再 resize 一次，因此也要注意離開全螢幕時也得處理。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reload</span></span><br><span class="line"><span class="tag">iframe</span><span class="class">.src</span> = <span class="tag">iframe</span>.src</span><br></pre></td></tr></table></figure>
<p>原本我認為應將重新載入寫在 request fullscreen 之後，而當觸發 keydown event 時再觸發一次重新載入，後來發現在全螢幕時按下 ESC 時 keydown event 都不會被觸發(chrome, firefox)，而按下 F11 則是 Firefox 會觸發而 Chrome 不會，因此認為這應該不是個好寫法。</p>
<p>後來在 <a href="http://www.sitepoint.com/use-html5-full-screen-api/" target="_blank" rel="external">How to Use the HTML5 Full-Screen API (Again)</a> 發現有 fullscreenchange event 可以用，因此也改用這個，原本放在全螢幕後的重新載入也改成放於 event listener 內，程式碼也簡潔多了！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when you are in fullscreen, ESC and F11 may not be trigger by keydown listener.</span></span><br><span class="line"><span class="comment">// so don't use it to detect exit fullscreen</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'key press'</span> + e.keyCode);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// detect enter or exit fullscreen mode</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'webkitfullscreenchange'</span>, fullscreenChange);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'mozfullscreenchange'</span>, fullscreenChange);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'fullscreenchange'</span>, fullscreenChange);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'MSFullscreenChange'</span>, fullscreenChange);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fullscreenChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.fullscreenEnabled ||</span><br><span class="line">       <span class="built_in">document</span>.webkitIsFullScreen ||</span><br><span class="line">       <span class="built_in">document</span>.mozFullScreen ||</span><br><span class="line">       <span class="built_in">document</span>.msFullscreenElement) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'enter fullscreen'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'exit fullscreen'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// force to reload iframe once to prevent the iframe source didn't care about trying to resize the window</span></span><br><span class="line">  <span class="comment">// comment this line and you will see</span></span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.querySelector(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.src = iframe.src;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下為測試的範例，可以試著把 <code>iframe.src = iframe.src;</code> 註解掉，即可看到改造前後的差異：</p>
<p></p><p data-height="268" data-theme-id="0" data-slug-hash="mVOXXp" data-default-tab="result" data-user="ssk7833" class="codepen">See the Pen <a href="http://codepen.io/ssk7833/pen/mVOXXp/" target="_blank" rel="external">Fullscreen API on iframe</a> by North (<a href="http://codepen.io/ssk7833" target="_blank" rel="external">@ssk7833</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>參考資料：<br><a href="http://codepen.io/kanaparty/pen/eJYXeZ" target="_blank" rel="external">ぶつからないように動くビークル</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API" target="_blank" rel="external">Using fullscreen mode - Web APIs | MDN</a><br><a href="http://www.sitepoint.com/use-html5-full-screen-api/" target="_blank" rel="external">How to Use the HTML5 Full-Screen API (Again) - SitePoint</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因為有把 iframe 內容以全螢幕顯示的需求，因此研究了一下 HTML5 fullscreen API。已有現成的 library 可以用如 &lt;a href=&quot;https://sindresorhus.com/screenfull.js/&quot; target=&quot;_blan
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="javascript" scheme="http://ssk7833.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Facebook Graph API 取得大頭貼照</title>
    <link href="http://ssk7833.github.io/blog/2015/08/25/facebook-graph-api-get-picture/"/>
    <id>http://ssk7833.github.io/blog/2015/08/25/facebook-graph-api-get-picture/</id>
    <published>2015-08-24T19:11:56.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>要取得大頭貼照，如果使用 API request ，加上 picture 即可得到大頭貼照，如：<code>me?fields=id,name,picture</code>，即可在回傳的 JSON 中取得圖片的位址，但這時取回來的圖片會比正常大小還要小，而且此方法還需要 access_token。</p>
<p>要取得不同大小的大頭貼照，有個更輕鬆的方法：<code>http://graph.facebook.com/{id}/picture?type=normal</code> 直接使用此網址，將 id 換成想呈現的 userId 即可，此網址將會 redirect 到對應的圖片位址，且此方法不需要 access_token。</p>
<p>在這個網址中，type 可為 <code>small</code>, <code>normal</code>, <code>album</code>, <code>large</code>, <code>square</code>，分別為不同解析度的照片大小。</p>
<p>以 Facebook 的創始人 Mark Zuckerberg 為例，userId 為 4，則要顯示的網址如下：<br>50*50:<br><code>http://graph.facebook.com/4/picture?type=small</code><br><img src="http://graph.facebook.com/4/picture?type=small" alt="Small" title="Mark Zuckerberg"><br><code>http://graph.facebook.com/4/picture?type=album</code><br><img src="http://graph.facebook.com/4/picture?type=album" alt="Album" title="Mark Zuckerberg"><br><code>http://graph.facebook.com/4/picture?type=square</code><br><img src="http://graph.facebook.com/4/picture?type=square" alt="Square" title="Mark Zuckerberg"></p>
<p>100*100:<br><code>http://graph.facebook.com/4/picture?type=normal</code><br><img src="http://graph.facebook.com/4/picture?type=normal" alt="Normal" title="Mark Zuckerberg"></p>
<p>200*200:<br><code>http://graph.facebook.com/4/picture?type=large</code><br><img src="http://graph.facebook.com/4/picture?type=large" alt="Large" title="Mark Zuckerberg"></p>
<p>不能理解的是為什麼 small, album, square 所得到的大小都一樣，還不知道差在哪。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要取得大頭貼照，如果使用 API request ，加上 picture 即可得到大頭貼照，如：&lt;code&gt;me?fields=id,name,picture&lt;/code&gt;，即可在回傳的 JSON 中取得圖片的位址，但這時取回來的圖片會比正常大小還要小，而且此方法還需要 a
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Facebook-Graph-API" scheme="http://ssk7833.github.io/blog/tags/Facebook-Graph-API/"/>
    
  </entry>
  
  <entry>
    <title>Facebook Graph API 回傳指定語言/地區化姓名</title>
    <link href="http://ssk7833.github.io/blog/2015/07/12/facebook-graph-api-returns-language-specific-name/"/>
    <id>http://ssk7833.github.io/blog/2015/07/12/facebook-graph-api-returns-language-specific-name/</id>
    <published>2015-07-12T10:49:43.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>玩 Facebook Graph API 玩了一陣子才發現回傳的姓名總是是英文的，才想到若是有回傳中文姓名的需求時該怎麼辦，如此下去一找才發現關鍵字是 <a href="https://www.facebook.com/help/217868321565724" target="_blank" rel="external">Language-specific name</a>，而要如何在 Facebook Graph API 中顯示為中文則可以參考這篇中的 locale：<a href="https://developers.facebook.com/docs/graph-api/using-graph-api/v2.0#readmodifiers" target="_blank" rel="external">Modifying API Requests</a>。</p>
<p>其實只要在 API request 中加上 <code>&amp;locale=zh_TW</code> 即可得到中文姓名，如：<code>me?fields=id,name&amp;locale=zh_TW</code>，只是有趣的是我稍微測了一下 locale 給以開頭 <code>en_</code> 以外的任何值都會取得中文名稱，還以為預設會以英文為主。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩 Facebook Graph API 玩了一陣子才發現回傳的姓名總是是英文的，才想到若是有回傳中文姓名的需求時該怎麼辦，如此下去一找才發現關鍵字是 &lt;a href=&quot;https://www.facebook.com/help/217868321565724&quot; targe
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Facebook-Graph-API" scheme="http://ssk7833.github.io/blog/tags/Facebook-Graph-API/"/>
    
      <category term="localization" scheme="http://ssk7833.github.io/blog/tags/localization/"/>
    
  </entry>
  
  <entry>
    <title>使用 Parse.com Cloud Code Hosting 進行 Facebook 登入存取 3</title>
    <link href="http://ssk7833.github.io/blog/2015/07/02/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-3/"/>
    <id>http://ssk7833.github.io/blog/2015/07/02/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-3/</id>
    <published>2015-07-01T16:11:49.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>繼上一篇成功截取出使用者資料後，發現除了基本資料外，朋友、按讚的資訊等資料其實都抓不出來，原因是因為沒有給予 app 存取這些資訊的權限。要求權限的話可以透過 OAuth 來索取 access token ，其範例網址如下：</p>
<p><code>https://www.facebook.com/dialog/oauth?client_id={appId}&amp;redirect_uri={redirectURI}</code></p>
<p><img src="/blog/images/profile.png" alt="Profile" title="Profile"><br><img src="/blog/images/profile02.png" alt="Profile details" title="Profile Details"></p>
<p>這是一個截取基本權限的網址，appId 指的是每一個 app 獨立的 ID，而 redirectURI 是當 OAuth 通過後，會送發一串 code 到這個 redirectURI 去，而若需要要求其他權限，可以增加 scope 屬性如下：</p>
<p><code>https://www.facebook.com/dialog/oauth?client_id={appId}&amp;redirect_uri={redirectURI}&amp;scope={accessPermissions}</code></p>
<p>這個 scope 以逗號作為分隔，填在裡面的將會在 Facebook dialog 中要求權限。</p>
<p><img src="/blog/images/user_friends.png" alt="Profile with friends" title="Profile with friends"><br><img src="/blog/images/user_friends02.png" alt="Profile with friends details" title="Profile with friends details"></p>
<p>講了這麼多，但以<a href="http://north.logdown.com/posts/280761-using-parsecom-cloud-code-hosting-to-log-in-with-facebook" target="_blank" rel="external">第一篇</a>中使用了<a href="https://github.com/ParsePlatform/parse-facebook-user-session" target="_blank" rel="external">parse-facebook-user-session</a>該怎麼修改呢？稍微翻了它的 source code 後發現它在實作上並沒有保留 scope 欄位，因此我便把 scope 加上去了，可以由此瀏覽：<a href="https://github.com/ssk7833/parse-facebook-user-session" target="_blank" rel="external">parse-facebook-user-session</a><br><strong>UPDATE：</strong>原 repository 已經將此功能 merge上 去，直接使用原本的即可</p>
<p>使用方式的話則與先前的沒什麼差別，只是可以選擇多填一個 scope 欄位，範例如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">app</span><span class="class">.use</span>(<span class="function">parseFacebookUserSession</span>(&#123;</span><br><span class="line">  <span class="attribute">clientId</span>: <span class="string">'YOUR_FB_CLIENT_ID'</span>,</span><br><span class="line">  <span class="attribute">appSecret</span>: <span class="string">'YOUR_FB_APP_SECRET'</span>,</span><br><span class="line">  <span class="attribute">redirectUri</span>: <span class="string">'/login'</span>,</span><br><span class="line">  <span class="attribute">scope</span>: <span class="string">'user_friends,user_likes'</span>, <span class="comment">// 要求friends與like資訊</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p>
<p>至於有哪些權限可以要求，可以當<a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="external">https://developers.facebook.com/tools/explorer/</a>中，點選 Get Access Token 來參考，並且在下面做測試。</p>
<p>不過要注意的有像是 <code>user_friends</code> 這項，如果在 API v2.0 以上的版本上要求資訊的話，只會列出同樣有授權此 app 的好友出來，開了幾個 test users 測試的確如此：</p>
<p>很可憐沒有朋友授權此 APP：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">id</span>": <span class="value"><span class="string">"104342733239984"</span></span>,</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"Hello world"</span></span>,</span><br><span class="line">  "<span class="attribute">friends</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">data</span>": <span class="value">[]</span>,</span><br><span class="line">    "<span class="attribute">summary</span>": <span class="value">&#123;</span><br><span class="line">      "<span class="attribute">total_count</span>": <span class="value"><span class="number">1</span></span><br><span class="line">    </span>&#125;</span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到 summary 中，total_count 為 1，但 data 中無資料。</p>
<p>有朋友也授權此 APP：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">id</span>": <span class="value"><span class="string">"1421116644879628"</span></span>,</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"Doraemon Cat"</span></span>,</span><br><span class="line">  "<span class="attribute">friends</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">data</span>": <span class="value">[</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Open Graph Test User"</span></span>,</span><br><span class="line">        "<span class="attribute">id</span>": <span class="value"><span class="string">"1414470195545509"</span></span><br><span class="line">      </span>&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Monkey D Luffy"</span></span>,</span><br><span class="line">        "<span class="attribute">id</span>": <span class="value"><span class="string">"100347703641647"</span></span><br><span class="line">      </span>&#125;</span><br><span class="line">    ]</span>,</span><br><span class="line">    "<span class="attribute">paging</span>": <span class="value">&#123;</span><br><span class="line">      "<span class="attribute">next</span>": <span class="value"><span class="string">"https://graph.facebook.com/1421116644879628/friends?limit=25&amp;offset=25&amp;__after_id=enc_AdAMpWdRxSLZAvND6bEd0htyyGsZAZBvzP6jzoAIZBKS9EiBSndZCNZC3S1AC5TEYchbuuBSV0xvg7ziwO4Cdt843yZApF"</span></span><br><span class="line">    </span>&#125;</span>,</span><br><span class="line">    "<span class="attribute">summary</span>": <span class="value">&#123;</span><br><span class="line">      "<span class="attribute">total_count</span>": <span class="value"><span class="number">2</span></span><br><span class="line">    </span>&#125;</span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到此 test user 有兩個朋友也都有安裝此 app。</p>
<p>至於怎麼得到 test user 的 access token，我是利用 Parse.com 的 API Console，Endpoint 填入 users 且 Use Master Key 改成 Yes，send request 後即可在 response 中看到 access token，即可複製此 token 到 <a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="external">https://developers.facebook.com/tools/explorer/</a> 中做測試，如下圖。</p>
<p><img src="/blog/images/APIconsole02.png" alt="API console" title="API console"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;繼上一篇成功截取出使用者資料後，發現除了基本資料外，朋友、按讚的資訊等資料其實都抓不出來，原因是因為沒有給予 app 存取這些資訊的權限。要求權限的話可以透過 OAuth 來索取 access token ，其範例網址如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://www
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CloudCode" scheme="http://ssk7833.github.io/blog/tags/CloudCode/"/>
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Parse.com" scheme="http://ssk7833.github.io/blog/tags/Parse-com/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>使用 Parse.com Cloud Code Hosting 進行 Facebook 登入存取 2</title>
    <link href="http://ssk7833.github.io/blog/2015/06/20/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-2/"/>
    <id>http://ssk7833.github.io/blog/2015/06/20/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-2/</id>
    <published>2015-06-20T15:43:39.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>延續上一篇，成功使用 Facebook 登入 Parse.com 的使用者資訊後，接著就是怎麼從使用者資訊中取得 Facebook 的資料了。</p>
<p><img src="/blog/images/user.png" alt="User" title="User"><br>以上圖的 Facebook Test Users 為例，建立完的使用者可以由 Parse.com 的 Data 中看到，不過 authData 卻只顯示了 Facebook 的 ID，因此我們可以先透過 API Console 來對 users 作存取，這裡要注意的是 Use Master Key 記得要選 Yes，否則會沒有權限看 authData 的內容；users 後面的參數為 objectId，若不放置則會列出全部符合的資料。<br><img src="/blog/images/APIconsole.png" alt="API console" title="API console"><br>在 Response 中的內容：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;</span><br><span class="line">  <span class="string">"authData"</span>: <span class="collection">&#123;</span><br><span class="line">    <span class="string">"facebook"</span>: <span class="collection">&#123;</span><br><span class="line">      // 不要想對這組 access_token 亂來，因為是 test user XD</span><br><span class="line">      <span class="string">"access_token"</span>: <span class="string">"CAAMCk3Pv7SkBAEjfvRaG4SrC8k3CXak1843iisuUJiIK9gYV9PNFRraXi9gxYVBJO83zsvzFO91dcACevKwinxAVPNCUeEv0UPWsmv7DZBlqPjtZCCnEBcMBKpU7ikoj9OKo1ZCwzi3wmTycsB2avHT1SiBxLUF5ZAHTaT9XDNtz1phGZCk0lltOY5agj0JGQ9ezNGmOsvUmdpKFASx5K"</span>,</span><br><span class="line">      <span class="string">"expiration_date"</span>: <span class="string">"2015-08-15T17:52:46.495Z"</span>,</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"118563748477765"</span></span><br><span class="line">    &#125;</span></span><br><span class="line">  &#125;</span>,</span><br><span class="line">  <span class="string">"createdAt"</span>: <span class="string">"2015-06-16T17:52:48.623Z"</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Super Mario"</span>,</span><br><span class="line">  <span class="string">"objectId"</span>: <span class="string">"wmVm7Qb1Fc"</span>,</span><br><span class="line">  <span class="string">"sessionToken"</span>: <span class="string">"jEKKzfbDcIN0CmBIvsdZR9Aoc"</span>,</span><br><span class="line">  <span class="string">"updatedAt"</span>: <span class="string">"2015-06-17T07:57:08.934Z"</span>,</span><br><span class="line">  <span class="string">"username"</span>: <span class="string">"3GwDpgmuqmfnyGYINNI27W9fO"</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>已經知道存放在哪裡之後，接下來就是利用 cloud code function 建立資料存取了！在這裡我用名字與圖片作範例，參考了 <a href="http://stackoverflow.com/a/16445118/4968420" target="_blank" rel="external">stackoverflow 這篇的回答</a>稍微修改了一下：<br>當然，別忘記 userMasterKey…<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Parse.Cloud.define(<span class="string">"facebook"</span>, <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> </span>&#123;</span><br><span class="line">  Parse.Cloud.useMasterKey();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Parse.Query(Parse.User).<span class="keyword">get</span>(request.params.user_id).then(<span class="function"><span class="keyword">function</span><span class="params">(user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> authData = user.<span class="keyword">get</span>(<span class="string">"authData"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Quit early for users who aren't linked with Facebook</span></span><br><span class="line">    <span class="keyword">if</span> (authData === <span class="literal">undefined</span> || authData.facebook === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      response.success(<span class="literal">null</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Parse.Cloud.httpRequest(&#123;</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      url: <span class="string">"https://graph.facebook.com/me"</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        access_token: authData.facebook.access_token,</span><br><span class="line">        fields: <span class="string">"name, friends"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(json)</span> </span>&#123;</span><br><span class="line">    response.success(json.data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Promises will let you bubble up any error, similar to a catch statement</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span><br><span class="line">    response.error(error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在 Express 中 call 建立好的 cloud host function：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="keyword">get</span>(<span class="string">'/test'</span>, fbLogin, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = Parse.User.current();</span><br><span class="line">  Parse.Cloud.run(<span class="string">'facebook'</span>, &#123; user_id: user.id &#125;, &#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span> </span>&#123;</span><br><span class="line">      res.send(<span class="string">'Congrats, you are logged in, '</span> + results.name + <span class="string">'!'</span> +  <span class="string">'&lt;img src="https://graph.facebook.com/'</span>+ results.id +<span class="string">'/picture?type=normal"&gt;'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;</span><br><span class="line">      console.log(<span class="string">"error :"</span> + error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>若是成功的話就能在自己的 URL 中看到如下圖的結果了！<br><img src="/blog/images/facebookSuccess.png" alt="Facebook success" title="Facebook success"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;延續上一篇，成功使用 Facebook 登入 Parse.com 的使用者資訊後，接著就是怎麼從使用者資訊中取得 Facebook 的資料了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/user.png&quot; alt=&quot;User&quot; title=&quot;User&quot;&gt;&lt;
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CloudCode" scheme="http://ssk7833.github.io/blog/tags/CloudCode/"/>
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Parse.com" scheme="http://ssk7833.github.io/blog/tags/Parse-com/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>使用 Parse.com Cloud Code Hosting 進行 Facebook 登入存取 1</title>
    <link href="http://ssk7833.github.io/blog/2015/06/20/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-1/"/>
    <id>http://ssk7833.github.io/blog/2015/06/20/using-parsecom-cloud-code-hosting-to-log-in-with-facebook-1/</id>
    <published>2015-06-20T14:13:10.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://parse.com/" target="_blank" rel="external">Parse.com</a> 在 <a href="https://parse.com/docs/tw/js/guide" target="_blank" rel="external">javascript SDK</a> 中提供了使用者的存取，其中包含 Facebook 的整合，但 javascript 終究是前端，有些不想讓 client end知道的還是放在後端處理比較好。然而 Parse.com 所提供的 cloud code 所使用的目前雖是 node.js，會讓開發者很想直接把 javascript SDK 的 Facebook 部分塞進去看能不能跑，乍看之下很合理，但實際上就是不行，因為以 Parse.com Javascript SDK在要求登入時會跳出另一個瀏覽器視窗以要求登入 Facebook 及權限給予，而這個視窗當然沒有辦法在 server end 中呈現並要求 client end 進行認證。</p>
<p>在官方論壇上也有人發表過此問題：<a href="https://www.parse.com/questions/interacting-with-the-facebook-api-in-cloud-code" target="_blank" rel="external">Interacting with the Facebook API in Cloud Code</a><br>所得到的回答是：<br><strong>Unfortunately, the Facebook JavaScript SDK is not made to work outside of a browser, so using it directly from Cloud Code is not supported at the moment.</strong></p>
<p><strong>You can, however, get the authData from the current user in cloud code and use that to make a REST call to Facebook’s graph API manually.</strong></p>
<p>因此我轉而研究使用OAuth方式來登入Facebook，除了跳轉出的頁面比較美觀外（不會產生另一個瀏覽器視窗），也不用擔心暴露資訊給clent end，參考資料有這兩篇：<br><a href="http://sweeteason.pixnet.net/blog/post/40581580-%E7%B6%B2%E7%AB%99%E5%88%A9%E7%94%A8-facebook-%E5%B8%B3%E8%99%9F%E7%99%BB%E5%85%A5-%28%E4%BD%BF%E7%94%A8-oauth%29" target="_blank" rel="external">網站利用 Facebook 帳號登入 (使用 OAuth)</a><br><a href="https://gigenchang.wordpress.com/2014/01/26/10%E5%88%86%E9%90%98%E7%90%86%E8%A7%A3oauth%E5%92%8Cfacebook%E7%99%BB%E5%85%A5%E5%8E%9F%E7%90%86/" target="_blank" rel="external">10分鐘理解OAuth和facebook登入原理</a><br>這篇以python Django framework實作，其實看code好像也蠻容易理解的：<a href="http://nthn.me/posts/2012/facebook-registration.html" target="_blank" rel="external">Ghetto Facebook Registration with Django</a></p>
<p>後來正當我開始打算實作時，我找到了 <a href="https://github.com/ParsePlatform/parse-facebook-user-session" target="_blank" rel="external">parse-facebook-user-session</a> ，原來 Parse.com 早就把這個寫好了，根本不用自己去寫了，只需要按照他的說明一步一步來就行了（吧）！</p>
<p>結果證明事情果然不是我想的這麼簡單，不管怎麼弄就是跳出 <strong>209 invalid session token</strong> ，花了一段時間後找到 Parse.com 自己發的文章 <a href="https://www.parse.com/tutorials/session-migration-tutorial" target="_blank" rel="external">Session Migration Tutorial</a> ，才知道把這個選項關掉就行了，我花了這麼久到底在幹麻！</p>
<p><img src="/blog/images/userSessions.png" alt="User sessions" title="User sessions"><br>總之，關閉這個選項後就成功了， Parse.com 的資料庫也會成功紀錄登入過的使用者，事情完成一半，其餘的就是登入的使用者資料該怎麼讀取出來了～</p>
<p><strong>UPDATE：</strong>在GitHub上新增了 <a href="https://loginexample.parseapp.com/" target="_blank" rel="external">demo</a>：<a href="https://github.com/ssk7833/Parse-Facebook-OAuth-login-example" target="_blank" rel="external">GitHub</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://parse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parse.com&lt;/a&gt; 在 &lt;a href=&quot;https://parse.com/docs/tw/js/guide&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="CloudCode" scheme="http://ssk7833.github.io/blog/tags/CloudCode/"/>
    
      <category term="Facebook" scheme="http://ssk7833.github.io/blog/tags/Facebook/"/>
    
      <category term="Parse.com" scheme="http://ssk7833.github.io/blog/tags/Parse-com/"/>
    
      <category term="node.js" scheme="http://ssk7833.github.io/blog/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>PHPWord 中文字顯示與下載問題</title>
    <link href="http://ssk7833.github.io/blog/2012/09/24/show-Chinese-character-and-download-issues-in-PHPWord/"/>
    <id>http://ssk7833.github.io/blog/2012/09/24/show-Chinese-character-and-download-issues-in-PHPWord/</id>
    <published>2012-09-24T11:52:10.000Z</published>
    <updated>2016-08-02T08:04:58.689Z</updated>
    
    <content type="html"><![CDATA[<p><strong>UPDATE 2016-06-24：</strong>不曉得當初自己怎麼沒將這篇從 <a href="http://northzo.blogspot.tw/2012/09/phpword.html" target="_blank" rel="external">Blogger</a> 轉過來，總之現在是轉過來了，只將內文格式改為 Markdown，不確定內文是否還能使用，請閱讀者再自行斟酌一下（畢竟也是2012時發的文了）。</p>
<hr>
<p>好久沒有更新了，看到上次更新的日期，我覺得我的文章產出可能會是一年一篇至兩篇（崩潰）</p>
<p>這次碰上的問題主要是有個網頁委託內容包含需動態產生word檔以供使用者下載，因此我從先前接觸過的 <a href="http://phpexcel.codeplex.com/" target="_blank" rel="external">PHPExcel</a> 而找到 <a href="http://phpword.codeplex.com/" target="_blank" rel="external">PHPWord</a> 這套 library。先前使用 PHPExcel 時多半是為了利用簡單的方式來讀取 excel 檔中的內容，而並未自行產出一個獨立的 excel 檔，而這次算是剛好反過來了，要利用已有的內容來產生一個 word 檔。</p>
<p>起初利用 PHPWord 0.6.2-1 Beta 所提供的 examples 成功建立 word 檔後覺得還蠻放心的，後來隨即也想到若是包含中文字時會不會有編碼問題，因此測了一下，果然變成亂碼了。後來隨即在官方討論區找到此篇文章：<a href="http://phpword.codeplex.com/discussions/261365" target="_blank" rel="external">how to properly handle UTF-8 ? (UTF8)</a>，原來不只我遇到了這個問題～而根據底下的回覆表示以簡體中文編碼為例，須將 source code 中的 <code>$givenText = utf8_encode($text);</code> 註解並換成 <code>$text = iconv(&#39;gbk&#39;,&#39;utf-8&#39;,&#39;福建省泉州市惠南工业区北一路&#39;);</code> 即可解決問題，但這個方法只適用於範例中的 Template.php 才行，用在 Basic Table.php 則會出現亂碼。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始寫法</span></span><br><span class="line"><span class="variable">$givenText</span> = utf8_encode(<span class="variable">$text</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改後</span></span><br><span class="line"><span class="comment">//$givenText = utf8_encode($text);</span></span><br><span class="line"><span class="variable">$text</span> = iconv(<span class="string">'gbk'</span>,<span class="string">'utf-8'</span>,<span class="string">'福建省泉州市惠南工业区北一路'</span>);</span><br></pre></td></tr></table></figure>
<p>後來我將 source code 中所有包含 utf8_encode 的文件都以 <code>iconv</code> 的方式去取代，結果算是成功沒出現亂碼了，但是 word 會在開啟時跳出錯誤警告，表示此檔案已損毀是否要進行修復（修復後沒大礙就是了）。憑著吹毛求疵斤斤計較的精神，也擔心使用者若看到損毀時會有疑慮，因此我又開始找其他方式去做，而最後找到的方法就是直接將有包含 utf8_encode 的文件都註解掉，改成直接賦予對應值，如下範例：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始寫法</span></span><br><span class="line"><span class="variable">$givenText</span> = utf8_encode(<span class="variable">$text</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改後</span></span><br><span class="line"><span class="comment">//$givenText = utf8_encode($text);</span></span><br><span class="line"><span class="variable">$givenText</span> = <span class="variable">$text</span>;</span><br></pre></td></tr></table></figure>
<p>另外範例中用來產生 word 的 PHP 也記得先改成 utf-8，之後即可輕鬆產生包含中文內容的 docx 檔～</p>
<hr>
<p>至於該如何直接產生word供使用者一點擊就下載，方法我也都找到了，只是 Template 在 PHPWord 中的寫法與其他比較不一樣，因此方法也有被侷限住，一般的如 Basic Table 可以用以下方法來達到不存檔而下載，只要在最後 Save File 部分動一點手腳即可：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save File</span></span><br><span class="line"><span class="variable">$objWriter</span> = PHPWord_IOFactory::createWriter(<span class="variable">$PHPWord</span>, <span class="string">'Word2007'</span>);</span><br><span class="line"><span class="comment">// 原本是儲存到當前目錄下，名為BasicTable.docx</span></span><br><span class="line"><span class="comment">// $objWriter-&gt;save('BasicTable.docx');</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先寫入header，再利用$objWriter-&gt;save('php://output');</span></span><br><span class="line"><span class="comment">// 將結果直接show出來，即可成功進行下載動作</span></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">'abc.docx'</span>;</span><br><span class="line">header(<span class="string">"Cache-Control: public"</span>);</span><br><span class="line">header(<span class="string">"Content-Description: File Transfer"</span>);</span><br><span class="line">header(<span class="string">"Content-Disposition: attachment; filename=$filename"</span>);</span><br><span class="line">header(<span class="string">"Content-Type: application/octet-stream; "</span>);</span><br><span class="line">header(<span class="string">"Content-Transfer-Encoding: binary"</span>);</span><br><span class="line"><span class="variable">$objWriter</span>-&gt;save(<span class="string">'php://output'</span>);</span><br></pre></td></tr></table></figure>
<p>而 Template 無法使用上述方法，須使用下面範例才行：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save File</span></span><br><span class="line"><span class="comment">// 原本是儲存到當前目錄下，名為Solarsystem.docx</span></span><br><span class="line"><span class="comment">// $document-&gt;save('Solarsystem.docx');</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先將檔案暫存起來</span></span><br><span class="line"><span class="variable">$temp_file</span> = tempnam(sys_get_temp_dir(), <span class="string">'PHPWord'</span>);</span><br><span class="line"><span class="variable">$document</span>-&gt;save(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一樣是寫入header，但最後以不同指令呈現出來，最後再刪掉伺服器上的暫存檔</span></span><br><span class="line"><span class="variable">$objWriter</span> = PHPWord_IOFactory::createWriter(<span class="variable">$PHPWord</span>, <span class="string">'Word2007'</span>);</span><br><span class="line"><span class="variable">$filename</span> = <span class="string">'abc.docx'</span>;</span><br><span class="line">header(<span class="string">"Cache-Control: public"</span>);</span><br><span class="line">header(<span class="string">"Content-Description: File Transfer"</span>);</span><br><span class="line">header(<span class="string">"Content-Disposition: attachment; filename=$filename"</span>);</span><br><span class="line">header(<span class="string">"Content-Type: application/octet-stream; "</span>);</span><br><span class="line">header(<span class="string">"Content-Transfer-Encoding: binary"</span>);</span><br><span class="line">readfile(<span class="variable">$temp_file</span>); <span class="comment">// or echo file_get_contents($temp_file);</span></span><br><span class="line">unlink(<span class="variable">$temp_file</span>);  <span class="comment">// remove temp file</span></span><br></pre></td></tr></table></figure>
<p>到這裡我所需要的功能大致上齊全了，只剩下 PHPWord 沒辦法產生 word2003(*.doc) 的檔案，也是一個令人頭痛的問題。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;UPDATE 2016-06-24：&lt;/strong&gt;不曉得當初自己怎麼沒將這篇從 &lt;a href=&quot;http://northzo.blogspot.tw/2012/09/phpword.html&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="PHP" scheme="http://ssk7833.github.io/blog/tags/PHP/"/>
    
      <category term="PHPWord" scheme="http://ssk7833.github.io/blog/tags/PHPWord/"/>
    
  </entry>
  
  <entry>
    <title>將 cd 跟 ls 合併為一個指令</title>
    <link href="http://ssk7833.github.io/blog/2011/01/18/combine-cd-and-ls-into-one-command/"/>
    <id>http://ssk7833.github.io/blog/2011/01/18/combine-cd-and-ls-into-one-command/</id>
    <published>2011-01-17T17:45:05.000Z</published>
    <updated>2016-01-07T16:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>用 alias, script, unix programing 都無法達到更換資料夾後並印出資料夾內容的功能<br>最後測試只有 function 可以。</p>
<p>若是 bash shell，將 .bashrc 增加下列程式碼後重新載入 .bashrc 即可。</p>
<pre><code>cds() { cd &quot;$1&quot;; ls; }
</code></pre><p>接著只要執行 cds 指令即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 alias, script, unix programing 都無法達到更換資料夾後並印出資料夾內容的功能&lt;br&gt;最後測試只有 function 可以。&lt;/p&gt;
&lt;p&gt;若是 bash shell，將 .bashrc 增加下列程式碼後重新載入 .bashrc 即可。&lt;/p
    
    </summary>
    
      <category term="study" scheme="http://ssk7833.github.io/blog/categories/study/"/>
    
    
      <category term="shell script" scheme="http://ssk7833.github.io/blog/tags/shell-script/"/>
    
  </entry>
  
</feed>
